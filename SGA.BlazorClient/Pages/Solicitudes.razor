@page "/solicitudes"
@using SGA.Application.DTOs
@using SGA.Domain.Enums
@using SGA.BlazorClient.Services
@inject IPromotionRequestService PromotionRequestService
@inject ITeacherService TeacherService
@inject IDocumentService DocumentService
@inject NavigationManager NavigationManager

<h3>Solicitudes de Promoción</h3>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="input-group">
            <span class="input-group-text">Filtrar por Estado</span>
            <select class="form-select" @onchange="FiltrarPorEstado">
                <option value="-1">Todos</option>
                <option value="@((int)PromotionRequestStatus.Pending)">Pendiente</option>
                <option value="@((int)PromotionRequestStatus.InProgress)">En Progreso</option>
                <option value="@((int)PromotionRequestStatus.Approved)">Aprobada</option>
                <option value="@((int)PromotionRequestStatus.Rejected)">Rechazada</option>
            </select>
        </div>
    </div>
    <div class="col-md-6 text-end">
        <button class="btn btn-primary" @onclick="MostrarFormularioCreacion">Nueva Solicitud</button>
    </div>
</div>

@if (cargando)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else if (solicitudes == null || !solicitudes.Any())
{
    <div class="alert alert-info">No hay solicitudes disponibles.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Profesor</th>
                    <th>Rango Actual</th>
                    <th>Rango Objetivo</th>
                    <th>Estado</th>
                    <th>Fecha Creación</th>
                    <th>Documento</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var solicitud in solicitudes)
                {
                    <tr>
                        <td>@solicitud.TeacherFullName</td>
                        <td>@solicitud.CurrentRank</td>
                        <td>@solicitud.TargetRank</td>
                        <td><span class="@GetStatusClass(solicitud.Status)">@solicitud.Status</span></td>
                        <td>@solicitud.CreatedAt.ToShortDateString()</td>
                        <td>
                            @if (solicitud.DocumentId.HasValue)
                            {
                                <button class="btn btn-sm btn-info" @onclick="() => VerDocumento(solicitud.DocumentId.Value)">Ver</button>
                            }
                            else
                            {
                                <span>Sin documento</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => VerDetalles(solicitud.Id)">Detalles</button>
                            <button class="btn btn-sm btn-warning" @onclick="() => VerObservaciones(solicitud.Id)">Observaciones</button>
                            @if (solicitud.Status == PromotionRequestStatus.Pending)
                            {
                                <button class="btn btn-sm btn-success" @onclick="() => ProcesarSolicitud(solicitud.Id, PromotionRequestStatus.InProgress)">Iniciar</button>
                            }
                            else if (solicitud.Status == PromotionRequestStatus.InProgress)
                            {
                                <button class="btn btn-sm btn-success" @onclick="() => ProcesarSolicitud(solicitud.Id, PromotionRequestStatus.Approved)">Aprobar</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ProcesarSolicitud(solicitud.Id, PromotionRequestStatus.Rejected)">Rechazar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (mostrarFormularioCreacion)
{
    <div class="card mt-4">
        <div class="card-header">
            <h5>Nueva Solicitud de Promoción</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="teacherId" class="form-label">Profesor</label>
                <select id="teacherId" @bind="profesorId" class="form-control">
                    <option value="0">Seleccione un profesor</option>
                    @if (profesores != null)
                    {
                        @foreach (var profesor in profesores)
                        {
                            <option value="@profesor.Id">@profesor.FirstName @profesor.LastName</option>
                        }
                    }
                </select>
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="incluirDocumento" @bind="incluirDocumento" />
                    <label class="form-check-label" for="incluirDocumento">
                        Incluir Documento
                    </label>
                </div>
            </div>

            @if (incluirDocumento && documentos != null)
            {
                <div class="mb-3">
                    <label for="documentId" class="form-label">Documento</label>
                    <select id="documentId" @bind="documentoId" class="form-control">
                        <option value="0">Seleccione un documento</option>
                        @foreach (var documento in documentos)
                        {
                            <option value="@documento.Id">@documento.Name</option>
                        }
                    </select>
                </div>
            }

            <button type="button" class="btn btn-primary me-2" @onclick="CrearSolicitud">Crear Solicitud</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelarCreacion">Cancelar</button>
        </div>
    </div>
}

@if (mostrarFormularioProcesar)
{
    <div class="card mt-4">
        <div class="card-header">
            <h5>Procesar Solicitud</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="comments" class="form-label">Comentarios</label>
                <textarea id="comments" @bind="comentarios" class="form-control" rows="3"></textarea>
            </div>

            <button type="button" class="btn btn-primary me-2" @onclick="ConfirmarProcesamientoSolicitud">Confirmar</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelarProcesamiento">Cancelar</button>
        </div>
    </div>
}

@code {
    private IEnumerable<PromotionRequestDto>? solicitudes;
    private IEnumerable<TeacherDto>? profesores;
    private IEnumerable<DocumentDto>? documentos;
    private bool cargando = true;
    private bool mostrarFormularioCreacion = false;
    private bool mostrarFormularioProcesar = false;
    private int profesorId = 0;
    private int documentoId = 0;
    private int solicitudIdSeleccionada = 0;
    private PromotionRequestStatus nuevoEstado;
    private string comentarios = "";
    private bool incluirDocumento = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        cargando = true;
        try
        {
            solicitudes = await PromotionRequestService.GetAllRequestsAsync();
            profesores = await TeacherService.GetAllTeachersAsync();
        }
        catch (Exception ex)
        {
            // Manejar error
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }    private async Task FiltrarPorEstado(ChangeEventArgs e)
    {
        int estadoId;
        if (e.Value != null && int.TryParse(e.Value.ToString(), out estadoId) && estadoId >= 0)
        {
            cargando = true;
            solicitudes = await PromotionRequestService.GetRequestsByStatusAsync((PromotionRequestStatus)estadoId);
            cargando = false;
        }
        else
        {
            await CargarDatos();
        }
    }

    private void MostrarFormularioCreacion()
    {
        profesorId = 0;
        documentoId = 0;
        incluirDocumento = false;
        mostrarFormularioCreacion = true;
    }

    private void CancelarCreacion()
    {
        mostrarFormularioCreacion = false;
    }    private async Task OnProfesorSeleccionado(ChangeEventArgs e)
    {
        int id;
        if (e.Value != null && int.TryParse(e.Value.ToString(), out id) && id > 0)
        {
            profesorId = id;
            if (incluirDocumento)
            {
                documentos = await DocumentService.GetDocumentsByTeacherIdAsync(profesorId);
            }
        }
    }    private async Task OnIncluirDocumentoChanged(ChangeEventArgs e)
    {
        incluirDocumento = e.Value != null && (bool)e.Value;
        if (incluirDocumento && profesorId > 0)
        {
            documentos = await DocumentService.GetDocumentsByTeacherIdAsync(profesorId);
        }
    }

    private async Task CrearSolicitud()
    {
        if (profesorId <= 0)
        {
            // Mostrar mensaje de error: Seleccione un profesor
            return;
        }

        try
        {
            int solicitudId;

            if (incluirDocumento && documentoId > 0)
            {
                solicitudId = await PromotionRequestService.CreateRequestWithDocumentAsync(profesorId, documentoId);
            }
            else
            {
                solicitudId = await PromotionRequestService.CreateRequestAsync(profesorId);
            }

            await CargarDatos();
            mostrarFormularioCreacion = false;
            
            // Opcionalmente, redireccionar a los detalles de la solicitud
            NavigationManager.NavigateTo($"/solicitudes/{solicitudId}");
        }
        catch (Exception ex)
        {
            // Manejar error
            Console.WriteLine($"Error al crear solicitud: {ex.Message}");
        }
    }

    private void VerDetalles(int id)
    {
        NavigationManager.NavigateTo($"/solicitudes/{id}");
    }

    private void VerObservaciones(int id)
    {
        NavigationManager.NavigateTo($"/observaciones-promocion/{id}");
    }

    private void ProcesarSolicitud(int id, PromotionRequestStatus status)
    {
        solicitudIdSeleccionada = id;
        nuevoEstado = status;
        comentarios = "";
        mostrarFormularioProcesar = true;
    }

    private void CancelarProcesamiento()
    {
        mostrarFormularioProcesar = false;
    }

    private async Task ConfirmarProcesamientoSolicitud()
    {
        try
        {
            bool resultado = await PromotionRequestService.ProcessRequestAsync(solicitudIdSeleccionada, nuevoEstado, comentarios);
            if (resultado)
            {
                await CargarDatos();
                mostrarFormularioProcesar = false;
            }
            else
            {
                // Mostrar mensaje de error
            }
        }
        catch (Exception ex)
        {
            // Manejar error
            Console.WriteLine($"Error al procesar solicitud: {ex.Message}");
        }
    }

    private void VerDocumento(int documentId)
    {
        NavigationManager.NavigateTo($"/documentos/{documentId}");
    }

    private string GetStatusClass(PromotionRequestStatus status)
    {
        return status switch
        {
            PromotionRequestStatus.Pending => "badge bg-warning",
            PromotionRequestStatus.InProgress => "badge bg-info",
            PromotionRequestStatus.Approved => "badge bg-success",
            PromotionRequestStatus.Rejected => "badge bg-danger",
            _ => "badge bg-secondary"
        };
    }
}
