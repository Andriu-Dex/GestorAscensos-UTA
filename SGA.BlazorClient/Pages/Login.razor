@page "/login"
@using SGA.Application.DTOs
@using SGA.BlazorApp.Client.Auth
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="login-card">
        <h3 class="text-center mb-4">Iniciar Sesión</h3>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
        
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            
            <div class="mb-3">
                <label for="username" class="form-label">Nombre de Usuario</label>
                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
            </div>
            
            <div class="mb-3">
                <label for="password" class="form-label">Contraseña</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>
            
            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Cargando...</span>
                    }
                    else
                    {
                        <span>Iniciar Sesión</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
    }
    
    .login-card {
        width: 100%;
        max-width: 400px;
        padding: 2rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border-radius: 8px;
        background-color: white;
    }
</style>

@code {
    private LoginRequestDto loginModel = new LoginRequestDto();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Redirigir si ya está autenticado
        if (await AuthService.IsUserAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }
    }
    
    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            var result = await AuthService.Login(loginModel);
            
            if (result == null)
            {
                errorMessage = "Nombre de usuario o contraseña incorrectos";
                return;
            }
            
            // Redirigir según el rol
            var role = await AuthService.GetUserRole();
            
            if (role == "Administrador")
            {
                NavigationManager.NavigateTo("/admin/dashboard");
            }
            else
            {
                NavigationManager.NavigateTo("/dashboard");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error al iniciar sesión: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}
