@page "/promotion-requests"
@using SGA.Application.DTOs
@using SGA.Domain.Enums
@using SGA.BlazorClient.Services
@using SGA.BlazorClient.Shared
@inject IPromotionRequestService PromotionRequestService

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Solicitudes de Ascenso</h3>
    <div>
        <button class="btn btn-primary" @onclick="() => LoadRequests()">
            <i class="bi bi-arrow-clockwise me-1"></i> Actualizar
        </button>
    </div>
</div>

<div class="card shadow-sm mb-4">
    <div class="card-header bg-light">
        <h5 class="mb-0">Filtrar por Estado</h5>
    </div>
    <div class="card-body">
        <div class="btn-group w-100" role="group">
            <button class="btn @(currentFilter == null ? "btn-primary" : "btn-outline-primary")" @onclick="() => FilterRequests(null)">
                <i class="bi bi-funnel me-1"></i> Todas
            </button>
            <button class="btn @(currentFilter == PromotionRequestStatus.Pending ? "btn-primary" : "btn-outline-primary")" @onclick="() => FilterRequests(PromotionRequestStatus.Pending)">
                <i class="bi bi-hourglass me-1"></i> Pendientes
            </button>
            <button class="btn @(currentFilter == PromotionRequestStatus.InProgress ? "btn-primary" : "btn-outline-primary")" @onclick="() => FilterRequests(PromotionRequestStatus.InProgress)">
                <i class="bi bi-arrow-repeat me-1"></i> En Progreso
            </button>
            <button class="btn @(currentFilter == PromotionRequestStatus.Approved ? "btn-primary" : "btn-outline-primary")" @onclick="() => FilterRequests(PromotionRequestStatus.Approved)">
                <i class="bi bi-check-circle me-1"></i> Aprobadas
            </button>
            <button class="btn @(currentFilter == PromotionRequestStatus.Rejected ? "btn-primary" : "btn-outline-primary")" @onclick="() => FilterRequests(PromotionRequestStatus.Rejected)">
                <i class="bi bi-x-circle me-1"></i> Rechazadas
            </button>
        </div>
    </div>
</div>

@if (requests == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else if (!requests.Any())
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle me-2"></i>
        No hay solicitudes de ascenso que coincidan con el filtro actual.
    </div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Docente</th>
                            <th>Rango Actual</th>
                            <th>Rango Objetivo</th>
                            <th>Estado</th>
                            <th>Fecha de Creación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var request in requests)
                        {
                            <tr>
                                <td>@request.Id</td>
                                <td>@request.TeacherFullName</td>
                                <td>
                                    <span class="badge bg-secondary">@request.CurrentRank</span>
                                </td>
                                <td>
                                    <span class="badge bg-primary">@request.TargetRank</span>
                                </td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(request.Status)">
                                        <i class="@GetStatusIconClass(request.Status) me-1"></i>
                                        @request.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-calendar-date me-1 text-muted"></i>
                                        @request.CreatedAt.ToShortDateString()
                                    </div>
                                </td>
                                <td>
                                    <button class="btn btn-outline-info btn-sm" @onclick="() => ViewDetails(request)">
                                        <i class="bi bi-eye me-1"></i> Ver Detalles
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@if (selectedRequest != null)
{
    <div class="modal" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header @GetHeaderColorClass(selectedRequest.Status)">
                    <h5 class="modal-title">
                        <i class="@GetStatusIconClass(selectedRequest.Status) me-2"></i>
                        Detalles de Solicitud de Ascenso
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="small text-muted mb-1">ID de Solicitud</div>
                                <h6>@selectedRequest.Id</h6>
                            </div>
                            <div class="mb-3">
                                <div class="small text-muted mb-1">Docente</div>
                                <h6>@selectedRequest.TeacherFullName</h6>
                            </div>
                            <div class="mb-3">
                                <div class="small text-muted mb-1">Estado</div>
                                <h6>
                                    <span class="badge @GetStatusBadgeClass(selectedRequest.Status)">
                                        @selectedRequest.Status
                                    </span>
                                </h6>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="small text-muted mb-1">Rango Actual</div>
                                <h6>@selectedRequest.CurrentRank</h6>
                            </div>
                            <div class="mb-3">
                                <div class="small text-muted mb-1">Rango Objetivo</div>
                                <h6>@selectedRequest.TargetRank</h6>
                            </div>
                            <div class="mb-3">
                                <div class="small text-muted mb-1">Fecha de Creación</div>
                                <h6>@selectedRequest.CreatedAt.ToShortDateString()</h6>
                            </div>
                            <div class="mb-3">
                                <div class="small text-muted mb-1">Fecha de Procesamiento</div>
                                <h6>@(selectedRequest.ProcessedDate.HasValue ? selectedRequest.ProcessedDate.Value.ToShortDateString() : "No procesada")</h6>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedRequest.Comments))
                    {
                        <div class="mb-4">
                            <div class="small text-muted mb-1">Comentarios</div>
                            <div class="p-3 bg-light rounded">
                                @selectedRequest.Comments
                            </div>
                        </div>
                    }

                    @if (selectedRequest.Status == PromotionRequestStatus.Pending || selectedRequest.Status == PromotionRequestStatus.InProgress)
                    {
                        <div class="card mt-4">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">Procesar Solicitud</h5>
                            </div>
                            <div class="card-body">
                                <div class="form-group mb-3">
                                    <label for="newStatus" class="form-label">Cambiar Estado:</label>
                                    <select id="newStatus" class="form-select" @bind="newStatus">
                                        @if (selectedRequest.Status == PromotionRequestStatus.Pending)
                                        {
                                            <option value="@PromotionRequestStatus.InProgress">En Progreso</option>
                                        }
                                        <option value="@PromotionRequestStatus.Approved">Aprobar</option>
                                        <option value="@PromotionRequestStatus.Rejected">Rechazar</option>
                                    </select>
                                </div>

                                <div class="form-group mb-3">
                                    <label for="comments" class="form-label">Comentarios:</label>
                                    <textarea id="comments" class="form-control" rows="3" @bind="comments"></textarea>
                                    @if (newStatus == PromotionRequestStatus.Rejected && string.IsNullOrWhiteSpace(comments))
                                    {
                                        <div class="text-danger mt-1">
                                            <i class="bi bi-exclamation-triangle me-1"></i>
                                            Se requieren comentarios para rechazar una solicitud.
                                        </div>
                                    }
                                </div>

                                <button class="btn btn-primary w-100" @onclick="ProcessRequest" 
                                        disabled="@(newStatus == PromotionRequestStatus.Rejected && string.IsNullOrWhiteSpace(comments))">
                                    <i class="bi bi-check2-all me-1"></i>
                                    Procesar Solicitud
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                        <i class="bi bi-x-circle me-1"></i>
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3 alert-dismissible fade show" role="alert">
        <i class="bi @(isSuccess ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage" aria-label="Close"></button>
    </div>
}

@code {
    private IEnumerable<PromotionRequestDto>? requests;
    private PromotionRequestStatus? currentFilter;
    private PromotionRequestDto? selectedRequest;
    private PromotionRequestStatus newStatus;
    private string comments = string.Empty;
    private string message = string.Empty;
    private bool isSuccess;

    protected override async Task OnInitializedAsync()
    {
        await LoadRequests();
    }

    private async Task LoadRequests()
    {
        try
        {
            if (currentFilter.HasValue)
            {
                requests = await PromotionRequestService.GetRequestsByStatusAsync(currentFilter.Value);
            }
            else
            {
                requests = await PromotionRequestService.GetAllRequestsAsync();
            }
        }
        catch (Exception ex)
        {
            message = $"Error al cargar solicitudes: {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task FilterRequests(PromotionRequestStatus? status)
    {
        currentFilter = status;
        await LoadRequests();
    }

    private void ViewDetails(PromotionRequestDto request)
    {
        selectedRequest = request;
        comments = string.Empty;
        
        // Establecer el estado predeterminado según el estado actual
        if (request.Status == PromotionRequestStatus.Pending)
        {
            newStatus = PromotionRequestStatus.InProgress;
        }
        else
        {
            newStatus = PromotionRequestStatus.Approved;
        }
    }

    private void CloseModal()
    {
        selectedRequest = null;
    }

    private void ClearMessage()
    {
        message = string.Empty;
        StateHasChanged();
    }

    private async Task ProcessRequest()
    {
        if (selectedRequest == null) return;

        // Validar que haya comentarios para el rechazo
        if (newStatus == PromotionRequestStatus.Rejected && string.IsNullOrWhiteSpace(comments))
        {
            return;
        }

        try
        {
            var success = await PromotionRequestService.ProcessRequestAsync(selectedRequest.Id, newStatus, comments);
            
            if (success)
            {
                message = $"Solicitud {GetStatusText(newStatus)} exitosamente.";
                isSuccess = true;
                CloseModal();
                await LoadRequests();
            }
            else
            {
                message = "Error al procesar la solicitud.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error al procesar solicitud: {ex.Message}";
            isSuccess = false;
        }
    }

    private string GetStatusBadgeClass(PromotionRequestStatus status)
    {
        return status switch
        {
            PromotionRequestStatus.Pending => "bg-warning text-dark",
            PromotionRequestStatus.InProgress => "bg-info text-dark",
            PromotionRequestStatus.Approved => "bg-success",
            PromotionRequestStatus.Rejected => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetHeaderColorClass(PromotionRequestStatus status)
    {
        return status switch
        {
            PromotionRequestStatus.Pending => "bg-warning text-dark",
            PromotionRequestStatus.InProgress => "bg-info text-white",
            PromotionRequestStatus.Approved => "bg-success text-white",
            PromotionRequestStatus.Rejected => "bg-danger text-white",
            _ => "bg-primary text-white"
        };
    }

    private string GetStatusIconClass(PromotionRequestStatus status)
    {
        return status switch
        {
            PromotionRequestStatus.Pending => "bi bi-hourglass",
            PromotionRequestStatus.InProgress => "bi bi-arrow-repeat",
            PromotionRequestStatus.Approved => "bi bi-check-circle",
            PromotionRequestStatus.Rejected => "bi bi-x-circle",
            _ => "bi bi-question-circle"
        };
    }

    private string GetStatusText(PromotionRequestStatus status)
    {
        return status switch
        {
            PromotionRequestStatus.Pending => "pendiente",
            PromotionRequestStatus.InProgress => "en progreso",
            PromotionRequestStatus.Approved => "aprobada",
            PromotionRequestStatus.Rejected => "rechazada",
            _ => "actualizada"
        };
    }
}
