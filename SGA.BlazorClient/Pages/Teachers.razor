@page "/teachers"
@using SGA.Application.DTOs
@using SGA.BlazorClient.Services
@using SGA.BlazorClient.Shared
@inject ITeacherService TeacherService

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Listado de Docentes</h3>
    <div>
        <button class="btn btn-primary">
            <i class="bi bi-plus-circle me-1"></i> Nuevo Docente
        </button>
    </div>
</div>

@if (teachers == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else if (!teachers.Any())
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle me-2"></i>
        No hay docentes registrados.
    </div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Identificación</th>
                            <th>Nombre</th>
                            <th>Rango Actual</th>
                            <th>Puntaje Evaluación</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var teacher in teachers)
                        {
                            <tr>
                                <td>@teacher.Id</td>
                                <td>@teacher.IdentificationNumber</td>
                                <td>@teacher.FullName</td>
                                <td>
                                    <span class="badge bg-primary">@teacher.CurrentRank</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">                                        <div class="progress flex-grow-1 me-2" style="height: 8px;">
                                            <div class="progress-bar @GetScoreColorClass((double)teacher.EvaluationScore)" 
                                                role="progressbar" 
                                                style="width: @(teacher.EvaluationScore)%;" 
                                                aria-valuenow="@((double)teacher.EvaluationScore)" 
                                                aria-valuemin="0" 
                                                aria-valuemax="100">
                                            </div>
                                        </div>
                                        <span>@teacher.EvaluationScore%</span>
                                    </div>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="/teacher/@teacher.Id" class="btn btn-outline-info btn-sm">
                                            <i class="bi bi-eye me-1"></i> Detalles
                                        </a>
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => CheckEligibility(teacher.Id)">
                                            <i class="bi bi-check-square me-1"></i> Verificar Elegibilidad
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@if (eligibilityResult != null)
{
    <div class="mt-4">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="bi bi-clipboard-check me-2"></i>
                    Verificación de Elegibilidad
                </h5>
            </div>
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <div class="me-3">
                        @if (eligibilityResult.IsEligible)
                        {
                            <i class="bi bi-check-circle-fill text-success fs-1"></i>
                        }
                        else
                        {
                            <i class="bi bi-x-circle-fill text-danger fs-1"></i>
                        }
                    </div>
                    <div>
                        <h5 class="card-title mb-1">Docente: @selectedTeacher?.FullName</h5>
                        <p class="card-text @(eligibilityResult.IsEligible ? "text-success" : "text-danger")">
                            <strong>Estado:</strong> @(eligibilityResult.IsEligible ? "Elegible para Ascenso" : "No Elegible para Ascenso")
                        </p>
                    </div>
                </div>

                <div class="alert @(eligibilityResult.IsEligible ? "alert-success" : "alert-warning") mb-3">
                    @eligibilityResult.Message
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="small text-muted mb-1">Rango Actual</div>
                        <h5>@eligibilityResult.CurrentRank</h5>
                    </div>
                    <div class="col-md-6">
                        <div class="small text-muted mb-1">Rango Objetivo</div>
                        <h5>@eligibilityResult.TargetRank</h5>
                    </div>
                </div>
                
                <h6 class="mb-3">Requisitos:</h6>
                <div class="row">
                    @foreach (var requirement in eligibilityResult.RequirementsMet)
                    {
                        <div class="col-md-6 mb-3">
                            <div class="d-flex p-3 border rounded @(requirement.Value ? "border-success bg-success bg-opacity-10" : "border-danger bg-danger bg-opacity-10")">
                                <div class="me-3">
                                    @if (requirement.Value)
                                    {
                                        <i class="bi bi-check-circle-fill text-success fs-4"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-x-circle-fill text-danger fs-4"></i>
                                    }
                                </div>
                                <div>
                                    <div class="fw-bold @(requirement.Value ? "text-success" : "text-danger")">
                                        @GetRequirementName(requirement.Key)
                                    </div>
                                    <div class="small">
                                        @GetRequirementDescription(requirement.Key, requirement.Value)
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                @if (eligibilityResult.IsEligible)
                {
                    <div class="mt-3 text-center">
                        <button class="btn btn-success" @onclick="() => CreatePromotionRequest(selectedTeacherId)">
                            <i class="bi bi-arrow-up-circle me-1"></i> Crear Solicitud de Ascenso
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3 alert-dismissible fade show" role="alert">
        <i class="bi @(isSuccess ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage" aria-label="Close"></button>
    </div>
}

@code {
    private IEnumerable<TeacherDto>? teachers;
    private PromotionEligibilityResultDto? eligibilityResult;
    private TeacherDto? selectedTeacher;
    private int selectedTeacherId;
    private string message = string.Empty;
    private bool isSuccess;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeachers();
    }

    private async Task LoadTeachers()
    {
        try
        {
            teachers = await TeacherService.GetAllTeachersAsync();
        }
        catch (Exception ex)
        {
            message = $"Error al cargar docentes: {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task CheckEligibility(int teacherId)
    {
        try
        {
            selectedTeacherId = teacherId;
            selectedTeacher = teachers?.FirstOrDefault(t => t.Id == teacherId);
            eligibilityResult = await TeacherService.CheckEligibilityAsync(teacherId);
            message = string.Empty;
        }
        catch (Exception ex)
        {
            message = $"Error al verificar elegibilidad: {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task CreatePromotionRequest(int teacherId)
    {
        try
        {
            var result = await TeacherService.CreatePromotionRequestAsync(teacherId);
            message = "Solicitud de ascenso creada exitosamente.";
            isSuccess = true;
            
            // Recargar datos
            await LoadTeachers();
            eligibilityResult = null;
        }
        catch (Exception ex)
        {
            message = $"Error al crear solicitud: {ex.Message}";
            isSuccess = false;
        }
    }

    private void ClearMessage()
    {
        message = string.Empty;
        StateHasChanged();
    }

    private string GetRequirementName(string key)
    {
        return key switch
        {
            "YearsInCurrentRank" => "Tiempo en Rango Actual",
            "MinimumWorks" => "Obras Mínimas",
            "EvaluationScore" => "Puntaje de Evaluación",
            "TrainingHours" => "Horas de Capacitación",
            "ResearchTime" => "Tiempo en Investigación",
            _ => key
        };
    }

    private string GetRequirementDescription(string key, bool isMet)
    {
        if (eligibilityResult == null) return string.Empty;

        return key switch
        {
            "YearsInCurrentRank" => isMet 
                ? $"Cumple con los 4 años requeridos" 
                : "Se requieren 4 años en el rango actual",
            
            "MinimumWorks" => isMet 
                ? $"Cumple con las obras requeridas" 
                : $"No cumple con el mínimo de obras",
            
            "EvaluationScore" => isMet 
                ? "Puntaje suficiente (mínimo 75%)" 
                : "Se requiere un puntaje mínimo de 75%",
            
            "TrainingHours" => isMet 
                ? "Horas de capacitación completas" 
                : "Faltan horas de capacitación",
            
            "ResearchTime" => isMet 
                ? "Tiempo de investigación completo" 
                : "Tiempo de investigación insuficiente",
            
            _ => isMet ? "Requisito cumplido" : "Requisito no cumplido"
        };
    }

    private string GetScoreColorClass(double score)
    {
        return score switch
        {
            >= 90 => "bg-success",
            >= 75 => "bg-info",
            >= 60 => "bg-warning",
            _ => "bg-danger"
        };
    }
}
