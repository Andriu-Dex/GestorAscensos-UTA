// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGA.Infrastructure.Data;

#nullable disable

namespace SGA.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250706012427_AgregarTitulosAcademicos")]
    partial class AgregarTitulosAcademicos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SGA.Domain.Entities.ConfiguracionRequisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EstaActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorasCapacitacionMinimas")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NivelActual")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NivelSolicitado")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ObrasMinimas")
                        .HasColumnType("int");

                    b.Property<decimal>("PuntajeEvaluacionMinimo")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TiempoInvestigacionMinimo")
                        .HasColumnType("int");

                    b.Property<int>("TiempoMinimoMeses")
                        .HasColumnType("int");

                    b.Property<Guid?>("TituloActualId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TituloSolicitadoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EstaActivo");

                    b.HasIndex("NivelActual");

                    b.HasIndex("TituloActualId");

                    b.HasIndex("TituloSolicitadoId");

                    b.HasIndex("NivelActual", "NivelSolicitado");

                    b.HasIndex("TituloActualId", "TituloSolicitadoId");

                    b.ToTable("ConfiguracionesRequisitos", t =>
                        {
                            t.HasCheckConstraint("CK_ConfiguracionRequisito_TipoNivel", "(NivelActual IS NOT NULL AND TituloActualId IS NULL AND NivelSolicitado IS NOT NULL AND TituloSolicitadoId IS NULL) OR (NivelActual IS NULL AND TituloActualId IS NOT NULL AND NivelSolicitado IS NULL AND TituloSolicitadoId IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("SGA.Domain.Entities.Departamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<Guid>("FacultadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("FacultadId");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Docente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartamentoTTHH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("bit");

                    b.Property<string>("FacultadTTHH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioNivelActual")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaNombramiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUltimaImportacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUltimoAscenso")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FotoPerfil")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("HorasCapacitacion")
                        .HasColumnType("int");

                    b.Property<int?>("MesesInvestigacion")
                        .HasColumnType("int");

                    b.Property<string>("NivelActual")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("NumeroObrasAcademicas")
                        .HasColumnType("int");

                    b.Property<decimal?>("PromedioEvaluaciones")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Cedula")
                        .IsUnique();

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Docentes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ef569a9-342c-4e85-a8e1-29b5e697f2b6"),
                            Apellidos = "Global",
                            Cedula = "999999999",
                            Email = "admin@uta.edu.ec",
                            EstaActivo = true,
                            FechaCreacion = new DateTime(2025, 7, 6, 1, 24, 27, 235, DateTimeKind.Utc).AddTicks(7682),
                            FechaInicioNivelActual = new DateTime(2020, 7, 6, 1, 24, 27, 235, DateTimeKind.Utc).AddTicks(7254),
                            NivelActual = "Titular5",
                            Nombres = "Admin",
                            UsuarioId = new Guid("c24cd969-b99a-4354-b49f-0cae93b0b7ad")
                        },
                        new
                        {
                            Id = new Guid("6ba7b810-9dad-11d1-80b4-00c04fd430c8"),
                            Apellidos = "Paredes",
                            Cedula = "1801000000",
                            Email = "sparedes@uta.edu.ec",
                            EstaActivo = true,
                            FechaCreacion = new DateTime(2025, 7, 6, 1, 24, 27, 235, DateTimeKind.Utc).AddTicks(7697),
                            FechaInicioNivelActual = new DateTime(2023, 7, 6, 1, 24, 27, 235, DateTimeKind.Utc).AddTicks(7695),
                            NivelActual = "Titular1",
                            Nombres = "Steven",
                            UsuarioId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479")
                        });
                });

            modelBuilder.Entity("SGA.Domain.Entities.Documento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ContenidoArchivo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RutaArchivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("SolicitudAscensoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TamanoArchivo")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("SolicitudAscensoId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Facultad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("EsActiva")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("Facultades");
                });

            modelBuilder.Entity("SGA.Domain.Entities.LogAuditoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DireccionIP")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("EntidadAfectada")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FechaAccion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValoresAnteriores")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValoresNuevos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogsAuditoria");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Notificacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DatosAdicionales")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLeida")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Leida")
                        .HasColumnType("bit");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UrlAccion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FechaCreacion");

                    b.HasIndex("UsuarioId", "Leida");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("SGA.Domain.Entities.ObraAcademica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autores")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("ContenidoArchivoPDF")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DOI")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Editorial")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EsIndexada")
                        .HasColumnType("bit");

                    b.Property<bool>("EsVerificada")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ISBN_ISSN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IndiceIndexacion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreArchivo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OrigenDatos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Revista")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("TamanoArchivo")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoObra")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("DocenteId", "FechaPublicacion");

                    b.HasIndex("Titulo", "DocenteId")
                        .IsUnique();

                    b.ToTable("ObrasAcademicas");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudAscenso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AprobadoPorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaAprobacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorasCapacitacion")
                        .HasColumnType("int");

                    b.Property<int>("MesesInvestigacion")
                        .HasColumnType("int");

                    b.Property<string>("MotivoRechazo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NivelActual")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NivelSolicitado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroObrasAcademicas")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PromedioEvaluaciones")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TiempoEnNivelDias")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AprobadoPorId");

                    b.HasIndex("DocenteId");

                    b.ToTable("SolicitudesAscenso");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudCertificadoCapacitacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ArchivoContenido")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("ArchivoEstaComprimido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ArchivoNombre")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("ArchivoTamano")
                        .HasColumnType("bigint");

                    b.Property<long?>("ArchivoTamanoComprimido")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchivoTipo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AreaTematica")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ComentariosRevision")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ComentariosSolicitud")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DocenteCedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorasDuracion")
                        .HasColumnType("int");

                    b.Property<string>("InstitucionOfertante")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Modalidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MotivoRechazo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NombreCurso")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NumeroRegistro")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RevisadoPorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SolicitudGrupoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoCapacitacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DocenteCedula");

                    b.HasIndex("DocenteId");

                    b.HasIndex("Estado");

                    b.HasIndex("FechaFin");

                    b.HasIndex("FechaInicio");

                    b.HasIndex("RevisadoPorId");

                    b.HasIndex("SolicitudGrupoId");

                    b.ToTable("SolicitudesCertificadosCapacitacion");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudEvidenciaInvestigacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ArchivoContenido")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("ArchivoEstaComprimido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ArchivoNombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("ArchivoTamano")
                        .HasColumnType("bigint");

                    b.Property<long>("ArchivoTamanoComprimido")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchivoTipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AreaTematica")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CodigoProyecto")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ComentariosRevision")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ComentariosSolicitud")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DocenteCedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstitucionFinanciadora")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MesesDuracion")
                        .HasColumnType("int");

                    b.Property<string>("MotivoRechazo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RolInvestigador")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TipoEvidencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TituloProyecto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DocenteCedula");

                    b.HasIndex("DocenteId");

                    b.HasIndex("Estado");

                    b.HasIndex("FechaFin");

                    b.HasIndex("FechaInicio");

                    b.HasIndex("TipoEvidencia");

                    b.ToTable("SolicitudesEvidenciasInvestigacion");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudObraAcademica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ArchivoContenido")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ArchivoNombre")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ArchivoRuta")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("ArchivoTamano")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchivoTipo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Autores")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ComentariosRevision")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ComentariosSolicitud")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DOI")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DocenteCedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Editorial")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EsIndexada")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("datetime2");

                    b.Property<string>("ISBN_ISSN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IndiceIndexacion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MotivoRechazo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("RevisadoPorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Revista")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("SolicitudGrupoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoObra")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DocenteCedula");

                    b.HasIndex("DocenteId");

                    b.HasIndex("Estado");

                    b.HasIndex("RevisadoPorId");

                    b.HasIndex("SolicitudGrupoId");

                    b.ToTable("SolicitudesObrasAcademicas");
                });

            modelBuilder.Entity("SGA.Domain.Entities.TituloAcademico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EsTituloSistema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EstaActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("NivelEquivalente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrdenJerarquico")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("EsTituloSistema");

                    b.HasIndex("EstaActivo");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("OrdenJerarquico")
                        .IsUnique();

                    b.ToTable("TitulosAcademicos");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntentosLogin")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UltimoBloqueado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UltimoLogin")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c24cd969-b99a-4354-b49f-0cae93b0b7ad"),
                            Email = "admin@uta.edu.ec",
                            EstaActivo = true,
                            FechaCreacion = new DateTime(2025, 7, 6, 1, 24, 27, 57, DateTimeKind.Utc).AddTicks(3260),
                            IntentosLogin = 0,
                            PasswordHash = "$2a$11$rgF8tGHu4/l7oiruEkl0c.KiZN0uj9yXtBIbAxdyHuG9qyy4cL07W",
                            Rol = "Administrador",
                            UltimoLogin = new DateTime(2020, 7, 6, 1, 24, 27, 57, DateTimeKind.Utc).AddTicks(2959)
                        },
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Email = "sparedes@uta.edu.ec",
                            EstaActivo = true,
                            FechaCreacion = new DateTime(2025, 7, 6, 1, 24, 27, 234, DateTimeKind.Utc).AddTicks(8878),
                            IntentosLogin = 0,
                            PasswordHash = "$2a$11$sh6.erhDFnhfxunQlaFxb.7Bz2F5dYxmRzb5X2Wy3f0YQpbDKzio6",
                            Rol = "Docente",
                            UltimoLogin = new DateTime(2025, 6, 6, 1, 24, 27, 234, DateTimeKind.Utc).AddTicks(8653)
                        });
                });

            modelBuilder.Entity("SGA.Domain.Entities.ConfiguracionRequisito", b =>
                {
                    b.HasOne("SGA.Domain.Entities.TituloAcademico", "TituloActual")
                        .WithMany("ConfiguracionesComoActual")
                        .HasForeignKey("TituloActualId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SGA.Domain.Entities.TituloAcademico", "TituloSolicitado")
                        .WithMany("ConfiguracionesComoSolicitado")
                        .HasForeignKey("TituloSolicitadoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TituloActual");

                    b.Navigation("TituloSolicitado");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Departamento", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Facultad", "Facultad")
                        .WithMany("Departamentos")
                        .HasForeignKey("FacultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facultad");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Docente", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Departamento", "Departamento")
                        .WithMany("Docentes")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SGA.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Docente")
                        .HasForeignKey("SGA.Domain.Entities.Docente", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Documento", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SGA.Domain.Entities.SolicitudAscenso", "SolicitudAscenso")
                        .WithMany("Documentos")
                        .HasForeignKey("SolicitudAscensoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Docente");

                    b.Navigation("SolicitudAscenso");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Notificacion", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SGA.Domain.Entities.ObraAcademica", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Docente", "Docente")
                        .WithMany("ObrasAcademicas")
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Docente");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudAscenso", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Usuario", "AprobadoPor")
                        .WithMany()
                        .HasForeignKey("AprobadoPorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SGA.Domain.Entities.Docente", "Docente")
                        .WithMany("SolicitudesAscenso")
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AprobadoPor");

                    b.Navigation("Docente");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudCertificadoCapacitacion", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGA.Domain.Entities.Usuario", "RevisadoPor")
                        .WithMany()
                        .HasForeignKey("RevisadoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Docente");

                    b.Navigation("RevisadoPor");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudEvidenciaInvestigacion", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Docente");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudObraAcademica", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SGA.Domain.Entities.Usuario", "RevisadoPor")
                        .WithMany()
                        .HasForeignKey("RevisadoPorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Docente");

                    b.Navigation("RevisadoPor");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Docentes");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Docente", b =>
                {
                    b.Navigation("ObrasAcademicas");

                    b.Navigation("SolicitudesAscenso");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Facultad", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("SGA.Domain.Entities.SolicitudAscenso", b =>
                {
                    b.Navigation("Documentos");
                });

            modelBuilder.Entity("SGA.Domain.Entities.TituloAcademico", b =>
                {
                    b.Navigation("ConfiguracionesComoActual");

                    b.Navigation("ConfiguracionesComoSolicitado");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Docente");

                    b.Navigation("Notificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
