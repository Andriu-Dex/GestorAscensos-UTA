// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGA.Infrastructure.Data;

#nullable disable

namespace SGA.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250613003219_FixPendingChanges")]
    partial class FixPendingChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SGA.Domain.Entities.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DegreeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IssuingInstitution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("AcademicDegrees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DegreeType = "Maestría",
                            IssuingInstitution = "Universidad Técnica de Ambato",
                            TeacherId = 1,
                            Title = "Máster en Ciencias de la Computación"
                        },
                        new
                        {
                            Id = 2,
                            DegreeType = "Doctorado",
                            IssuingInstitution = "Universidad de Barcelona",
                            TeacherId = 2,
                            Title = "PhD en Ingeniería de Software"
                        },
                        new
                        {
                            Id = 3,
                            DegreeType = "Doctorado",
                            IssuingInstitution = "Universidad Politécnica de Madrid",
                            TeacherId = 3,
                            Title = "PhD en Ciencias de la Computación"
                        });
                });

            modelBuilder.Entity("SGA.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<string>("IssuingInstitution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RequirementId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SGA.Domain.Entities.DocumentObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("DocumentObservations");
                });

            modelBuilder.Entity("SGA.Domain.Entities.PromotionObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PromotionRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PromotionRequestId");

                    b.ToTable("PromotionObservations");
                });

            modelBuilder.Entity("SGA.Domain.Entities.PromotionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentRank")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TargetRank")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TeacherId");

                    b.ToTable("PromotionRequests");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MinimumEvaluationScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RequiredResearchMonths")
                        .HasColumnType("int");

                    b.Property<int>("RequiredTrainingHours")
                        .HasColumnType("int");

                    b.Property<int>("RequiredWorks")
                        .HasColumnType("int");

                    b.Property<int>("YearsInCurrentRank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Requirements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MinimumEvaluationScore = 80m,
                            Name = "Requisitos para Titular 2",
                            RequiredResearchMonths = 0,
                            RequiredTrainingHours = 100,
                            RequiredWorks = 1,
                            YearsInCurrentRank = 4
                        },
                        new
                        {
                            Id = 2,
                            MinimumEvaluationScore = 85m,
                            Name = "Requisitos para Titular 3",
                            RequiredResearchMonths = 12,
                            RequiredTrainingHours = 150,
                            RequiredWorks = 2,
                            YearsInCurrentRank = 4
                        },
                        new
                        {
                            Id = 3,
                            MinimumEvaluationScore = 85m,
                            Name = "Requisitos para Titular 4",
                            RequiredResearchMonths = 24,
                            RequiredTrainingHours = 200,
                            RequiredWorks = 3,
                            YearsInCurrentRank = 5
                        },
                        new
                        {
                            Id = 4,
                            MinimumEvaluationScore = 90m,
                            Name = "Requisitos para Titular 5",
                            RequiredResearchMonths = 36,
                            RequiredTrainingHours = 250,
                            RequiredWorks = 4,
                            YearsInCurrentRank = 5
                        });
                });

            modelBuilder.Entity("SGA.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentRank")
                        .HasColumnType("int");

                    b.Property<int>("DaysInCurrentRank")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("EvaluationScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ResearchMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateInCurrentRank")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainingHours")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Works")
                        .HasColumnType("int");

                    b.Property<int>("YearsInCurrentRank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentRank = 1,
                            DaysInCurrentRank = 1440,
                            Email = "juan.perez@uta.edu.ec",
                            EvaluationScore = 85m,
                            FirstName = "Juan",
                            IdentificationNumber = "0123456789",
                            LastName = "Pérez",
                            Password = "Contraseña123",
                            ResearchMonths = 0,
                            StartDateInCurrentRank = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingHours = 100,
                            UserTypeId = 2,
                            Works = 1,
                            YearsInCurrentRank = 4
                        },
                        new
                        {
                            Id = 2,
                            CurrentRank = 2,
                            DaysInCurrentRank = 1800,
                            Email = "maria.gomez@uta.edu.ec",
                            EvaluationScore = 90m,
                            FirstName = "María",
                            IdentificationNumber = "9876543210",
                            LastName = "Gómez",
                            Password = "Contraseña456",
                            ResearchMonths = 18,
                            StartDateInCurrentRank = new DateTime(2019, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingHours = 120,
                            UserTypeId = 2,
                            Works = 2,
                            YearsInCurrentRank = 5
                        },
                        new
                        {
                            Id = 3,
                            CurrentRank = 5,
                            DaysInCurrentRank = 3000,
                            Email = "carlos.rodriguez@uta.edu.ec",
                            EvaluationScore = 95m,
                            FirstName = "Carlos",
                            IdentificationNumber = "1122334455",
                            LastName = "Rodríguez",
                            Password = "Contraseña789",
                            ResearchMonths = 60,
                            StartDateInCurrentRank = new DateTime(2015, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingHours = 500,
                            UserTypeId = 3,
                            Works = 10,
                            YearsInCurrentRank = 8
                        });
                });

            modelBuilder.Entity("SGA.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasFilter("[TeacherId] IS NOT NULL");

                    b.HasIndex("UserTypeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@uta.edu.ec",
                            FailedLoginAttempts = 0,
                            IsActive = true,
                            PasswordHash = "$2a$11$mRI2S8DXP3oWwRo5i.SSRuSRKVTQlSFWJZK.jRsrL6Ex38PAHgzNC",
                            UserTypeId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("SGA.Domain.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Usuario con acceso total al sistema",
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Docente que puede solicitar ascensos",
                            Name = "Docente"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Usuario que evalúa las solicitudes de ascenso",
                            Name = "Evaluador"
                        });
                });

            modelBuilder.Entity("SGA.Domain.Entities.AcademicDegree", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Teacher", "Teacher")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Document", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Requirement", "Requirement")
                        .WithMany("Documents")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SGA.Domain.Entities.Teacher", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SGA.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Documents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Requirement");

                    b.Navigation("Reviewer");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SGA.Domain.Entities.DocumentObservation", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Document", "Document")
                        .WithMany("Observations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGA.Domain.Entities.Teacher", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("SGA.Domain.Entities.PromotionObservation", b =>
                {
                    b.HasOne("SGA.Domain.Entities.PromotionRequest", "PromotionRequest")
                        .WithMany("Observations")
                        .HasForeignKey("PromotionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionRequest");
                });

            modelBuilder.Entity("SGA.Domain.Entities.PromotionRequest", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SGA.Domain.Entities.Teacher", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SGA.Domain.Entities.Teacher", "Teacher")
                        .WithMany("PromotionRequests")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Reviewer");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("SGA.Domain.Entities.UserType", "UserType")
                        .WithMany("Teachers")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("SGA.Domain.Entities.User", b =>
                {
                    b.HasOne("SGA.Domain.Entities.Teacher", "Teacher")
                        .WithOne()
                        .HasForeignKey("SGA.Domain.Entities.User", "TeacherId");

                    b.HasOne("SGA.Domain.Entities.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Document", b =>
                {
                    b.Navigation("Observations");
                });

            modelBuilder.Entity("SGA.Domain.Entities.PromotionRequest", b =>
                {
                    b.Navigation("Observations");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Requirement", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("SGA.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("AcademicDegrees");

                    b.Navigation("Documents");

                    b.Navigation("PromotionRequests");
                });

            modelBuilder.Entity("SGA.Domain.Entities.UserType", b =>
                {
                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
