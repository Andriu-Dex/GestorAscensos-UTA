@page "/admin/certificados-capacitacion"
@attribute [Authorize(Roles = "Administrador")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using Blazored.Toast.Services
@using System.Net.Http.Json
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject ILogger<AdminCertificadosCapacitacion> Logger

<style>
    .modal-backdrop {
        z-index: 1040;
    }
    
    .modal {
        z-index: 1050;
    }
    
    .pdf-viewer-container {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
</style>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3>
                    <i class="bi bi-award"></i> 
                    Panel de Administración - Certificados de Capacitación
                </h3>
                <div class="btn-group" role="group">
                    <button type="button" class="btn @(filtroEstado == "Pendiente" ? "btn-primary" : "btn-outline-primary")" 
                            @onclick="FiltrarPendientes">
                        <i class="bi bi-hourglass-split"></i> Pendientes (@cantidadPendientes)
                    </button>
                    <button type="button" class="btn @(filtroEstado == "Aprobada" ? "btn-success" : "btn-outline-success")" 
                            @onclick="FiltrarAprobadas">
                        <i class="bi bi-check-circle"></i> Aprobadas (@cantidadAprobadas)
                    </button>
                    <button type="button" class="btn @(filtroEstado == "Rechazada" ? "btn-danger" : "btn-outline-danger")" 
                            @onclick="FiltrarRechazadas">
                        <i class="bi bi-x-circle"></i> Rechazadas (@cantidadRechazadas)
                    </button>
                    <button type="button" class="btn @(filtroEstado == "Todas" ? "btn-info" : "btn-outline-info")" 
                            @onclick="FiltrarTodas">
                        <i class="bi bi-list"></i> Todas (@totalSolicitudes)
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando solicitudes...</span>
            </div>
        </div>
    }
    else if (solicitudesFiltradas == null || !solicitudesFiltradas.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            <i class="bi bi-info-circle fs-1"></i>
            <h4 class="mt-3">No hay solicitudes @(filtroEstado.ToLower())</h4>
            <p class="mb-0">No se encontraron solicitudes de certificados de capacitación con el filtro seleccionado.</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var solicitud in solicitudesFiltradas)
            {
                <div class="col-12 col-lg-6 col-xl-4 mb-4">
                    <div class="card h-100 shadow-sm @GetCardClass(solicitud.Estado)">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0 fw-bold">@solicitud.DocenteCedula</h6>
                            <span class="badge @GetBadgeClass(solicitud.Estado)">
                                @solicitud.Estado
                            </span>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-truncate" title="@solicitud.NombreCurso">
                                @solicitud.NombreCurso
                            </h5>
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-building"></i> @solicitud.InstitucionOfertante
                                </small>
                            </div>
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-calendar"></i> @solicitud.FechaInicio.ToString("dd/MM/yyyy") - @solicitud.FechaFin.ToString("dd/MM/yyyy")
                                </small>
                            </div>
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-clock"></i> @solicitud.HorasDuracion horas
                                </small>
                            </div>
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-tag"></i> @solicitud.TipoCapacitacion
                                </small>
                            </div>
                            @if (!string.IsNullOrEmpty(solicitud.Modalidad))
                            {
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="bi bi-laptop"></i> @solicitud.Modalidad
                                    </small>
                                </div>
                            }
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-calendar-event"></i> Solicitado: @solicitud.FechaCreacion.ToString("dd/MM/yyyy HH:mm")
                                </small>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-outline-info btn-sm flex-fill" 
                                        @onclick="() => VerDetalle(solicitud)">
                                    <i class="bi bi-eye"></i> Ver
                                </button>
                                @if (!string.IsNullOrEmpty(solicitud.ArchivoNombre))
                                {
                                    <button type="button" class="btn btn-outline-secondary btn-sm" 
                                            @onclick="() => DescargarArchivo(solicitud)"
                                            title="Descargar certificado">
                                        <i class="bi bi-download"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-primary btn-sm" 
                                            @onclick="() => VisualizarArchivo(solicitud)"
                                            title="Visualizar certificado">
                                        <i class="bi bi-file-earmark-pdf"></i>
                                    </button>
                                }
                                @if (solicitud.Estado == "Pendiente")
                                {
                                    <button type="button" class="btn btn-success btn-sm" 
                                            @onclick="() => AprobarSolicitud(solicitud)"
                                            title="Aprobar">
                                        <i class="bi bi-check"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger btn-sm" 
                                            @onclick="() => RechazarSolicitud(solicitud)"
                                            title="Rechazar">
                                        <i class="bi bi-x"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Modal de Detalle de Solicitud -->
@if (showDetalleModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-award"></i> Detalle del Certificado de Capacitación
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarDetalleModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Docente:</strong> @solicitudSeleccionada.DocenteCedula
                        </div>
                        <div class="col-md-6">
                            <span class="badge @GetBadgeClass(solicitudSeleccionada.Estado)">
                                @solicitudSeleccionada.Estado
                            </span>
                        </div>
                    </div>
                    <hr />
                    <div class="row mb-3">
                        <div class="col-12">
                            <strong>Nombre del Curso:</strong>
                            <p>@solicitudSeleccionada.NombreCurso</p>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <strong>Institución Oferente:</strong>
                            <p>@solicitudSeleccionada.InstitucionOfertante</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Tipo de Capacitación:</strong>
                            <p>@solicitudSeleccionada.TipoCapacitacion</p>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <strong>Fecha de Inicio:</strong>
                            <p>@solicitudSeleccionada.FechaInicio.ToString("dd/MM/yyyy")</p>
                        </div>
                        <div class="col-md-4">
                            <strong>Fecha de Fin:</strong>
                            <p>@solicitudSeleccionada.FechaFin.ToString("dd/MM/yyyy")</p>
                        </div>
                        <div class="col-md-4">
                            <strong>Duración:</strong>
                            <p>@solicitudSeleccionada.HorasDuracion horas</p>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.Modalidad))
                    {
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <strong>Modalidad:</strong>
                                <p>@solicitudSeleccionada.Modalidad</p>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.NumeroRegistro))
                    {
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <strong>Número de Registro:</strong>
                                <p>@solicitudSeleccionada.NumeroRegistro</p>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.AreaTematica))
                    {
                        <div class="row mb-3">
                            <div class="col-12">
                                <strong>Área Temática:</strong>
                                <p>@solicitudSeleccionada.AreaTematica</p>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.Descripcion))
                    {
                        <div class="row mb-3">
                            <div class="col-12">
                                <strong>Descripción:</strong>
                                <p>@solicitudSeleccionada.Descripcion</p>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.ComentariosSolicitud))
                    {
                        <div class="row mb-3">
                            <div class="col-12">
                                <strong>Comentarios de la Solicitud:</strong>
                                <p class="bg-light p-2 rounded">@solicitudSeleccionada.ComentariosSolicitud</p>
                            </div>
                        </div>
                    }
                    @if (solicitudSeleccionada.Estado == "Rechazada" && !string.IsNullOrEmpty(solicitudSeleccionada.MotivoRechazo))
                    {
                        <div class="row mb-3">
                            <div class="col-12">
                                <strong>Motivo de Rechazo:</strong>
                                <p class="bg-danger bg-opacity-10 p-2 rounded border border-danger">@solicitudSeleccionada.MotivoRechazo</p>
                            </div>
                        </div>
                    }
                    @if (solicitudSeleccionada.Estado == "Aprobada" && !string.IsNullOrEmpty(solicitudSeleccionada.ComentariosRevision))
                    {
                        <div class="row mb-3">
                            <div class="col-12">
                                <strong>Comentarios de Aprobación:</strong>
                                <p class="bg-success bg-opacity-10 p-2 rounded border border-success">@solicitudSeleccionada.ComentariosRevision</p>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.ArchivoNombre))
                    {
                        <div class="row mb-3">
                            <div class="col-12">
                                <strong>Archivo Adjunto:</strong>
                                <div class="d-flex align-items-center gap-2">
                                    <i class="bi bi-file-earmark-pdf text-danger"></i>
                                    @solicitudSeleccionada.ArchivoNombre
                                    <button type="button" class="btn btn-sm btn-outline-primary" 
                                            @onclick="() => DescargarArchivo(solicitudSeleccionada)">
                                        <i class="bi bi-download"></i> Descargar
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    @if (solicitudSeleccionada.Estado == "Pendiente")
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>Acción Requerida:</strong> Esta solicitud está pendiente de revisión.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    @if (solicitudSeleccionada.Estado == "Pendiente")
                    {
                        <button type="button" class="btn btn-success" @onclick="() => AprobarSolicitud(solicitudSeleccionada)">
                            <i class="bi bi-check-circle"></i> Aprobar
                        </button>
                        <button type="button" class="btn btn-danger" @onclick="() => RechazarSolicitud(solicitudSeleccionada)">
                            <i class="bi bi-x-circle"></i> Rechazar
                        </button>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="CerrarDetalleModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Rechazo -->
@if (showRechazoModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">
                        <i class="bi bi-x-circle"></i> Rechazar Certificado
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarRechazoModal"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Certificado:</strong> @solicitudSeleccionada.NombreCurso</p>
                    <p><strong>Docente:</strong> @solicitudSeleccionada.DocenteCedula</p>
                    <div class="mb-3">
                        <label for="motivoRechazo" class="form-label">
                            <strong>Motivo del rechazo:</strong> <span class="text-danger">*</span>
                        </label>
                        <textarea class="form-control" id="motivoRechazo" rows="4" 
                                  @bind="motivoRechazo" 
                                  placeholder="Ingrese el motivo por el cual rechaza esta solicitud de certificado..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarRechazo" disabled="@string.IsNullOrWhiteSpace(motivoRechazo)">
                        <i class="bi bi-x-circle"></i> Confirmar Rechazo
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CerrarRechazoModal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Visualización de PDF -->
@if (showPDFModal && !string.IsNullOrEmpty(pdfUrl))
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-file-earmark-pdf me-2"></i>
                        Visualizar Certificado - @(pdfNombreArchivo ?? "Documento")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalPDF" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body p-0">
                    @if (isLoadingPDF)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="height: 500px;">
                            <div class="text-center">
                                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                    <span class="visually-hidden">Cargando PDF...</span>
                                </div>
                                <p class="mt-3">Cargando certificado...</p>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorPDF))
                    {
                        <div class="alert alert-danger m-3" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <strong>Error al cargar PDF:</strong> @errorPDF
                        </div>
                    }
                    else
                    {
                        <div class="pdf-viewer-container">
                            <iframe src="@pdfUrl" style="width: 100%; height: 600px; border: none;" frameborder="0"></iframe>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalPDF">
                        <i class="bi bi-x-circle me-2"></i>Cerrar
                    </button>
                    @if (!string.IsNullOrEmpty(pdfUrl) && !isLoadingPDF && solicitudParaPDF != null)
                    {
                        <button type="button" class="btn btn-primary" @onclick="() => DescargarArchivo(solicitudParaPDF)">
                            <i class="bi bi-download me-2"></i>Descargar PDF
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<SolicitudCertificadoCapacitacionAdminDto>? solicitudes;
    private List<SolicitudCertificadoCapacitacionAdminDto>? solicitudesFiltradas;
    private bool isLoading = true;
    private string filtroEstado = "Pendiente";
    
    private int cantidadPendientes = 0;
    private int cantidadAprobadas = 0;
    private int cantidadRechazadas = 0;
    private int totalSolicitudes = 0;
    
    private bool showDetalleModal = false;
    private bool showRechazoModal = false;
    private bool showPDFModal = false;
    private SolicitudCertificadoCapacitacionAdminDto? solicitudSeleccionada;
    private SolicitudCertificadoCapacitacionAdminDto? solicitudParaPDF;
    private string motivoRechazo = string.Empty;
    
    // Variables para modal de PDF
    private bool isLoadingPDF = false;
    private string? errorPDF = null;
    private string? pdfUrl = null;
    private string? pdfNombreArchivo = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarSolicitudes();
    }

    private async Task CargarSolicitudes()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetFromJsonAsync<ResponseSolicitudesCertificadosAdminDto>("api/certificados-capacitacion/admin/todas-solicitudes");
            
            if (response != null && response.Exitoso)
            {
                solicitudes = response.Solicitudes;
                CalcularContadores();
                FiltrarSolicitudes();
            }
            else
            {
                ToastService.ShowError(response?.Mensaje ?? "Error al cargar las solicitudes");
                solicitudes = new List<SolicitudCertificadoCapacitacionAdminDto>();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar solicitudes: {ex.Message}");
            solicitudes = new List<SolicitudCertificadoCapacitacionAdminDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalcularContadores()
    {
        if (solicitudes == null) return;
        
        cantidadPendientes = solicitudes.Count(s => s.Estado == "Pendiente");
        cantidadAprobadas = solicitudes.Count(s => s.Estado == "Aprobada");
        cantidadRechazadas = solicitudes.Count(s => s.Estado == "Rechazada");
        totalSolicitudes = solicitudes.Count;
    }

    private void FiltrarSolicitudes()
    {
        if (solicitudes == null)
        {
            solicitudesFiltradas = new List<SolicitudCertificadoCapacitacionAdminDto>();
            return;
        }

        solicitudesFiltradas = filtroEstado switch
        {
            "Pendiente" => solicitudes.Where(s => s.Estado == "Pendiente").OrderBy(s => s.FechaCreacion).ToList(),
            "Aprobada" => solicitudes.Where(s => s.Estado == "Aprobada").OrderByDescending(s => s.FechaRevision).ToList(),
            "Rechazada" => solicitudes.Where(s => s.Estado == "Rechazada").OrderByDescending(s => s.FechaRevision).ToList(),
            _ => solicitudes.OrderByDescending(s => s.FechaCreacion).ToList()
        };
    }

    private void FiltrarPendientes()
    {
        filtroEstado = "Pendiente";
        FiltrarSolicitudes();
    }

    private void FiltrarAprobadas()
    {
        filtroEstado = "Aprobada";
        FiltrarSolicitudes();
    }

    private void FiltrarRechazadas()
    {
        filtroEstado = "Rechazada";
        FiltrarSolicitudes();
    }

    private void FiltrarTodas()
    {
        filtroEstado = "Todas";
        FiltrarSolicitudes();
    }

    private void VerDetalle(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        showDetalleModal = true;
    }

    private void CerrarDetalleModal()
    {
        showDetalleModal = false;
        solicitudSeleccionada = null;
    }

    private async Task AprobarSolicitud(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        try
        {
            var request = new RevisionSolicitudCertificadoDto
            {
                SolicitudId = solicitud.Id,
                Accion = "Aprobar",
                Comentarios = "Certificado aprobado"
            };

            var response = await Http.PostAsJsonAsync($"api/certificados-capacitacion/admin/revisar/{solicitud.Id}", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoCertificadoDto>();
                if (result != null && result.Exitoso)
                {
                    ToastService.ShowSuccess("Certificado aprobado exitosamente");
                    await CargarSolicitudes();
                    CerrarDetalleModal();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al aprobar el certificado");
                }
            }
            else
            {
                ToastService.ShowError("Error al comunicarse con el servidor");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al aprobar certificado: {ex.Message}");
        }
    }

    private void RechazarSolicitud(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        motivoRechazo = string.Empty;
        showRechazoModal = true;
        CerrarDetalleModal();
    }

    private void CerrarRechazoModal()
    {
        showRechazoModal = false;
        solicitudSeleccionada = null;
        motivoRechazo = string.Empty;
    }

    private async Task ConfirmarRechazo()
    {
        if (string.IsNullOrWhiteSpace(motivoRechazo) || solicitudSeleccionada == null)
            return;

        try
        {
            var request = new RevisionSolicitudCertificadoDto
            {
                SolicitudId = solicitudSeleccionada.Id,
                Accion = "Rechazar",
                Comentarios = motivoRechazo.Trim()
            };

            var response = await Http.PostAsJsonAsync($"api/certificados-capacitacion/admin/revisar/{solicitudSeleccionada.Id}", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoCertificadoDto>();
                if (result != null && result.Exitoso)
                {
                    ToastService.ShowSuccess("Certificado rechazado");
                    await CargarSolicitudes();
                    CerrarRechazoModal();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al rechazar el certificado");
                }
            }
            else
            {
                ToastService.ShowError("Error al comunicarse con el servidor");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al rechazar certificado: {ex.Message}");
        }
    }

    private async Task DescargarArchivo(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        try
        {
            var response = await Http.GetAsync($"api/certificados-capacitacion/admin/descargar/{solicitud.Id}");
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = solicitud.ArchivoNombre ?? $"certificado_{solicitud.NombreCurso.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd}.pdf";
                
                await JSRuntime.InvokeVoidAsync("downloadFile", Convert.ToBase64String(fileBytes), fileName, "application/pdf");
                ToastService.ShowSuccess("Archivo descargado correctamente");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("Error al descargar archivo. Status: {StatusCode}, Content: {Content}", response.StatusCode, errorContent);
                ToastService.ShowError($"Error al descargar el archivo: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al descargar archivo para solicitud {SolicitudId}", solicitud.Id);
            ToastService.ShowError($"Error al descargar archivo: {ex.Message}");
        }
    }

    private async Task VisualizarArchivo(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        try
        {
            isLoadingPDF = true;
            errorPDF = null;
            showPDFModal = true;
            solicitudParaPDF = solicitud;
            
            // Configurar información del PDF
            pdfNombreArchivo = solicitud.ArchivoNombre ?? $"Certificado_{solicitud.NombreCurso}";
            
            StateHasChanged();

            // Crear URL para visualización del PDF
            pdfUrl = $"api/certificados-capacitacion/admin/ver/{solicitud.Id}";
            
            // Pequeña pausa para permitir que el iframe se configure
            await Task.Delay(500);
        }
        catch (Exception ex)
        {
            errorPDF = $"Error al cargar PDF: {ex.Message}";
            Logger.LogError(ex, "Error al visualizar archivo para solicitud {SolicitudId}", solicitud.Id);
        }
        finally
        {
            isLoadingPDF = false;
            StateHasChanged();
        }
    }

    private void CerrarModalPDF()
    {
        showPDFModal = false;
        pdfUrl = null;
        pdfNombreArchivo = null;
        errorPDF = null;
        isLoadingPDF = false;
        solicitudParaPDF = null;
    }

    private string GetCardClass(string estado)
    {
        return estado switch
        {
            "Pendiente" => "border-warning",
            "Aprobada" => "border-success",
            "Rechazada" => "border-danger",
            _ => "border-secondary"
        };
    }

    private string GetBadgeClass(string estado)
    {
        return estado switch
        {
            "Pendiente" => "bg-warning text-dark",
            "Aprobada" => "bg-success",
            "Rechazada" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    // DTOs locales para esta página
    public class SolicitudCertificadoCapacitacionAdminDto
    {
        public Guid Id { get; set; }
        public Guid SolicitudGrupoId { get; set; }
        public string DocenteCedula { get; set; } = string.Empty;
        public string DocenteNombre { get; set; } = string.Empty;
        public string NombreCurso { get; set; } = string.Empty;
        public string InstitucionOfertante { get; set; } = string.Empty;
        public string TipoCapacitacion { get; set; } = string.Empty;
        public DateTime FechaInicio { get; set; }
        public DateTime FechaFin { get; set; }
        public int HorasDuracion { get; set; }
        public string? Modalidad { get; set; }
        public string? NumeroRegistro { get; set; }
        public string? AreaTematica { get; set; }
        public string? Descripcion { get; set; }
        public string? ArchivoNombre { get; set; }
        public string Estado { get; set; } = string.Empty;
        public string? ComentariosRevision { get; set; }
        public string? MotivoRechazo { get; set; }
        public string? ComentariosSolicitud { get; set; }
        public DateTime FechaCreacion { get; set; }
        public DateTime? FechaRevision { get; set; }
    }

    public class ResponseSolicitudesCertificadosAdminDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
        public List<SolicitudCertificadoCapacitacionAdminDto> Solicitudes { get; set; } = new();
        public int TotalSolicitudes { get; set; }
    }

    public class RevisionSolicitudCertificadoDto
    {
        public Guid SolicitudId { get; set; }
        public string Accion { get; set; } = string.Empty; // "Aprobar" o "Rechazar"
        public string Comentarios { get; set; } = string.Empty;
    }

    public class ResponseGenericoCertificadoDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
    }
}
