@page "/admin/certificados-capacitacion"
@attribute [Authorize(Roles = "Administrador")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using Blazored.Toast.Services
@using System.Net.Http.Json
@using SGA.Web.Services
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject ILogger<AdminCertificadosCapacitacion> Logger
@inject IApiUrlService ApiUrlService

<div class="container-fluid mt-4">
    <!-- Encabezado de página mejorado -->
    <div class="page-header">
        <div class="d-flex justify-content-between align-items-center flex-wrap">
            <h3>
                <i class="bi bi-award me-2"></i>
                Panel de Administración - Certificados de Capacitación
            </h3>
            <div class="btn-group filter-buttons" role="group">
                <button type="button" class="btn @(filtroEstado == "Pendiente" ? "btn-light" : "btn-outline-light")" 
                        @onclick="FiltrarPendientes" title="Ver solicitudes pendientes de revisión">
                    <i class="bi bi-hourglass-split me-1"></i>Pendientes (@cantidadPendientes)
                </button>
                <button type="button" class="btn @(filtroEstado == "Aprobada" ? "btn-light" : "btn-outline-light")" 
                        @onclick="FiltrarAprobadas" title="Ver solicitudes aprobadas">
                    <i class="bi bi-check-circle me-1"></i>Aprobadas (@cantidadAprobadas)
                </button>
                <button type="button" class="btn @(filtroEstado == "Rechazada" ? "btn-light" : "btn-outline-light")" 
                        @onclick="FiltrarRechazadas" title="Ver solicitudes rechazadas">
                    <i class="bi bi-x-circle me-1"></i>Rechazadas (@cantidadRechazadas)
                </button>
                <button type="button" class="btn @(filtroEstado == "Todas" ? "btn-light" : "btn-outline-light")" 
                        @onclick="FiltrarTodas" title="Ver todas las solicitudes">
                    <i class="bi bi-list me-1"></i>Todas (@totalSolicitudes)
                </button>
            </div>
        </div>
    </div>

    <!-- Sección de filtros mejorada -->
    <div class="filters-section">
        <h5 class="filters-title">
            <i class="bi bi-funnel me-2"></i>Filtros de Búsqueda
        </h5>
        <div class="row">
            <div class="col-md-4 mb-3">
                <div class="form-floating">
                    <input type="text" class="form-control" id="filtroCedula" placeholder="Ej: 1801000000" 
                           @bind="filtroCedula" @bind:after="AplicarFiltros" 
                           title="Buscar por número de cédula del docente">
                    <label for="filtroCedula">
                        <i class="bi bi-person-badge me-1"></i>Cédula del Docente
                    </label>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="form-floating">
                    <input type="text" class="form-control" id="filtroCurso" placeholder="Ej: Capacitación JAVA" 
                           @bind="filtroCurso" @bind:after="AplicarFiltros"
                           title="Buscar por nombre o título del curso de capacitación">
                    <label for="filtroCurso">
                        <i class="bi bi-book me-1"></i>Nombre del Curso
                    </label>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="form-floating">
                    <select class="form-select" id="filtroTipo" @bind="filtroTipo" @bind:after="AplicarFiltros"
                            title="Filtrar por tipo específico de capacitación">
                        <option value="">Todos los tipos</option>
                        @if (tiposCapacitacion != null)
                        {
                            @foreach (var tipo in tiposCapacitacion)
                            {
                                <option value="@tipo">@tipo</option>
                            }
                        }
                    </select>
                    <label for="filtroTipo">
                        <i class="bi bi-tags me-1"></i>Tipo de Capacitación
                    </label>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="text-center">
                <div class="spinner-border spinner-custom" role="status">
                    <span class="visually-hidden">Cargando solicitudes...</span>
                </div>
                <p class="mt-3 text-custom">Cargando solicitudes de certificados...</p>
            </div>
        </div>
    }
    else if (solicitudesFiltradas == null || !solicitudesFiltradas.Any())
    {
        <div class="empty-state fade-in">
            <div class="text-center">
                <i class="bi bi-search fs-1 text-custom mb-3"></i>
                <h4 class="text-custom">No hay solicitudes @(filtroEstado.ToLower())</h4>
                <p class="text-muted mb-0">
                    No se encontraron solicitudes de certificados de capacitación con los filtros seleccionados.
                </p>
                @if (filtroEstado != "Todas" || !string.IsNullOrEmpty(filtroCedula) || !string.IsNullOrEmpty(filtroCurso) || !string.IsNullOrEmpty(filtroTipo))
                {
                    <div class="container-limpiar-filtros">
                        <button class="btn btn-outline-primary" @onclick="LimpiarFiltros"
                                title="Limpiar todos los filtros aplicados">
                            <i class="bi bi-arrow-counterclockwise me-2"></i>Limpiar Filtros
                        </button>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="table-responsive fade-in">
            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th title="Cédula del docente solicitante">
                            <i class="bi bi-person-badge me-1"></i>Docente
                        </th>
                        <th title="Nombre del curso de capacitación">
                            <i class="bi bi-book me-1"></i>Curso
                        </th>
                        <th title="Tipo de capacitación">
                            <i class="bi bi-tags me-1"></i>Tipo
                        </th>
                        <th title="Institución que ofrece la capacitación">
                            <i class="bi bi-building me-1"></i>Institución
                        </th>
                        <th title="Duración en horas académicas">
                            <i class="bi bi-clock me-1"></i>Duración
                        </th>
                        <th title="Fechas de inicio y finalización">
                            <i class="bi bi-calendar-range me-1"></i>Fechas
                        </th>
                        <th title="Estado actual de la solicitud">
                            <i class="bi bi-flag me-1"></i>Estado
                        </th>
                        <th title="Acciones disponibles">
                            <i class="bi bi-gear me-1"></i>Acciones
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var solicitud in solicitudesFiltradas)
                    {
                        <tr>
                            <td>
                                <strong>@solicitud.DocenteCedula</strong>
                                @if (!string.IsNullOrEmpty(solicitud.DocenteNombre))
                                {
                                    <br><small class="text-muted">@solicitud.DocenteNombre</small>
                                }
                            </td>
                            <td>
                                <span class="truncate-long" title="@solicitud.NombreCurso">
                                    @solicitud.NombreCurso
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-light text-dark">@solicitud.TipoCapacitacion</span>
                            </td>
                            <td>
                                <span class="truncate" title="@solicitud.InstitucionOfertante">
                                    @solicitud.InstitucionOfertante
                                </span>
                            </td>
                            <td class="text-center">
                                <strong>@solicitud.HorasDuracion</strong> hrs
                            </td>
                            <td>
                                <small>
                                    <div><strong>Inicio:</strong> @solicitud.FechaInicio.ToString("dd/MM/yyyy")</div>
                                    <div><strong>Fin:</strong> @solicitud.FechaFin.ToString("dd/MM/yyyy")</div>
                                </small>
                            </td>
                            <td class="text-center">
                                <span class="badge @GetBadgeClass(solicitud.Estado)">
                                    @solicitud.Estado
                                </span>
                                @if (solicitud.Estado != "Pendiente" && solicitud.FechaRevision.HasValue)
                                {
                                    <div class="mt-1">
                                        <small class="text-muted">@solicitud.FechaRevision.Value.ToString("dd/MM/yyyy")</small>
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="actions-container">
                                    <button class="btn btn-sm btn-outline-primary btn-action" 
                                            @onclick="() => VerDetalle(solicitud)" 
                                            title="Ver información detallada de la solicitud">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    
                                    @if (!string.IsNullOrEmpty(solicitud.ArchivoNombre))
                                    {
                                        <button class="btn btn-sm btn-outline-secondary btn-action" 
                                                @onclick="() => VisualizarArchivo(solicitud)" 
                                                title="Visualizar certificado en formato PDF">
                                            <i class="bi bi-file-earmark-pdf"></i>
                                        </button>
                                        
                                        <button class="btn btn-sm btn-outline-info btn-action" 
                                                @onclick="() => DescargarArchivo(solicitud)" 
                                                title="Descargar archivo del certificado">
                                            <i class="bi bi-download"></i>
                                        </button>
                                    }
                                    
                                    @if (solicitud.Estado == "Pendiente")
                                    {
                                        <button class="btn btn-sm btn-success btn-action" 
                                                @onclick="() => AprobarSolicitud(solicitud)" 
                                                title="Aprobar solicitud de certificado">
                                            <i class="bi bi-check-lg"></i>
                                        </button>
                                        
                                        <button class="btn btn-sm btn-danger btn-action" 
                                                @onclick="() => RechazarSolicitud(solicitud)" 
                                                title="Rechazar solicitud de certificado">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal de Detalle de Solicitud -->
@if (showDetalleModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header modal-header-custom">
                    <h5 class="modal-title">
                        <i class="bi bi-award me-2"></i>
                        Detalle del Certificado de Capacitación
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarDetalleModal" 
                            title="Cerrar ventana de detalles"></button>
                </div>
                <div class="modal-body modal-body-detail">
                    <!-- Encabezado del Reporte -->
                    <div class="detail-report-header">
                        <div class="detail-report-title">
                            <i class="bi bi-award me-2"></i>Reporte de Certificado de Capacitación
                        </div>
                        <div class="detail-report-subtitle">
                            Solicitud ID: @solicitudSeleccionada.Id.ToString()[..8]... | Fecha de Solicitud: @solicitudSeleccionada.FechaCreacion.ToString("dd/MM/yyyy HH:mm")
                        </div>
                    </div>

                    <!-- Información General Consolidada -->
                    <div class="detail-report-content">
                        <div class="detail-info-grid">
                            <!-- Información del Docente -->
                            <div class="detail-info-item">
                                <div class="detail-info-label">
                                    <i class="bi bi-person-badge me-2"></i>Docente
                                </div>
                                <div class="detail-info-value large">
                                    <strong>@solicitudSeleccionada.DocenteCedula</strong>
                                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.DocenteNombre))
                                    {
                                        <br><span class="text-muted">@solicitudSeleccionada.DocenteNombre</span>
                                    }
                                </div>
                            </div>

                            <!-- Estado de la Solicitud -->
                            <div class="detail-info-item">
                                <div class="detail-info-label">
                                    <i class="bi bi-flag me-2"></i>Estado Actual
                                </div>
                                <div class="detail-info-value">
                                    <span class="badge @GetBadgeClass(solicitudSeleccionada.Estado) fs-6">
                                        @solicitudSeleccionada.Estado
                                    </span>
                                    @if (solicitudSeleccionada.FechaRevision.HasValue)
                                    {
                                        <div class="mt-2">
                                            <small class="text-muted">
                                                Revisado: @solicitudSeleccionada.FechaRevision.Value.ToString("dd/MM/yyyy HH:mm")
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Nombre del Curso -->
                            <div class="detail-info-item detail-full-width">
                                <div class="detail-info-label">
                                    <i class="bi bi-book me-2"></i>Nombre del Curso
                                </div>
                                <div class="detail-info-value large">
                                    @solicitudSeleccionada.NombreCurso
                                </div>
                            </div>

                            <!-- Institución Oferente -->
                            <div class="detail-info-item">
                                <div class="detail-info-label">
                                    <i class="bi bi-building me-2"></i>Institución Oferente
                                </div>
                                <div class="detail-info-value">
                                    @solicitudSeleccionada.InstitucionOfertante
                                </div>
                            </div>

                            <!-- Tipo de Capacitación -->
                            <div class="detail-info-item">
                                <div class="detail-info-label">
                                    <i class="bi bi-tags me-2"></i>Tipo de Capacitación
                                </div>
                                <div class="detail-info-value">
                                    <span class="badge bg-light text-dark">@solicitudSeleccionada.TipoCapacitacion</span>
                                </div>
                            </div>

                            <!-- Fecha de Inicio -->
                            <div class="detail-info-item">
                                <div class="detail-info-label">
                                    <i class="bi bi-calendar-check me-2"></i>Fecha de Inicio
                                </div>
                                <div class="detail-info-value">
                                    @solicitudSeleccionada.FechaInicio.ToString("dd/MM/yyyy")
                                </div>
                            </div>

                            <!-- Fecha de Finalización -->
                            <div class="detail-info-item">
                                <div class="detail-info-label">
                                    <i class="bi bi-calendar-x me-2"></i>Fecha de Finalización
                                </div>
                                <div class="detail-info-value">
                                    @solicitudSeleccionada.FechaFin.ToString("dd/MM/yyyy")
                                </div>
                            </div>

                            <!-- Duración Total -->
                            <div class="detail-info-item">
                                <div class="detail-info-label">
                                    <i class="bi bi-clock me-2"></i>Duración Total
                                </div>
                                <div class="detail-info-value">
                                    <span class="badge bg-info text-white">@solicitudSeleccionada.HorasDuracion horas académicas</span>
                                </div>
                            </div>

                            <!-- Información Adicional (Solo si existe) -->
                            @if (!string.IsNullOrEmpty(solicitudSeleccionada.Modalidad))
                            {
                                <div class="detail-info-item">
                                    <div class="detail-info-label">
                                        <i class="bi bi-display me-2"></i>Modalidad
                                    </div>
                                    <div class="detail-info-value">
                                        @solicitudSeleccionada.Modalidad
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(solicitudSeleccionada.NumeroRegistro))
                            {
                                <div class="detail-info-item">
                                    <div class="detail-info-label">
                                        <i class="bi bi-hash me-2"></i>Número de Registro
                                    </div>
                                    <div class="detail-info-value">
                                        @solicitudSeleccionada.NumeroRegistro
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(solicitudSeleccionada.AreaTematica))
                            {
                                <div class="detail-info-item detail-full-width">
                                    <div class="detail-info-label">
                                        <i class="bi bi-diagram-2 me-2"></i>Área Temática
                                    </div>
                                    <div class="detail-info-value">
                                        @solicitudSeleccionada.AreaTematica
                                    </div>
                                </div>
                            }

                            <!-- Descripción del Curso -->
                            @if (!string.IsNullOrEmpty(solicitudSeleccionada.Descripcion))
                            {
                                <div class="detail-info-item detail-full-width">
                                    <div class="detail-info-label">
                                        <i class="bi bi-text-paragraph me-2"></i>Descripción del Curso
                                    </div>
                                    <div class="detail-info-value">
                                        @solicitudSeleccionada.Descripcion
                                    </div>
                                </div>
                            }

                            <!-- Comentarios y Observaciones -->
                            @if (!string.IsNullOrEmpty(solicitudSeleccionada.ComentariosSolicitud))
                            {
                                <div class="detail-info-item detail-full-width">
                                    <div class="detail-info-label">
                                        <i class="bi bi-chat-text me-2"></i>Comentarios del Docente
                                    </div>
                                    <div class="detail-info-value">
                                        <div class="bg-light p-3 rounded mt-2 border-start border-primary border-3">
                                            @solicitudSeleccionada.ComentariosSolicitud
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(solicitudSeleccionada.ComentariosRevision))
                            {
                                <div class="detail-info-item detail-full-width">
                                    <div class="detail-info-label">
                                        <i class="bi bi-chat-square-text me-2"></i>Comentarios de Revisión
                                    </div>
                                    <div class="detail-info-value">
                                        <div class="bg-warning bg-opacity-10 p-3 rounded mt-2 border-start border-warning border-3">
                                            @solicitudSeleccionada.ComentariosRevision
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Certificado Adjunto -->
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.ArchivoNombre))
                    {
                        <div class="section-divider"></div>
                        <div class="detail-section">
                            <div class="detail-label">
                                <i class="bi bi-file-earmark-pdf me-2"></i>Certificado Adjunto
                            </div>
                            <div class="file-info">
                                <i class="bi bi-file-earmark-pdf file-icon"></i>
                                <span class="flex-grow-1">@solicitudSeleccionada.ArchivoNombre</span>
                                <div class="ms-auto">
                                    <button type="button" class="btn btn-sm btn-outline-primary me-2" 
                                            @onclick="() => VisualizarArchivo(solicitudSeleccionada)"
                                            title="Visualizar certificado en PDF">
                                        <i class="bi bi-eye me-1"></i>Visualizar
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-success" 
                                            @onclick="() => DescargarArchivo(solicitudSeleccionada)"
                                            title="Descargar archivo del certificado">
                                        <i class="bi bi-download me-1"></i>Descargar
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Alerta de Acción Requerida -->
                    @if (solicitudSeleccionada.Estado == "Pendiente")
                    {
                        <div class="section-divider"></div>
                        <div class="alert alert-custom" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <strong>Acción Requerida:</strong> Esta solicitud está pendiente de revisión y requiere una decisión administrativa.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarDetalleModal"
                            title="Cerrar ventana sin realizar cambios">
                        <i class="bi bi-x-circle me-2"></i>Cerrar
                    </button>
                    @if (solicitudSeleccionada.Estado == "Pendiente")
                    {
                        <button type="button" class="btn btn-success" @onclick="() => AprobarSolicitud(solicitudSeleccionada)"
                                title="Aprobar esta solicitud de certificado">
                            <i class="bi bi-check-lg me-2"></i>Aprobar Solicitud
                        </button>
                        <button type="button" class="btn btn-danger" @onclick="() => RechazarSolicitud(solicitudSeleccionada)"
                                title="Rechazar esta solicitud con comentarios">
                            <i class="bi bi-x-lg me-2"></i>Rechazar Solicitud
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Rechazo -->
@if (showRechazoModal && solicitudParaRechazo != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header modal-header-danger">
                    <h5 class="modal-title">
                        <i class="bi bi-x-circle-fill me-2"></i>Rechazar Solicitud
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarRechazoModal" 
                            title="Cerrar ventana sin realizar cambios" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="rejection-info">
                        <h6 class="mb-3">
                            <i class="bi bi-info-circle-fill text-custom me-2"></i>
                            Información de la Solicitud
                        </h6>
                        <div class="row">
                            <div class="col-md-6">
                                <strong>Docente:</strong> @solicitudParaRechazo.DocenteNombre<br>
                                <strong>Cédula:</strong> @solicitudParaRechazo.DocenteCedula
                            </div>
                            <div class="col-md-6">
                                <strong>Solicitud ID:</strong> @solicitudParaRechazo.Id.ToString()[..8]...<br>
                                <strong>Fecha:</strong> @solicitudParaRechazo.FechaCreacion.ToString("dd/MM/yyyy")
                            </div>
                        </div>
                        <div class="mt-2">
                            <strong>Curso:</strong> @solicitudParaRechazo.NombreCurso
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold text-danger">
                            <i class="bi bi-exclamation-triangle me-1"></i>
                            Motivo del Rechazo *
                        </label>
                        <textarea class="form-control" rows="4" @bind="motivoRechazo" 
                                  placeholder="Explique detalladamente por qué se rechaza la solicitud. Este motivo será visible para el docente." 
                                  required title="Campo obligatorio: debe explicar por qué se rechaza"></textarea>
                        <div class="form-text">
                            <small class="text-muted">
                                <i class="bi bi-info-circle me-1"></i>
                                Este comentario será enviado al docente por correo electrónico.
                            </small>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">
                            <i class="bi bi-chat-text me-1"></i>
                            Comentarios Adicionales
                        </label>
                        <textarea class="form-control" rows="3" @bind="comentariosRevision" 
                                  placeholder="Comentarios adicionales o sugerencias para el docente (opcional)..."
                                  title="Campo opcional: comentarios adicionales"></textarea>
                        <div class="form-text">
                            <small class="text-muted">
                                Opcional: Puede agregar sugerencias para futuras solicitudes.
                            </small>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarRechazoModal"
                            title="Cancelar operación sin realizar cambios">
                        <i class="bi bi-arrow-left me-2"></i>Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarRechazo" 
                            disabled="@(string.IsNullOrWhiteSpace(motivoRechazo) || isProcessing)"
                            title="Confirmar rechazo de la solicitud">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" aria-hidden="true"></span>
                            <span>Procesando...</span>
                        }
                        else
                        {
                            <i class="bi bi-x-lg me-2"></i>
                            <span>Confirmar Rechazo</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Visualización de PDF -->
@if (showPDFModal && !string.IsNullOrEmpty(pdfUrl))
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header modal-header-custom">
                    <h5 class="modal-title">
                        <i class="bi bi-file-earmark-pdf me-2"></i>
                        Visualizar Certificado - @(pdfNombreArchivo ?? "Documento")
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModalPDF" 
                            title="Cerrar visualizador de PDF" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body p-0">
                    @if (isLoadingPDF)
                    {
                        <div class="pdf-loading">
                            <div class="spinner-border text-custom" role="status">
                                <span class="visually-hidden">Cargando PDF...</span>
                            </div>
                            <p class="mt-3 text-custom">Cargando certificado...</p>
                            <small class="text-muted">Por favor, espere mientras se carga el documento</small>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorPDF))
                    {
                        <div class="alert alert-danger m-3" role="alert">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-exclamation-triangle-fill me-3 fs-4"></i>
                                <div>
                                    <h6 class="mb-1">Error al cargar el certificado</h6>
                                    <p class="mb-0">@errorPDF</p>
                                    <small class="text-muted">
                                        Por favor, intente nuevamente o contacte al administrador del sistema.
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="pdf-viewer-container">
                            <iframe src="@pdfUrl" style="width: 100%; height: 600px; border: none;" frameborder="0"></iframe>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalPDF"
                            title="Cerrar visualizador de PDF">
                        <i class="bi bi-x-circle me-2"></i>Cerrar
                    </button>
                    @if (!string.IsNullOrEmpty(pdfUrl) && !isLoadingPDF && solicitudParaPDF != null)
                    {
                        <button type="button" class="btn btn-primary-custom" @onclick="() => DescargarArchivo(solicitudParaPDF)"
                                title="Descargar archivo PDF al equipo">
                            <i class="bi bi-download me-2"></i>Descargar PDF
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<SolicitudCertificadoCapacitacionAdminDto>? solicitudes;
    private List<SolicitudCertificadoCapacitacionAdminDto>? solicitudesFiltradas;
    private bool isLoading = true;
    private string filtroEstado = "Pendiente";
    
    // Contadores
    private int cantidadPendientes = 0;
    private int cantidadAprobadas = 0;
    private int cantidadRechazadas = 0;
    private int totalSolicitudes = 0;
    
    // Filtros adicionales
    private string filtroCedula = string.Empty;
    private string filtroCurso = string.Empty;
    private string filtroTipo = string.Empty;
    private List<string>? tiposCapacitacion;
    
    // Modales
    private bool showDetalleModal = false;
    private bool showRechazoModal = false;
    private bool showPDFModal = false;
    private SolicitudCertificadoCapacitacionAdminDto? solicitudSeleccionada; // Para modal de detalle
    private SolicitudCertificadoCapacitacionAdminDto? solicitudParaRechazo; // Para modal de rechazo
    private SolicitudCertificadoCapacitacionAdminDto? solicitudParaPDF;
    private string motivoRechazo = string.Empty;
    private string comentariosRevision = string.Empty;
    private bool isProcessing = false;
    
    // Variables para modal de PDF
    private bool isLoadingPDF = false;
    private string? errorPDF = null;
    private string? pdfUrl = null;
    private string? pdfNombreArchivo = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarSolicitudes();
    }

    private async Task CargarSolicitudes()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetFromJsonAsync<ResponseSolicitudesCertificadosAdminDto>("api/certificados-capacitacion/admin/todas-solicitudes");
            
            if (response != null && response.Exitoso)
            {
                solicitudes = response.Solicitudes;
                
                // Cargar tipos de capacitación para el filtro
                if (solicitudes != null && solicitudes.Any())
                {
                    tiposCapacitacion = solicitudes
                        .Select(s => s.TipoCapacitacion)
                        .Where(tipo => !string.IsNullOrWhiteSpace(tipo))
                        .Distinct()
                        .OrderBy(t => t)
                        .ToList();
                }
                
                CalcularContadores();
                FiltrarSolicitudes();
            }
            else
            {
                ToastService.ShowError(response?.Mensaje ?? "Error al cargar las solicitudes");
                solicitudes = new List<SolicitudCertificadoCapacitacionAdminDto>();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar solicitudes: {ex.Message}");
            solicitudes = new List<SolicitudCertificadoCapacitacionAdminDto>();
            Logger.LogError(ex, "Error al cargar solicitudes de certificados");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalcularContadores()
    {
        if (solicitudes == null) return;
        
        cantidadPendientes = solicitudes.Count(s => s.Estado == "Pendiente");
        cantidadAprobadas = solicitudes.Count(s => s.Estado == "Aprobada");
        cantidadRechazadas = solicitudes.Count(s => s.Estado == "Rechazada");
        totalSolicitudes = solicitudes.Count;
    }

    private void FiltrarSolicitudes()
    {
        if (solicitudes == null)
        {
            solicitudesFiltradas = new List<SolicitudCertificadoCapacitacionAdminDto>();
            return;
        }

        var filtroInicial = filtroEstado switch
        {
            "Pendiente" => solicitudes.Where(s => s.Estado == "Pendiente").OrderBy(s => s.FechaCreacion),
            "Aprobada" => solicitudes.Where(s => s.Estado == "Aprobada").OrderByDescending(s => s.FechaRevision),
            "Rechazada" => solicitudes.Where(s => s.Estado == "Rechazada").OrderByDescending(s => s.FechaRevision),
            _ => solicitudes.OrderByDescending(s => s.FechaCreacion)
        };
        
        // Usar una variable IEnumerable para aplicar los filtros adicionales
        IEnumerable<SolicitudCertificadoCapacitacionAdminDto> resultados = filtroInicial;
        
        // Aplicar filtros adicionales
        if (!string.IsNullOrWhiteSpace(filtroCedula))
        {
            resultados = resultados.Where(s => s.DocenteCedula.Contains(filtroCedula, StringComparison.OrdinalIgnoreCase));
        }
        
        if (!string.IsNullOrWhiteSpace(filtroCurso))
        {
            resultados = resultados.Where(s => s.NombreCurso.Contains(filtroCurso, StringComparison.OrdinalIgnoreCase));
        }
        
        if (!string.IsNullOrWhiteSpace(filtroTipo))
        {
            resultados = resultados.Where(s => s.TipoCapacitacion == filtroTipo);
        }
        
        solicitudesFiltradas = resultados.ToList();
    }

    private void AplicarFiltros()
    {
        FiltrarSolicitudes();
    }

    private void FiltrarPendientes()
    {
        filtroEstado = "Pendiente";
        FiltrarSolicitudes();
    }

    private void FiltrarAprobadas()
    {
        filtroEstado = "Aprobada";
        FiltrarSolicitudes();
    }

    private void FiltrarRechazadas()
    {
        filtroEstado = "Rechazada";
        FiltrarSolicitudes();
    }

    private void FiltrarTodas()
    {
        filtroEstado = "Todas";
        FiltrarSolicitudes();
    }

    private void LimpiarFiltros()
    {
        filtroEstado = "Todas";
        filtroCedula = string.Empty;
        filtroCurso = string.Empty;
        filtroTipo = string.Empty;
        FiltrarSolicitudes();
    }

    private void VerDetalle(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        showDetalleModal = true;
    }

    private void CerrarDetalleModal()
    {
        showDetalleModal = false;
        solicitudSeleccionada = null;
    }

    private async Task AprobarSolicitud(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        try
        {
            var request = new RevisionSolicitudCertificadoDto
            {
                SolicitudId = solicitud.Id,
                Accion = "Aprobar",
                Comentarios = "Certificado aprobado"
            };

            var response = await Http.PostAsJsonAsync($"api/certificados-capacitacion/admin/revisar/{solicitud.Id}", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoCertificadoDto>();
                if (result != null && result.Exitoso)
                {
                    ToastService.ShowSuccess("Certificado aprobado exitosamente");
                    await CargarSolicitudes();
                    CerrarDetalleModal();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al aprobar el certificado");
                }
            }
            else
            {
                ToastService.ShowError("Error al comunicarse con el servidor");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al aprobar certificado: {ex.Message}");
        }
    }

    private void RechazarSolicitud(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        try
        {
            Logger.LogInformation("Iniciando rechazo de solicitud: {SolicitudId}", solicitud.Id);
            
            // Cerrar el modal de detalle si está abierto
            if (showDetalleModal)
            {
                CerrarDetalleModal();
            }
            
            // Establecer la solicitud para el modal de rechazo
            solicitudParaRechazo = solicitud;
            motivoRechazo = string.Empty;
            comentariosRevision = string.Empty;
            showRechazoModal = true;
            
            Logger.LogInformation("Modal de rechazo activado para solicitud: {SolicitudId}", solicitud.Id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error en RechazarSolicitud: {Mensaje}", ex.Message);
            ToastService.ShowError($"Error al abrir modal de rechazo: {ex.Message}");
        }
    }

    private void CerrarRechazoModal()
    {
        showRechazoModal = false;
        solicitudParaRechazo = null;
        motivoRechazo = string.Empty;
        comentariosRevision = string.Empty;
        isProcessing = false;
        StateHasChanged();
    }

    private async Task ConfirmarRechazo()
    {
        if (string.IsNullOrWhiteSpace(motivoRechazo) || solicitudParaRechazo == null || isProcessing)
            return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var request = new RevisionSolicitudCertificadoDto
            {
                SolicitudId = solicitudParaRechazo.Id,
                Accion = "Rechazar",
                Comentarios = !string.IsNullOrWhiteSpace(comentariosRevision) 
                    ? $"{motivoRechazo.Trim()}\n\nComentarios adicionales: {comentariosRevision.Trim()}"
                    : motivoRechazo.Trim()
            };

            var response = await Http.PostAsJsonAsync($"api/certificados-capacitacion/admin/revisar/{solicitudParaRechazo.Id}", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoCertificadoDto>();
                
                if (result != null && result.Exitoso)
                {
                    ToastService.ShowSuccess("Certificado rechazado exitosamente");
                    await CargarSolicitudes();
                    CerrarRechazoModal();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al rechazar el certificado");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("Error del servidor al rechazar certificado: {StatusCode} - {Content}", response.StatusCode, errorContent);
                ToastService.ShowError("Error al comunicarse con el servidor");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al rechazar certificado: {Mensaje}", ex.Message);
            ToastService.ShowError($"Error al rechazar certificado: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task DescargarArchivo(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetAsync($"api/certificados-capacitacion/admin/descargar/{solicitud.Id}");
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = solicitud.ArchivoNombre ?? $"certificado_{solicitud.NombreCurso.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd}.pdf";
                
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, fileBytes);
                ToastService.ShowSuccess("Archivo descargado correctamente");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("Error al descargar archivo. Status: {StatusCode}, Content: {Content}", response.StatusCode, errorContent);
                ToastService.ShowError($"Error al descargar el archivo: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al descargar archivo para solicitud {SolicitudId}", solicitud.Id);
            ToastService.ShowError($"Error al descargar archivo: {ex.Message}");
        }
    }

    private async Task VisualizarArchivo(SolicitudCertificadoCapacitacionAdminDto solicitud)
    {
        try
        {
            isLoadingPDF = true;
            errorPDF = null;
            showPDFModal = true;
            solicitudParaPDF = solicitud;
            
            // Configurar información del PDF
            pdfNombreArchivo = solicitud.ArchivoNombre ?? $"Certificado_{solicitud.NombreCurso}";
            
            StateHasChanged();

            // Crear URL completa para visualización del PDF con autenticación
            var endpoint = $"api/certificados-capacitacion/admin/ver/{solicitud.Id}";
            pdfUrl = await ApiUrlService.BuildAuthorizedApiUrlAsync(endpoint);
            
            Logger.LogInformation("URL del PDF generada: {PdfUrl}", pdfUrl);
            
            // Pequeña pausa para permitir que el iframe se configure
            await Task.Delay(500);
        }
        catch (Exception ex)
        {
            errorPDF = $"Error al cargar PDF: {ex.Message}";
            Logger.LogError(ex, "Error al visualizar archivo para solicitud {SolicitudId}", solicitud.Id);
        }
        finally
        {
            isLoadingPDF = false;
            StateHasChanged();
        }
    }

    private void CerrarModalPDF()
    {
        showPDFModal = false;
        pdfUrl = null;
        pdfNombreArchivo = null;
        errorPDF = null;
        isLoadingPDF = false;
        solicitudParaPDF = null;
    }

    private string GetBadgeClass(string estado)
    {
        return estado switch
        {
            "Pendiente" => "bg-warning text-dark",
            "Aprobada" => "bg-success",
            "Rechazada" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    // DTOs locales para esta página
    public class SolicitudCertificadoCapacitacionAdminDto
    {
        public Guid Id { get; set; }
        public Guid SolicitudGrupoId { get; set; }
        public string DocenteCedula { get; set; } = string.Empty;
        public string DocenteNombre { get; set; } = string.Empty;
        public string NombreCurso { get; set; } = string.Empty;
        public string InstitucionOfertante { get; set; } = string.Empty;
        public string TipoCapacitacion { get; set; } = string.Empty;
        public DateTime FechaInicio { get; set; }
        public DateTime FechaFin { get; set; }
        public int HorasDuracion { get; set; }
        public string? Modalidad { get; set; }
        public string? NumeroRegistro { get; set; }
        public string? AreaTematica { get; set; }
        public string? Descripcion { get; set; }
        public string? ArchivoNombre { get; set; }
        public string Estado { get; set; } = string.Empty;
        public string? ComentariosRevision { get; set; }
        public string? MotivoRechazo { get; set; }
        public string? ComentariosSolicitud { get; set; }
        public DateTime FechaCreacion { get; set; }
        public DateTime? FechaRevision { get; set; }
    }

    public class ResponseSolicitudesCertificadosAdminDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
        public List<SolicitudCertificadoCapacitacionAdminDto> Solicitudes { get; set; } = new();
        public int TotalSolicitudes { get; set; }
    }

    public class RevisionSolicitudCertificadoDto
    {
        public Guid SolicitudId { get; set; }
        public string Accion { get; set; } = string.Empty; // "Aprobar" o "Rechazar"
        public string Comentarios { get; set; } = string.Empty;
    }

    public class ResponseGenericoCertificadoDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
    }
}
