@page "/login"
@using SGA.Web.Models
@using SGA.Web.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header bg-primary text-white">
                    <h3 class="text-center">Iniciar Sesión</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="form-group mb-3">
                            <label for="email">Correo Electrónico:</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Contraseña:</label>
                            <div class="input-group">
                                <InputText id="password" 
                                         class="form-control" 
                                         type="@(showPassword ? "text" : "password")" 
                                         @bind-Value="loginModel.Password" />
                                <button type="button" 
                                        class="btn btn-outline-secondary" 
                                        @onclick="TogglePasswordVisibility">
                                    <i class="@(showPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="form-group mb-3">
                            <div class="form-text text-info">
                                <small>Nota: Después de 3 intentos fallidos, la cuenta se bloqueará por 15 minutos.</small>
                            </div>
                        </div>

                        <div class="form-group d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-block" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Iniciando sesión...</span>
                                }
                                else
                                {
                                    <span>Iniciar Sesión</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <p>¿No tienes una cuenta? <a href="/register">Regístrate aquí</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;
    private bool isLoading = false;
    private bool showPassword = false;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var result = await AuthService.Login(loginModel);
            
            if (result.Success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
