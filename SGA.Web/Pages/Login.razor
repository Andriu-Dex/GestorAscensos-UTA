@page "/login"
@using SGA.Web.Models
@using SGA.Web.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container login-container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card login-card">
                <div class="login-header">
                    <h3 class="text-center">Iniciar Sesión</h3>
                </div>
                <div class="login-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="login-error">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                @errorMessage
                            </div>
                        }

                        <div class="login-form-group">
                            <label for="email" class="login-label">Correo Electrónico:</label>
                            <InputText id="email" class="form-control login-input" @bind-Value="loginModel.Email" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="login-validation-message" />
                        </div>

                        <div class="login-form-group">
                            <label for="password" class="login-label">Contraseña:</label>
                            <div class="position-relative">
                                <InputText id="password" 
                                         class="form-control login-input" 
                                         type="@(showPassword ? "text" : "password")" 
                                         @bind-Value="loginModel.Password" />
                                <button type="button" 
                                        class="btn position-absolute end-0 top-0 h-100 text-white" 
                                        style="background-color: #8A1538; border-radius: 0 5px 5px 0;" 
                                        @onclick="TogglePasswordVisibility">
                                    <i class="bi bi-@(showPassword ? "eye-slash" : "eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => loginModel.Password)" class="login-validation-message" />
                        </div>

                        <div class="login-note">
                            <i class="bi bi-info-circle me-2"></i>
                            <span>Nota: Después de 3 intentos fallidos, la cuenta se bloqueará por 15 minutos.</span>
                        </div>

                        <div class="form-group d-grid gap-2 mt-4">
                            <button type="submit" class="login-btn animate-pulse" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Iniciando sesión...</span>
                                }
                                else
                                {
                                    <span><i class="bi bi-box-arrow-in-right me-2"></i>Iniciar Sesión</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="login-footer">
                    <p>¿No tienes una cuenta? <a href="/register" class="login-link">Regístrate aquí</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;
    private bool isLoading = false;
    private bool showPassword = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("[LOGIN DEBUG] OnInitializedAsync ejecutado");
        
        // Verificar si ya está autenticado
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Console.WriteLine($"[LOGIN DEBUG] Token encontrado: {!string.IsNullOrEmpty(token)}");
            
            if (!string.IsNullOrEmpty(token))
            {
                Console.WriteLine("[LOGIN DEBUG] Usuario ya tiene token, redirigiendo");
                NavigationManager.NavigateTo("/", replace: true);
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LOGIN DEBUG] Error verificando token: {ex.Message}");
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleLogin()
    {
        Console.WriteLine("[LOGIN DEBUG] HandleLogin iniciado");
        isLoading = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            Console.WriteLine($"[LOGIN DEBUG] Intentando login con email: {loginModel.Email}");
            
            var result = await AuthService.Login(loginModel);
            
            Console.WriteLine($"[LOGIN DEBUG] Resultado del login - Success: {result.Success}");
            Console.WriteLine($"[LOGIN DEBUG] Mensaje: {result.Message}");
            Console.WriteLine($"[LOGIN DEBUG] Token: {!string.IsNullOrEmpty(result.Token)}");
            
            if (result.Success && !string.IsNullOrEmpty(result.Token))
            {
                Console.WriteLine("[LOGIN DEBUG] Login exitoso, navegando a home");
                // Dar un momento para que el estado se actualice
                await Task.Delay(100);
                NavigationManager.NavigateTo("/", replace: true);
            }
            else
            {
                Console.WriteLine($"[LOGIN DEBUG] Login falló: {result.Message}");
                errorMessage = result.Message ?? "Error desconocido";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LOGIN DEBUG] Excepción en HandleLogin: {ex.Message}");
            Console.WriteLine($"[LOGIN DEBUG] Stack trace: {ex.StackTrace}");
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
