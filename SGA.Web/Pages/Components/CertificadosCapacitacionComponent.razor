@using SGA.Web.Models
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject IJSRuntime JSRuntime

<!-- Contenido sin encabezado de tarjeta -->
<div class="px-3 py-2">
    <!-- Botón Agregar Certificados -->
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" style="background-color: #8a1538; border-color: #8a1538;" @onclick="() => ShowCertificadosModal()">
            <i class="bi bi-plus-circle"></i> Agregar Certificados
        </button>
    </div>
    
    <!-- Filtros por Estado -->
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Filtrar por Estado:</label>
                <select class="form-select" @onchange="OnEstadoFilterChanged">
                    <option value="">Todos los estados</option>
                    <option value="Pendiente">Pendiente</option>
                    <option value="En Proceso">En Proceso</option>
                    <option value="Aprobada">Aprobada</option>
                    <option value="Rechazada">Rechazada</option>
                </select>
            </div>
            @if (!string.IsNullOrEmpty(selectedEstado))
            {
                <div class="col-md-6 d-flex align-items-end">
                    <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                        <i class="bi bi-x-circle"></i> Limpiar Filtros
                    </button>
                </div>
            }
        </div>

        @if (isLoadingCertificados)
        {
            <div class="d-flex justify-content-center my-3">
                <div class="spinner-border" style="color: #8a1538;" role="status">
                    <span class="visually-hidden">Cargando certificados...</span>
                </div>
            </div>
        }
        else if (certificadosFiltrados == null || !certificadosFiltrados.Any())
        {
            @if (string.IsNullOrEmpty(selectedEstado))
            {
                <div class="alert alert-info" role="alert">
                    No tiene certificados de capacitación registrados. Utilice el botón "Agregar Certificados" para solicitar la inclusión de nuevos certificados.
                </div>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    No hay certificados con estado "@selectedEstado".
                </div>
            }
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Nombre del Curso</th>
                            <th>Institución</th>
                            <th>Tipo</th>
                            <th>Fechas</th>
                            <th>Horas</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var certificado in certificadosFiltrados)
                        {
                            <tr>
                                <td>@certificado.NombreCurso</td>
                                <td>@certificado.InstitucionOfertante</td>
                                <td>@certificado.TipoCapacitacion</td>
                                <td>
                                    <small>
                                        @certificado.FechaInicio.ToString("dd/MM/yyyy") - 
                                        @certificado.FechaFin.ToString("dd/MM/yyyy")
                                    </small>
                                </td>
                                <td>@certificado.HorasDuracion h</td>
                                <td>
                                    @if (certificado.Estado == "Pendiente")
                                    {
                                        <span class="badge bg-warning text-dark">Pendiente</span>
                                    }
                                    else if (certificado.Estado == "Aprobada")
                                    {
                                        <span class="badge bg-success">Aprobada</span>
                                    }
                                    else if (certificado.Estado == "Rechazada")
                                    {
                                        <span class="badge bg-danger">Rechazada</span>
                                    }
                                    else if (certificado.Estado == "En Proceso")
                                    {
                                        <span class="badge bg-info">En Proceso</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        @if (PuedeVisualizarCertificado(certificado.Estado))
                                        {
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="() => VisualizarCertificado(certificado.Id)"
                                                    title="Visualizar">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        }
                                        
                                        @if (certificado.Estado == "Aprobada")
                                        {
                                            <button class="btn btn-sm btn-outline-success" 
                                                    @onclick="() => DescargarCertificado(certificado.Id)"
                                                    title="Descargar">
                                                <i class="bi bi-download"></i>
                                            </button>
                                        }
                                        
                                        @if (PuedeEditarCertificado(certificado.Estado))
                                        {
                                            <button class="btn btn-sm btn-outline-warning" 
                                                    @onclick="() => EditarCertificado(certificado)"
                                                    title="Editar">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                        }
                                        
                                        @if (PuedeReemplazarArchivoCertificado(certificado.Estado))
                                        {
                                            <button class="btn btn-sm btn-outline-info" 
                                                    @onclick="() => ReemplazarArchivoCertificado(certificado)"
                                                    title="Reemplazar Archivo">
                                                <i class="bi bi-arrow-repeat"></i>
                                            </button>
                                        }
                                        
                                        @if (certificado.Estado == "Rechazada" && !string.IsNullOrEmpty(certificado.MotivoRechazo))
                                        {
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    @onclick="() => VerMotivoRechazoCertificado(certificado)"
                                                    title="Ver Motivo de Rechazo">
                                                <i class="bi bi-exclamation-triangle"></i>
                                            </button>
                                        }
                                        
                                        @if (PuedeEliminarCertificado(certificado.Estado))
                                        {
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    @onclick="() => EliminarCertificado(certificado.Id)"
                                                    title="Eliminar">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
</div>

@code {
    [Parameter] public List<CertificadoCapacitacionDetalleDto> solicitudesCertificados { get; set; } = new();
    [Parameter] public bool isLoadingCertificados { get; set; }
    [Parameter] public EventCallback OnShowCertificadosModal { get; set; }
    [Parameter] public EventCallback<Guid> OnVisualizarCertificado { get; set; }
    [Parameter] public EventCallback<Guid> OnDescargarCertificado { get; set; }
    [Parameter] public EventCallback<CertificadoCapacitacionDetalleDto> OnEditarCertificado { get; set; }
    [Parameter] public EventCallback<CertificadoCapacitacionDetalleDto> OnReemplazarArchivoCertificado { get; set; }
    [Parameter] public EventCallback<CertificadoCapacitacionDetalleDto> OnVerMotivoRechazoCertificado { get; set; }
    [Parameter] public EventCallback<Guid> OnEliminarCertificado { get; set; }

    // Variables para filtrado
    private string selectedEstado = "";
    private List<CertificadoCapacitacionDetalleDto>? certificadosFiltrados => FiltrarCertificados();

    private List<CertificadoCapacitacionDetalleDto>? FiltrarCertificados()
    {
        if (solicitudesCertificados == null) return null;
        
        if (string.IsNullOrEmpty(selectedEstado))
            return solicitudesCertificados;
            
        return solicitudesCertificados.Where(s => s.Estado == selectedEstado).ToList();
    }

    private void OnEstadoFilterChanged(ChangeEventArgs e)
    {
        selectedEstado = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private void ClearFilters()
    {
        selectedEstado = "";
        StateHasChanged();
    }

    private void ShowCertificadosModal()
    {
        OnShowCertificadosModal.InvokeAsync();
    }

    private void VisualizarCertificado(Guid certificadoId)
    {
        OnVisualizarCertificado.InvokeAsync(certificadoId);
    }

    private void DescargarCertificado(Guid certificadoId)
    {
        OnDescargarCertificado.InvokeAsync(certificadoId);
    }

    private void EditarCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        OnEditarCertificado.InvokeAsync(certificado);
    }

    private void ReemplazarArchivoCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        OnReemplazarArchivoCertificado.InvokeAsync(certificado);
    }

    private void VerMotivoRechazoCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        OnVerMotivoRechazoCertificado.InvokeAsync(certificado);
    }

    private void EliminarCertificado(Guid certificadoId)
    {
        OnEliminarCertificado.InvokeAsync(certificadoId);
    }

    // Métodos de verificación de permisos
    private bool PuedeVisualizarCertificado(string estado) => !string.IsNullOrEmpty(estado);
    private bool PuedeEditarCertificado(string estado) => estado == "Pendiente" || estado == "En Proceso" || estado == "Rechazada";
    private bool PuedeReemplazarArchivoCertificado(string estado) => estado == "Pendiente" || estado == "Rechazada";
    private bool PuedeEliminarCertificado(string estado) => estado == "Pendiente" || estado == "Rechazada";
}
