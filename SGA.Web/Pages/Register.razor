@page "/register"
@using SGA.Web.Models
@using SGA.Web.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IApiService ApiService

<div class="container register-container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card register-card">
                <div class="register-header">
                    <h3 class="text-center">Registro de Docente</h3>
                </div>
                <div class="register-body">
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="register-error">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                @errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="register-success">
                                <i class="bi bi-check-circle me-2"></i>
                                @successMessage
                            </div>
                        }                        <div class="row">
                            <div class="col-md-6">
                                <div class="register-form-group">
                                    <label for="cedula" class="register-label">Cédula:</label>                                    <div class="position-relative">
                                        <InputText id="cedula" class="form-control register-input" @bind-Value="registerModel.Cedula" />
                                        <button type="button" class="btn position-absolute end-0 top-0 h-100 validate-btn" @onclick="ValidarCedula">
                                            <i class="bi bi-search"></i> Validar
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => registerModel.Cedula)" class="register-validation-message" />
                                    <div class="register-help-text">
                                        Ingrese su cédula y presione "Validar" para autocompletar sus datos.
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="register-form-group">
                                    <label for="email" class="register-label">Correo Electrónico:</label>
                                    <InputText id="email" class="form-control register-input" @bind-Value="registerModel.Email" />                                    <ValidationMessage For="@(() => registerModel.Email)" class="register-validation-message" />
                                    <div class="register-help-text">
                                        Debe ser un correo institucional (@@uta.edu.ec).
                                    </div>
                                </div>
                            </div>
                        </div>                        <div class="row">
                            <div class="col-md-6">
                                <div class="register-form-group">
                                    <label for="nombres" class="register-label">Nombres:</label>
                                    <InputText id="nombres" class="form-control register-input" @bind-Value="registerModel.Nombres" disabled="@datosCargados" />
                                    <ValidationMessage For="@(() => registerModel.Nombres)" class="register-validation-message" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="register-form-group">
                                    <label for="apellidos" class="register-label">Apellidos:</label>
                                    <InputText id="apellidos" class="form-control register-input" @bind-Value="registerModel.Apellidos" disabled="@datosCargados" />
                                    <ValidationMessage For="@(() => registerModel.Apellidos)" class="register-validation-message" />
                                </div>
                            </div>
                        </div>                        <div class="row">
                            <div class="col-md-6">
                                <div class="register-form-group">
                                    <label for="telefono" class="register-label">Teléfono:</label>
                                    <InputText id="telefono" class="form-control register-input" @bind-Value="registerModel.Telefono" />
                                    <ValidationMessage For="@(() => registerModel.Telefono)" class="register-validation-message" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="register-form-group">
                                    <label for="facultad" class="register-label">Facultad:</label>
                                    <InputText id="facultad" class="form-control register-input" @bind-Value="registerModel.Facultad" disabled="@datosCargados" />
                                    <ValidationMessage For="@(() => registerModel.Facultad)" class="register-validation-message" />
                                </div>
                            </div>
                        </div>                        <div class="row">
                            <div class="col-md-6">
                                <div class="register-form-group">
                                    <label for="password" class="register-label">Contraseña:</label>
                                    <div class="position-relative">
                                        <InputText id="password" class="form-control register-input" type="@passwordType" @bind-Value="registerModel.Password" />
                                        <button type="button" class="btn position-absolute end-0 top-0 h-100 text-white" style="background-color: #8A1538; border-radius: 0 5px 5px 0;" @onclick="TogglePasswordVisibility">
                                            <i class="bi bi-@passwordIcon"></i>
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => registerModel.Password)" class="register-validation-message" />
                                    <div class="register-help-text">
                                        La contraseña debe tener al menos 8 caracteres, una mayúscula, una minúscula, un número y un carácter especial.
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="register-form-group">
                                    <label for="confirmPassword" class="register-label">Confirmar Contraseña:</label>
                                    <div class="position-relative">
                                        <InputText id="confirmPassword" class="form-control register-input" type="@passwordType" @bind-Value="registerModel.ConfirmPassword" />
                                        <button type="button" class="btn position-absolute end-0 top-0 h-100 text-white" style="background-color: #8A1538; border-radius: 0 5px 5px 0;" @onclick="TogglePasswordVisibility">
                                            <i class="bi bi-@passwordIcon"></i>
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="register-validation-message" />
                                </div>
                            </div>
                        </div>

                        <div class="form-group d-grid gap-2 mt-4">
                            <button type="submit" class="register-btn animate-pulse" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Registrando...</span>
                                }
                                else
                                {
                                    <span><i class="bi bi-person-plus me-2"></i>Registrarse</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="register-footer">
                    <p>¿Ya tienes una cuenta? <a href="/login">Inicia sesión aquí</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string? errorMessage = null;
    private string? successMessage = null;
    private bool isLoading = false;
    private bool datosCargados = false;
    private string passwordType = "password";
    private string passwordIcon = "eye";

    protected override async Task OnInitializedAsync()
    {
        // Verificar si el usuario ya está autenticado
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void TogglePasswordVisibility()
    {
        if (passwordType == "password")
        {
            passwordType = "text";
            passwordIcon = "eye-slash";
        }
        else
        {
            passwordType = "password";
            passwordIcon = "eye";
        }
    }    private async Task ValidarCedula()
    {
        if (string.IsNullOrEmpty(registerModel.Cedula) || registerModel.Cedula.Length != 10 || !int.TryParse(registerModel.Cedula, out _))
        {
            errorMessage = "Ingrese una cédula válida de 10 dígitos.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            // Verificar si ya existe un usuario con esta cédula
            var verificacionResult = await AuthService.VerificarCedula(registerModel.Cedula);
            if (!verificacionResult.Success)
            {
                errorMessage = verificacionResult.Message;
                isLoading = false;
                return;
            }            // Obtener datos desde la API de TTHH
            var datosPersonales = await ApiService.ObtenerDatosTTHH(registerModel.Cedula);
            if (datosPersonales != null)
            {
                registerModel.Nombres = datosPersonales.Nombres;
                registerModel.Apellidos = datosPersonales.Apellidos;
                registerModel.Facultad = datosPersonales.Facultad;
                
                // Asignar el número de celular al campo Telefono
                if (!string.IsNullOrEmpty(datosPersonales.Celular))
                {
                    registerModel.Telefono = datosPersonales.Celular;
                }
                
                // Usar el correo institucional si viene de TTHH, sino generar uno
                if (string.IsNullOrEmpty(registerModel.Email))
                {
                    if (!string.IsNullOrEmpty(datosPersonales.EmailInstitucional))
                    {
                        registerModel.Email = datosPersonales.EmailInstitucional;
                    }
                    else if (!string.IsNullOrEmpty(datosPersonales.EmailPersonal))
                    {
                        registerModel.Email = datosPersonales.EmailPersonal;
                    }
                    else
                    {
                        // Fallback: generar correo con formato inicial + apellido
                        string primeraInicial = registerModel.Nombres.Split(' ')[0].Substring(0, 1).ToLower();
                        string primerApellido = registerModel.Apellidos.Split(' ')[0].ToLower();
                        registerModel.Email = $"{primeraInicial}{primerApellido}@uta.edu.ec";
                    }
                }

                datosCargados = true;
                successMessage = "Datos cargados correctamente desde TTHH.";
            }
            else
            {
                errorMessage = "No se encontraron datos para esta cédula en el sistema de TTHH.";
                datosCargados = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al validar la cédula: {ex.Message}";
            datosCargados = false;
        }        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            // Validar que sea un correo institucional
            string email = registerModel.Email.ToLower();
            if (!email.EndsWith("@uta.edu.ec"))
            {
                errorMessage = "El correo debe ser institucional (@uta.edu.ec)";
                isLoading = false;
                return;
            }

            // Verificar si ya existe un usuario con este correo
            var verificacionResult = await AuthService.VerificarEmail(registerModel.Email);
            if (!verificacionResult.Success)
            {
                errorMessage = verificacionResult.Message;
                isLoading = false;
                return;
            }

            // Generar un username simple basado en el correo, solo como identificador interno
            // Quitamos el dominio y agregamos la cédula como sufijo para hacerlo único
            string username = email.Replace("@uta.edu.ec", "_") + registerModel.Cedula;
            registerModel.Username = username;

            var result = await AuthService.Register(registerModel);
            
            if (result.Success)
            {
                successMessage = "Registro exitoso. Serás redirigido a la página de inicio de sesión en 3 segundos.";
                registerModel = new RegisterModel();
                await Task.Delay(3000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
