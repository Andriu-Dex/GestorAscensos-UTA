@page "/solicitudes/nueva"
@attribute [Authorize]
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService ToastService
@using SGA.Web.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Net.Http.Json

<div class="container mt-4">
    <h3>Nueva Solicitud de Ascenso</h3>
    
    <div class="card">
        <div class="card-header text-white" style="background-color: #8a1538;">
            <h5 class="mb-0">Formulario de Solicitud</h5>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else
            {
                <EditForm Model="@solicitud" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    
                    <!-- Información del Docente -->
                    <h5>Información del Docente</h5>
                    @if (userInfo != null)
                    {
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="fw-bold">Nombres:</label>
                                    <input type="text" class="form-control" value="@userInfo.Nombres" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="fw-bold">Apellidos:</label>
                                    <input type="text" class="form-control" value="@userInfo.Apellidos" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="fw-bold">Cédula:</label>
                                    <input type="text" class="form-control" value="@userInfo.Cedula" disabled />
                                </div>
                            </div>
                        </div>
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="fw-bold">Nivel Actual:</label>
                                    <input type="text" class="form-control" value="@($"Titular Auxiliar {userInfo.NivelActual}")" disabled />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="fw-bold">Fecha de Ingreso al Nivel Actual:</label>
                                    <input type="text" class="form-control" value="@userInfo.FechaIngresoNivelActual.ToString("dd/MM/yyyy")" disabled />
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                            No se pudo cargar la información del docente. Por favor, recargue la página.
                        </div>
                    }
                    
                    <hr class="my-4" />
                    
                    <h5>Indicadores Académicos</h5>
                    <div class="alert alert-info">
                        Los siguientes indicadores serán verificados automáticamente con los servicios universitarios. 
                        Si algún valor no es correcto, contacte a la unidad correspondiente.
                        <button type="button" class="btn btn-sm btn-outline-primary ms-2" @onclick="ActualizarIndicadores" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            }
                            else
                            {
                                <i class="fas fa-refresh"></i>
                            }
                            Actualizar
                        </button>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Tiempo en rol actual:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind="solicitud.TiempoRol" disabled="@true" />
                                    <span class="input-group-text">meses</span>
                                </div>
                                <div class="@GetValidationClass(solicitud.CumpleTiempoRol)">
                                    @(solicitud.CumpleTiempoRol ? "Cumple" : "No cumple")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Número de obras:</label>
                                <input type="text" class="form-control" @bind="solicitud.NumeroObras" disabled="@true" />
                                <div class="@GetValidationClass(solicitud.CumpleObras)">
                                    @(solicitud.CumpleObras ? "Cumple" : "No cumple")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Puntaje evaluación:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind="solicitud.PuntajeEvaluacion" disabled="@true" />
                                    <span class="input-group-text">%</span>
                                </div>
                                <div class="@GetValidationClass(solicitud.CumpleEvaluacion)">
                                    @(solicitud.CumpleEvaluacion ? "Cumple" : "No cumple")
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Horas capacitación:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind="solicitud.HorasCapacitacion" disabled="@true" />
                                    <span class="input-group-text">horas</span>
                                </div>
                                <div class="@GetValidationClass(solicitud.CumpleCapacitacion)">
                                    @(solicitud.CumpleCapacitacion ? "Cumple" : "No cumple")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Tiempo investigación:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind="solicitud.TiempoInvestigacion" disabled="@true" />
                                    <span class="input-group-text">meses</span>
                                </div>
                                <div class="@GetValidationClass(solicitud.CumpleInvestigacion)">
                                    @(solicitud.CumpleInvestigacion ? "Cumple" : "No cumple")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Nivel solicitado:</label>
                                <input type="text" class="form-control" value="@($"Titular {solicitud.NivelSolicitado}")" disabled />
                            </div>
                        </div>
                    </div>
                    
                    <h5 class="mt-4">Documentos de Respaldo</h5>
                    <div class="alert @(cumpleTodosRequisitos ? "alert-success" : "alert-warning")">
                        @if (cumpleTodosRequisitos)
                        {
                            <p>¡Felicidades! Cumple con todos los requisitos para solicitar el ascenso.</p>
                        }
                        else
                        {
                            <p>No cumple con todos los requisitos necesarios para el ascenso. Puede continuar con la solicitud, pero es probable que sea rechazada.</p>
                        }
                    </div>
                    
                    <!-- Componente para selección de documentos -->
                    <DocumentosSelector @ref="documentosSelector" OnSelectionChanged="OnDocumentSelectionChanged" />
                    
                    @if (totalDocumentosSeleccionados > 0)
                    {
                        <div class="alert alert-info mt-3">
                            <i class="bi bi-info-circle"></i> 
                            Se han seleccionado <strong>@totalDocumentosSeleccionados</strong> documentos para enviar con la solicitud.
                        </div>
                    }
                    
                    <div class="form-group mt-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="confirmacion" @bind="aceptaTerminos" />
                            <label class="form-check-label" for="confirmacion">
                                Confirmo que la información proporcionada es verdadera y autorizo su verificación
                            </label>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between mt-4">
                        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancelar</button>
                        <button type="submit" class="btn btn-primary" style="background-color: #8a1538; border-color: #8a1538;" disabled="@(!aceptaTerminos || isSubmitting || totalDocumentosSeleccionados == 0)">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Enviando...</span>
                            }
                            else
                            {
                                <span>Enviar Solicitud</span>
                            }
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private UserInfoModel? userInfo;
    private CrearSolicitudRequest solicitud = new CrearSolicitudRequest();
    private List<DocumentoDto>? documentos;
    private List<int> documentosSeleccionados = new List<int>();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool aceptaTerminos = false;
    private bool cumpleTodosRequisitos = false;
    
    // Variables para el nuevo componente de documentos
    private DocumentosSelector? documentosSelector;
    private int totalDocumentosSeleccionados = 0;
    private Dictionary<string, List<string>> documentosSeleccionadosPorTipo = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            // Cargar información del usuario
            try
            {
                userInfo = await Http.GetFromJsonAsync<UserInfoModel>("api/auth/me");
                Console.WriteLine($"Usuario cargado: {userInfo?.Nombres} {userInfo?.Apellidos}, Nivel: {userInfo?.NivelActual}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar información del usuario: {ex.Message}");
                return;
            }
            
            // Verificar si ya tiene una solicitud activa antes de permitir crear una nueva
            await VerificarSolicitudActiva();
            
            // Los documentos ahora se cargan en el componente DocumentosSelector
            // try
            // {
            //     documentos = await Http.GetFromJsonAsync<List<DocumentoDto>>("api/documento/mis-documentos");
            //     Console.WriteLine($"Documentos cargados: {documentos?.Count ?? 0}");
            // }
            // catch (Exception ex)
            // {
            //     Console.WriteLine($"Error al cargar documentos: {ex.Message}");
            //     documentos = new List<DocumentoDto>();
            // }
            
            // Cargar indicadores y validar requisitos
            await CargarIndicadores();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error general en OnInitializedAsync: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task VerificarSolicitudActiva()
    {
        try
        {
            var solicitudesResponse = await Http.GetFromJsonAsync<List<SolicitudAscensoDto>>("api/solicitudascenso/mis-solicitudes");
            if (solicitudesResponse != null)
            {
                var solicitudActiva = solicitudesResponse.FirstOrDefault(s => 
                    s.Estado == "Pendiente" || s.Estado == "EnProceso");
                
                if (solicitudActiva != null)
                {
                    NavigationManager.NavigateTo("/solicitudes");
                    return;
                }
            }
        }
        catch (Exception)
        {
            // Continuar con el flujo normal si hay error en la verificación
        }
    }
    
    private async Task CargarIndicadores()
    {
        try
        {
            Console.WriteLine("Iniciando carga de indicadores...");
            
            // Primero obtener los indicadores actuales
            var indicadoresResponse = await Http.GetFromJsonAsync<IndicadoresResponse>("api/docente/indicadores");
            
            if (indicadoresResponse != null && userInfo != null)
            {
                Console.WriteLine($"Indicadores recibidos: Tiempo={indicadoresResponse.TiempoRol}, Obras={indicadoresResponse.NumeroObras}");
                
                // Asignar valores a la solicitud
                solicitud.TiempoRol = indicadoresResponse.TiempoRol;
                solicitud.NumeroObras = indicadoresResponse.NumeroObras;
                solicitud.PuntajeEvaluacion = indicadoresResponse.PuntajeEvaluacion;
                solicitud.HorasCapacitacion = indicadoresResponse.HorasCapacitacion;
                solicitud.TiempoInvestigacion = indicadoresResponse.TiempoInvestigacion;
                
                // Establecer nivel actual y solicitado
                solicitud.NivelActual = userInfo.NivelActual;
                solicitud.NivelSolicitado = userInfo.NivelActual + 1;
                
                Console.WriteLine($"Nivel actual: {solicitud.NivelActual}, Nivel solicitado: {solicitud.NivelSolicitado}");
                
                // Validar requisitos usando el endpoint correcto
                var requisitosUrl = $"api/validacion/requisitos?nivelActual={solicitud.NivelActual}";
                Console.WriteLine($"Consultando requisitos en: {requisitosUrl}");
                
                var requisitosResponse = await Http.GetFromJsonAsync<RequisitosResponse>(requisitosUrl);
                
                if (requisitosResponse != null)
                {
                    Console.WriteLine($"Requisitos recibidos - Tiempo: {requisitosResponse.CumpleTiempoRol}, Obras: {requisitosResponse.CumpleObras}");
                    
                    solicitud.CumpleTiempoRol = requisitosResponse.CumpleTiempoRol;
                    solicitud.CumpleObras = requisitosResponse.CumpleObras;
                    solicitud.CumpleEvaluacion = requisitosResponse.CumpleEvaluacion;
                    solicitud.CumpleCapacitacion = requisitosResponse.CumpleCapacitacion;
                    solicitud.CumpleInvestigacion = requisitosResponse.CumpleInvestigacion;
                    
                    cumpleTodosRequisitos = requisitosResponse.CumpleTodosRequisitos;
                    
                    Console.WriteLine($"Cumple todos los requisitos: {cumpleTodosRequisitos}");
                }
                else
                {
                    Console.WriteLine("No se recibió respuesta de requisitos");
                    // Establecer valores por defecto
                    solicitud.CumpleTiempoRol = false;
                    solicitud.CumpleObras = false;
                    solicitud.CumpleEvaluacion = false;
                    solicitud.CumpleCapacitacion = false;
                    solicitud.CumpleInvestigacion = false;
                    cumpleTodosRequisitos = false;
                }
                
                // Forzar actualización de la UI
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error: indicadoresResponse={indicadoresResponse != null}, userInfo={userInfo != null}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar indicadores: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            
            // Establecer valores por defecto en caso de error
            if (userInfo != null)
            {
                solicitud.NivelActual = userInfo.NivelActual;
                solicitud.NivelSolicitado = userInfo.NivelActual + 1;
            }
            
            // Valores por defecto para indicadores
            solicitud.TiempoRol = 0;
            solicitud.NumeroObras = 0;
            solicitud.PuntajeEvaluacion = 0;
            solicitud.HorasCapacitacion = 0;
            solicitud.TiempoInvestigacion = 0;
            
            // Todos los requisitos fallan por defecto
            solicitud.CumpleTiempoRol = false;
            solicitud.CumpleObras = false;
            solicitud.CumpleEvaluacion = false;
            solicitud.CumpleCapacitacion = false;
            solicitud.CumpleInvestigacion = false;
            cumpleTodosRequisitos = false;
            
            StateHasChanged();
        }
    }
    
    // Método para manejar cambios en la selección de documentos del componente
    private void OnDocumentSelectionChanged(Dictionary<string, bool> seleccionados)
    {
        if (documentosSelector != null)
        {
            documentosSeleccionadosPorTipo = documentosSelector.GetSelectedDocuments();
            totalDocumentosSeleccionados = documentosSelector.GetTotalSelectedCount();
        }
        StateHasChanged();
    }
    
    // Método legacy - puede ser eliminado si no se usa en otra parte
    private void ToggleDocumentSelection(int documentoId, bool isSelected)
    {
        if (isSelected)
        {
            if (!documentosSeleccionados.Contains(documentoId))
            {
                documentosSeleccionados.Add(documentoId);
            }
        }
        else
        {
            if (documentosSeleccionados.Contains(documentoId))
            {
                documentosSeleccionados.Remove(documentoId);
            }
        }
    }
    
    private async Task HandleValidSubmit()
    {
        if (totalDocumentosSeleccionados == 0)
        {
            ToastService.ShowWarning("Debe seleccionar al menos un documento de respaldo.");
            return;
        }
        
        if (!aceptaTerminos)
        {
            ToastService.ShowWarning("Debe aceptar los términos y condiciones.");
            return;
        }
        
        try
        {
            isSubmitting = true;
            
            // Obtener documentos seleccionados del componente DocumentosSelector
            if (documentosSelector != null)
            {
                solicitud.DocumentosSeleccionados = documentosSelector.GetSelectedDocuments();
                Console.WriteLine($"[SolicitudNueva] Documentos seleccionados por tipo: {System.Text.Json.JsonSerializer.Serialize(solicitud.DocumentosSeleccionados)}");
                
                var totalDocs = solicitud.DocumentosSeleccionados.Values.Sum(list => list.Count);
                Console.WriteLine($"[SolicitudNueva] Total de documentos seleccionados: {totalDocs}");
            }
            else
            {
                Console.WriteLine($"[SolicitudNueva] DocumentosSelector es null");
                solicitud.DocumentosSeleccionados = new Dictionary<string, List<string>>();
            }
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            Console.WriteLine($"[SolicitudNueva] Enviando solicitud: {System.Text.Json.JsonSerializer.Serialize(solicitud)}");
            
            var response = await Http.PostAsJsonAsync("api/solicitudascenso", solicitud);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Solicitud enviada exitosamente.");
                NavigationManager.NavigateTo("/solicitudes");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[SolicitudNueva] Error del servidor: {error}");
                ToastService.ShowError($"Error al enviar la solicitud: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SolicitudNueva] Error al enviar solicitud: {ex.Message}");
            ToastService.ShowError($"Error inesperado: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    private void GoBack()
    {
        NavigationManager.NavigateTo("/solicitudes");
    }
    
    private async Task ActualizarIndicadores()
    {
        if (isLoading) return;
        
        isLoading = true;
        StateHasChanged();
        
        try
        {
            await CargarIndicadores();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar indicadores: {ex.Message}");
            ToastService.ShowError("Error al actualizar los indicadores. Intente nuevamente.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private string GetValidationClass(bool cumple)
    {
        return cumple ? "text-success mt-1" : "text-danger mt-1";
    }
    
    public class DocumentoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public TipoDocumentoDto? TipoDocumento { get; set; }
        public DateTime FechaCreacion { get; set; }
    }
    
    public class TipoDocumentoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
    }
    
    public class IndicadoresResponse
    {
        public int TiempoRol { get; set; }
        public int NumeroObras { get; set; }
        public decimal PuntajeEvaluacion { get; set; }
        public int HorasCapacitacion { get; set; }
        public int TiempoInvestigacion { get; set; }
    }
    
    public class RequisitosResponse
    {
        public bool CumpleTiempoRol { get; set; }
        public bool CumpleObras { get; set; }
        public bool CumpleEvaluacion { get; set; }
        public bool CumpleCapacitacion { get; set; }
        public bool CumpleInvestigacion { get; set; }
        
        public int TiempoRolRequerido { get; set; }
        public int TiempoRolActual { get; set; }
        
        public int ObrasRequeridas { get; set; }
        public int ObrasActuales { get; set; }
        
        public decimal EvaluacionRequerida { get; set; }
        public decimal EvaluacionActual { get; set; }
        
        public int CapacitacionRequerida { get; set; }
        public int CapacitacionActual { get; set; }
        
        public int InvestigacionRequerida { get; set; }
        public int InvestigacionActual { get; set; }
        
        public bool CumpleTodosRequisitos { get; set; }
    }
    
    public class CrearSolicitudRequest
    {
        public int NivelActual { get; set; }
        public int NivelSolicitado { get; set; }
        public int TiempoRol { get; set; }
        public int NumeroObras { get; set; }
        public decimal PuntajeEvaluacion { get; set; }
        public int HorasCapacitacion { get; set; }
        public int TiempoInvestigacion { get; set; }
        public bool CumpleTiempoRol { get; set; }
        public bool CumpleObras { get; set; }
        public bool CumpleEvaluacion { get; set; }
        public bool CumpleCapacitacion { get; set; }
        public bool CumpleInvestigacion { get; set; }
        public string Observaciones { get; set; } = string.Empty;
        
        // Documentos seleccionados por tipo para conversión automática
        public Dictionary<string, List<string>> DocumentosSeleccionados { get; set; } = new();
        
        // Lista de IDs de documentos genéricos (legacy - mantener para compatibilidad)
        public List<Guid> DocumentosIds { get; set; } = new List<Guid>();
    }

    public class SolicitudAscensoDto
    {
        public int Id { get; set; }
        public string Estado { get; set; } = string.Empty;
        public DateTime FechaCreacion { get; set; }
        public int NivelActual { get; set; }
        public int NivelSolicitado { get; set; }
    }
}
