@page "/solicitudes"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using System.Net.Http.Json
@using SGA.Web.Extensions
@using SGA.Web.Services
@using SGA.Web.Models
@attribute [Authorize]
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService ToastService
@inject DocumentVisualizationService DocumentService

<div class="container mt-4">
    <h3>Mis Solicitudes de Ascenso</h3>
    
    <!-- Filtros y controles -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-funnel"></i></span>
                <select class="form-select" value="@selectedEstadoFilter" @onchange="@((ChangeEventArgs e) => { selectedEstadoFilter = e.Value?.ToString() ?? ""; FilterSolicitudes(); })">
                    <option value="">Todos los estados</option>
                    <option value="Pendiente">Pendiente</option>
                    <option value="EnProceso">En Proceso</option>
                    <option value="Aprobada">Aprobada</option>
                    <option value="Rechazada">Rechazada</option>
                </select>
            </div>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-primary" @onclick="() => NavigateToCreateSolicitud()" style="background-color: #8a1538; border-color: #8a1538;">
                <i class="bi bi-plus-circle"></i> Nueva Solicitud
            </button>
        </div>
    </div>
    
    <!-- Estadísticas rápidas -->
    @if (solicitudes?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card border-primary">
                    <div class="card-body text-center">
                        <h5 class="card-title text-primary">@solicitudes.Count</h5>
                        <p class="card-text">Total Solicitudes</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-warning">
                    <div class="card-body text-center">
                        <h5 class="card-title text-warning">@solicitudes.Count(s => s.Estado == "Pendiente")</h5>
                        <p class="card-text">Pendientes</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-success">
                    <div class="card-body text-center">
                        <h5 class="card-title text-success">@solicitudes.Count(s => s.Estado == "Aprobada")</h5>
                        <p class="card-text">Aprobadas</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-danger">
                    <div class="card-body text-center">
                        <h5 class="card-title text-danger">@solicitudes.Count(s => s.Estado == "Rechazada")</h5>
                        <p class="card-text">Rechazadas</p>
                    </div>
                </div>
            </div>
        </div>
    }
    
    <div class="card">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center" style="background-color: #8a1538!important;">
            <h5 class="mb-0">
                <i class="bi bi-clipboard-check"></i> Solicitudes
                @if (!string.IsNullOrEmpty(selectedEstadoFilter))
                {
                    <span class="badge bg-light text-dark ms-2">Filtrado: @selectedEstadoFilter</span>
                }
            </h5>
            <button class="btn btn-outline-light btn-sm" @onclick="LoadSolicitudes" disabled="@isLoading">
                <i class="bi bi-arrow-clockwise"></i> Actualizar
            </button>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else if (solicitudes == null || !solicitudes.Any())
            {
                <div class="alert alert-info" role="alert">
                    No tiene solicitudes de ascenso registradas. Utilice el botón "Nueva Solicitud" para crear una solicitud de ascenso.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Fecha</th>
                                <th>Estado</th>
                                <th>Nivel Actual</th>
                                <th>Nivel Solicitado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var solicitud in solicitudes)
                            {
                                <tr>
                                    <td>SOL-@solicitud.Id.ToString().Substring(0, 8)</td>
                                    <td>@solicitud.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <span class="badge @GetEstadoBadgeClass(solicitud.Estado)">
                                            @solicitud.Estado
                                        </span>
                                    </td>
                                    <td>@solicitud.NivelActual</td>
                                    <td>@solicitud.NivelSolicitado</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="() => ViewSolicitudDetails(solicitud.Id)"
                                                    title="Ver detalles de la solicitud">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            
                                            @if (solicitud.Documentos?.Any() == true)
                                            {
                                                <div class="btn-group" role="group">
                                                    <button type="button" 
                                                            class="btn btn-sm btn-outline-info dropdown-toggle" 
                                                            data-bs-toggle="dropdown" 
                                                            aria-expanded="false"
                                                            title="Gestionar documentos">
                                                        <i class="bi bi-files"></i>
                                                        <span class="badge bg-info rounded-pill ms-1">@solicitud.Documentos.Count</span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li>
                                                            <button class="dropdown-item" 
                                                                    @onclick="() => ShowDocumentManager(solicitud)">
                                                                <i class="bi bi-folder2-open me-2"></i>
                                                                Ver todos los documentos
                                                            </button>
                                                        </li>
                                                        <li><hr class="dropdown-divider"></li>
                                                        @foreach (var doc in solicitud.Documentos.Take(3))
                                                        {
                                                            <li>
                                                                <button class="dropdown-item" 
                                                                        @onclick="() => PreviewSingleDocument(doc)">
                                                                    <i class="bi bi-file-pdf text-danger me-2"></i>
                                                                    @TruncateFileName(doc.NombreArchivo, 25)
                                                                </button>
                                                            </li>
                                                        }
                                                        @if (solicitud.Documentos.Count > 3)
                                                        {
                                                            <li>
                                                                <span class="dropdown-item-text text-muted">
                                                                    <i class="bi bi-three-dots"></i>
                                                                    y @(solicitud.Documentos.Count - 3) más...
                                                                </span>
                                                            </li>
                                                        }
                                                        <li><hr class="dropdown-divider"></li>
                                                        <li>
                                                            <button class="dropdown-item text-success" 
                                                                    @onclick="() => DownloadAllSolicitudDocuments(solicitud.Documentos)">
                                                                <i class="bi bi-download me-2"></i>
                                                                Descargar todos
                                                            </button>
                                                        </li>
                                                    </ul>
                                                </div>
                                            }
                                            else
                                            {
                                                <button class="btn btn-sm btn-outline-secondary" 
                                                        disabled
                                                        title="Sin documentos">
                                                    <i class="bi bi-files"></i>
                                                </button>
                                            }
                                            
                                            <button class="btn btn-sm btn-outline-success" 
                                                    @onclick="() => ViewReportInModal(solicitud.Id)"
                                                    title="Ver reporte de la solicitud">
                                                <i class="bi bi-file-pdf"></i>
                                            </button>
                                            
                                            @if (solicitud.Estado == "Pendiente")
                                            {
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => ShowCancelConfirmation(solicitud)"
                                                        title="Cancelar solicitud">
                                                    <i class="bi bi-x-circle"></i>
                                                </button>
                                            }
                                            
                                            @if (solicitud.Estado == "Rechazada")
                                            {
                                                <button class="btn btn-sm btn-outline-primary" 
                                                        @onclick="() => ShowReenviarConfirmation(solicitud)"
                                                        title="Reenviar solicitud para revisión"
                                                        style="background-color: #8a1538; border-color: #8a1538; color: white;">
                                                    <i class="bi bi-arrow-repeat"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal de detalles de solicitud -->
@if (showDetails && selectedSolicitud != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" style="max-width: 90%; width: 90%;" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Solicitud #@selectedSolicitud.Id.ToString().Substring(0, 8)</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetailsModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>Información General</h6>
                            <ul class="list-group">
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Fecha de Solicitud:</span>
                                    <strong>@selectedSolicitud.FechaSolicitud.ToString("dd/MM/yyyy")</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Estado:</span>
                                    <span class="badge @GetEstadoBadgeClass(selectedSolicitud.Estado)">
                                        @selectedSolicitud.Estado
                                    </span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Nivel Actual:</span>
                                    <strong>@selectedSolicitud.NivelActual</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Nivel Solicitado:</span>
                                    <strong>@selectedSolicitud.NivelSolicitado</strong>
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Indicadores Académicos</h6>
                            <ul class="list-group">
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Tiempo en Rol Actual:</span>
                                    <strong>@((int)(selectedSolicitud.TiempoEnNivelDias / 30.0)) meses</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Número de Obras:</span>
                                    <strong>@selectedSolicitud.NumeroObrasAcademicas</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Puntaje Evaluación:</span>
                                    <strong>@selectedSolicitud.PromedioEvaluaciones.ToString("F1")%</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Horas Capacitación:</span>
                                    <strong>@selectedSolicitud.HorasCapacitacion horas</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Tiempo Investigación:</span>
                                    <strong>@selectedSolicitud.MesesInvestigacion meses</strong>
                                </li>
                            </ul>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(selectedSolicitud.MotivoRechazo))
                    {
                        <div class="alert alert-danger">
                            <h6><i class="bi bi-exclamation-triangle"></i> Motivo de Rechazo</h6>
                            <p class="mb-0">@selectedSolicitud.MotivoRechazo</p>
                        </div>
                    }
                    
                    <h6>Documentos Adjuntos</h6>
                    @if (selectedSolicitud.Documentos != null && selectedSolicitud.Documentos.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Documento</th>
                                        <th>Tamaño</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var documento in selectedSolicitud.Documentos)
                                    {
                                        <tr>
                                            <td>
                                                <i class="bi bi-file-pdf text-danger me-2"></i>
                                                @documento.NombreArchivo
                                            </td>
                                            <td>@FormatFileSize(documento.TamanoArchivo)</td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-primary btn-sm" 
                                                            @onclick="() => PreviewSingleDocument(documento)"
                                                            title="Vista previa">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            No hay documentos adjuntos a esta solicitud.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">
                        <i class="bi bi-x-lg"></i> Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para gestión de documentos -->
<DocumentManagerModal IsVisible="showDocumentManager" 
                     Documentos="currentSolicitudDocuments" 
                     OnClose="CloseDocumentManager" />

<!-- Modal para visualizar PDFs -->
<PdfViewerModal IsVisible="showPdfViewer"
               PdfUrl="@currentPdfUrl"
               FileName="@currentPdfFileName"
               IsLoading="@isPdfLoading"
               ErrorMessage="@pdfErrorMessage"
               OnClose="ClosePdfViewer"
               OnDownload="DownloadCurrentPdf"
               OnRetry="RetryLoadPdf" />

<!-- Modal para confirmar cancelación -->
<CancelSolicitudModal IsVisible="showCancelConfirmation"
                     Solicitud="@currentSolicitudInfo"
                     IsProcessing="@isCancelling"
                     OnConfirm="ConfirmCancelSolicitud"
                     OnCancel="CloseCancelConfirmation" />

<!-- Modal para reenvío con selección de documentos -->
@if (showReenviarFormulario && currentSolicitudInfo != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-arrow-repeat"></i> Reenviar Solicitud - Seleccionar Documentos
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseReenviarFormulario"></button>
                </div>
                <div class="modal-body">
                    <!-- Información de la solicitud -->
                    <div class="alert alert-info">
                        <h6>Solicitud: SOL-@currentSolicitudInfo.Id.ToString().Substring(0, 8)</h6>
                        <p>Seleccione los documentos que desea enviar con la solicitud reenviada.</p>
                    </div>

                    <!-- Componente selector de documentos -->
                    <DocumentosSelector @ref="reenviarDocumentosSelector"
                                        OnSelectionChanged="OnReenvioDocumentSelectionChanged" />

                    @if (totalDocumentosReenvio > 0)
                    {
                        <div class="alert alert-success mt-3">
                            <i class="bi bi-check-circle"></i>
                            Se han seleccionado <strong>@totalDocumentosReenvio</strong> documentos.
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning mt-3">
                            <i class="bi bi-exclamation-triangle"></i>
                            Debe seleccionar al menos un documento para reenviar la solicitud.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseReenviarFormulario" disabled="@isReenviandoConDocumentos">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmReenviarConDocumentos" 
                            disabled="@(isReenviandoConDocumentos || totalDocumentosReenvio == 0)"
                            style="background-color: #8a1538; border-color: #8a1538;">
                        @if (isReenviandoConDocumentos)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            @:Reenviando...
                        }
                        else
                        {
                            <i class="bi bi-arrow-repeat"></i>
                            @: Reenviar con Documentos Seleccionados
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<SGA.Web.Models.SolicitudAscensoDto>? solicitudes;
    private List<SGA.Web.Models.SolicitudAscensoDto>? solicitudesOriginales; // Para filtrado
    private bool isLoading = true;
    private bool showDetails = false;
    private SGA.Web.Models.SolicitudAscensoDto? selectedSolicitud;
    
    // Estados para filtros
    private string selectedEstadoFilter = "";
    
    // Estados para modales
    private bool showDocumentManager = false;
    private bool showPdfViewer = false;
    private bool showCancelConfirmation = false;
    
    // Estados para gestión de documentos
    private List<SGA.Web.Models.DocumentoDto> currentSolicitudDocuments = new();
    
    // Estados para PDF viewer
    private string? currentPdfUrl;
    private string? currentPdfFileName;
    private bool isPdfLoading = false;
    private string? pdfErrorMessage;
    private Guid? currentReportSolicitudId;
    
    // Estados para cancelación  
    private SolicitudData? currentSolicitudInfo;
    private bool isCancelling = false;
    
    // Estados para reenvío con documentos
    private bool showReenviarFormulario = false;
    private DocumentosSelector? reenviarDocumentosSelector;
    private int totalDocumentosReenvio = 0;
    private bool isReenviandoConDocumentos = false;
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Iniciando carga de solicitudes...");
        await LoadSolicitudes();
    }
    
    private async Task LoadSolicitudes()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetAsync("api/solicitudascenso/mis-solicitudes");
            
            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var solicitudesData = await response.DeserializeJsonSafeAsync<List<SGA.Web.Models.SolicitudAscensoDto>>();
                    if (solicitudesData != null)
                    {
                        solicitudes = solicitudesData;
                        solicitudesOriginales = solicitudesData.ToList(); // Guardar copia original para filtros
                        Console.WriteLine($"Solicitudes cargadas: {solicitudes.Count}");
                        
                        foreach (var sol in solicitudes)
                        {
                            Console.WriteLine($"Solicitud {sol.Id}: {sol.Estado}, Documentos: {sol.Documentos?.Count ?? 0}");
                        }
                    }
                    else
                    {
                        solicitudes = new List<SGA.Web.Models.SolicitudAscensoDto>();
                        solicitudesOriginales = new List<SGA.Web.Models.SolicitudAscensoDto>();
                    }
                }
                catch (Exception ex)
                {
                    solicitudes = new List<SGA.Web.Models.SolicitudAscensoDto>();
                    solicitudesOriginales = new List<SGA.Web.Models.SolicitudAscensoDto>();
                    ToastService.ShowError($"Error al procesar datos de solicitudes: {ex.Message}");
                    Console.WriteLine($"Error deserialización: {ex}");
                }
            }
            else
            {
                solicitudes = new List<SGA.Web.Models.SolicitudAscensoDto>();
                solicitudesOriginales = new List<SGA.Web.Models.SolicitudAscensoDto>();
                var errorMessage = await response.GetErrorMessageAsync();
                ToastService.ShowError($"Error al cargar solicitudes: {response.StatusCode} - {errorMessage}");
                Console.WriteLine($"Error HTTP: {response.StatusCode} - {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            solicitudes = new List<SGA.Web.Models.SolicitudAscensoDto>();
            solicitudesOriginales = new List<SGA.Web.Models.SolicitudAscensoDto>();
            ToastService.ShowError($"Error al cargar solicitudes: {ex.Message}");
            Console.WriteLine($"Error general: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void NavigateToCreateSolicitud()
    {
        NavigationManager.NavigateTo("/solicitudes/nueva");
    }
    
    private void FilterSolicitudes()
    {
        if (solicitudesOriginales == null)
        {
            solicitudes = new List<SGA.Web.Models.SolicitudAscensoDto>();
            return;
        }
        
        if (string.IsNullOrEmpty(selectedEstadoFilter))
        {
            solicitudes = solicitudesOriginales.ToList();
        }
        else
        {
            solicitudes = solicitudesOriginales.Where(s => s.Estado == selectedEstadoFilter).ToList();
        }
        
        StateHasChanged();
    }
    
    private async Task ViewSolicitudDetails(Guid solicitudId)
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetAsync($"api/solicitudascenso/{solicitudId}");
            
            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var solicitudDetalle = await response.DeserializeJsonSafeAsync<SGA.Web.Models.SolicitudAscensoDto>();
                    if (solicitudDetalle != null)
                    {
                        selectedSolicitud = solicitudDetalle;
                        await CargarDocumentosSolicitud(solicitudId);
                        showDetails = true;
                        StateHasChanged();
                    }
                }
                catch (Exception ex)
                {
                    ToastService.ShowError($"Error al procesar detalles de la solicitud: {ex.Message}");
                    Console.WriteLine($"Error deserialización detalles: {ex}");
                }
            }
            else
            {
                var errorMessage = await response.GetErrorMessageAsync();
                ToastService.ShowError($"Error al cargar detalles: {response.StatusCode} - {errorMessage}");
                Console.WriteLine($"Error HTTP detalles: {response.StatusCode} - {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar detalles de la solicitud: {ex.Message}");
            Console.WriteLine($"Error general detalles: {ex}");
        }
    }
    
    private async Task CargarDocumentosSolicitud(Guid solicitudId)
    {
        try
        {
            Console.WriteLine($"Cargando documentos para solicitud: {solicitudId}");
            
            var documentosResponse = await Http.GetAsync($"api/solicitudascenso/{solicitudId}/documentos");
            
            if (documentosResponse.IsSuccessStatusCode)
            {
                var documentos = await documentosResponse.DeserializeJsonSafeAsync<List<SGA.Web.Models.DocumentoDto>>();
                if (documentos != null && selectedSolicitud != null)
                {
                    selectedSolicitud.Documentos = documentos;
                    Console.WriteLine($"Documentos cargados: {documentos.Count}");
                }
                else
                {
                    Console.WriteLine("No se encontraron documentos o selectedSolicitud es null");
                    if (selectedSolicitud != null)
                    {
                        selectedSolicitud.Documentos = new List<SGA.Web.Models.DocumentoDto>();
                    }
                }
            }
            else
            {
                Console.WriteLine($"Error al cargar documentos: {documentosResponse.StatusCode}");
                var errorContent = await documentosResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Error content: {errorContent}");
                
                if (selectedSolicitud != null)
                {
                    selectedSolicitud.Documentos = new List<SGA.Web.Models.DocumentoDto>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Excepción al cargar documentos: {ex.Message}");
            if (selectedSolicitud != null)
            {
                selectedSolicitud.Documentos = new List<SGA.Web.Models.DocumentoDto>();
            }
        }
    }
    
    private void CloseDetailsModal()
    {
        showDetails = false;
        selectedSolicitud = null;
    }
    
    #region Gestión de Documentos
    
    private void ShowDocumentManager(SGA.Web.Models.SolicitudAscensoDto solicitud)
    {
        currentSolicitudDocuments = solicitud.Documentos?.ToList() ?? new List<SGA.Web.Models.DocumentoDto>();
        showDocumentManager = true;
        showDetails = false; // Cerrar modal de detalles si está abierto
    }
    
    private void CloseDocumentManager()
    {
        showDocumentManager = false;
        currentSolicitudDocuments.Clear();
    }
    
    private async Task DownloadAllSolicitudDocuments(List<SGA.Web.Models.DocumentoDto> documentos)
    {
        if (!documentos.Any()) return;

        ToastService.ShowInfo($"Descargando {documentos.Count} documentos...");
        
        var successCount = 0;
        foreach (var documento in documentos)
        {
            try
            {
                var success = await DocumentService.DescargarDocumentoSolicitud(documento.Id);
                if (success) successCount++;
                
                // Pausa entre descargas
                await Task.Delay(500);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error descargando {documento.NombreArchivo}: {ex.Message}");
            }
        }

        if (successCount == documentos.Count)
        {
            ToastService.ShowSuccess($"Todos los documentos descargados correctamente ({successCount})");
        }
        else if (successCount > 0)
        {
            ToastService.ShowWarning($"Descargados {successCount} de {documentos.Count} documentos");
        }
        else
        {
            ToastService.ShowError("No se pudieron descargar los documentos");
        }
    }
    
    #endregion
    
    #region Visualización de PDFs y Reportes
    
    private async Task ViewReportInModal(Guid solicitudId)
    {
        currentReportSolicitudId = solicitudId;
        isPdfLoading = true;
        pdfErrorMessage = null;
        currentPdfUrl = null;
        currentPdfFileName = null;
        showPdfViewer = true;
        showDetails = false; // Cerrar modal de detalles si está abierto
        
        StateHasChanged();
        
        try
        {
            var result = await DocumentService.VisualizarReporteSolicitud(solicitudId);
            
            if (result.Success)
            {
                currentPdfUrl = result.PdfUrl;
                currentPdfFileName = result.FileName;
                pdfErrorMessage = null;
            }
            else
            {
                pdfErrorMessage = result.ErrorMessage ?? "Error al cargar el reporte";
            }
        }
        catch (Exception ex)
        {
            pdfErrorMessage = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isPdfLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task DownloadReport(Guid solicitudId)
    {
        try
        {
            ToastService.ShowInfo("Generando reporte...");
            var success = await DocumentService.DescargarReporteSolicitud(solicitudId);
            
            if (!success)
            {
                ToastService.ShowError("Error al descargar el reporte");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al descargar reporte: {ex.Message}");
        }
    }
    
    private void ClosePdfViewer()
    {
        showPdfViewer = false;
        currentPdfUrl = null;
        currentPdfFileName = null;
        pdfErrorMessage = null;
        isPdfLoading = false;
        currentReportSolicitudId = null;
    }
    
    private async Task DownloadCurrentPdf()
    {
        if (currentReportSolicitudId.HasValue)
        {
            // Es un reporte de solicitud
            await DownloadReport(currentReportSolicitudId.Value);
        }
        else if (!string.IsNullOrEmpty(currentPdfFileName) && !string.IsNullOrEmpty(currentPdfUrl))
        {
            // Es un documento individual
            try
            {
                ToastService.ShowInfo($"Descargando {currentPdfFileName}...");
                
                // Como backup, podemos crear una descarga directa desde el PDF URL
                await JSRuntime.InvokeVoidAsync("downloadFromDataUrl", currentPdfUrl, currentPdfFileName);
                ToastService.ShowSuccess($"Documento {currentPdfFileName} descargado correctamente");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error al descargar: {ex.Message}");
            }
        }
    }
    
    private async Task RetryLoadPdf()
    {
        if (currentReportSolicitudId.HasValue)
        {
            await ViewReportInModal(currentReportSolicitudId.Value);
        }
    }
    
    private async Task PreviewSingleDocument(SGA.Web.Models.DocumentoDto documento)
    {
        currentReportSolicitudId = null;
        isPdfLoading = true;
        pdfErrorMessage = null;
        currentPdfUrl = null;
        currentPdfFileName = documento.NombreArchivo;
        showPdfViewer = true;
        showDetails = false; // Cerrar modal de detalles si está abierto
        
        StateHasChanged();
        
        try
        {
            var result = await DocumentService.VisualizarDocumentoSolicitud(documento.Id);
            
            if (result.Success)
            {
                currentPdfUrl = result.PdfUrl;
                currentPdfFileName = result.FileName;
                pdfErrorMessage = null;
            }
            else
            {
                pdfErrorMessage = result.ErrorMessage ?? "Error al cargar el documento";
            }
        }
        catch (Exception ex)
        {
            pdfErrorMessage = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isPdfLoading = false;
            StateHasChanged();
        }
    }
    
    #endregion
    
    #region Cancelación de Solicitudes
    
    private void ShowCancelConfirmation(SGA.Web.Models.SolicitudAscensoDto solicitud)
    {
        currentSolicitudInfo = new SolicitudData
        {
            Id = solicitud.Id,
            NivelActual = solicitud.NivelActual,
            NivelSolicitado = solicitud.NivelSolicitado,
            Estado = solicitud.Estado,
            FechaSolicitud = solicitud.FechaSolicitud
        };
        
        showCancelConfirmation = true;
        showDetails = false; // Cerrar modal de detalles si está abierto
    }
    
    private void CloseCancelConfirmation()
    {
        showCancelConfirmation = false;
        currentSolicitudInfo = null;
        isCancelling = false;
    }
    
    private async Task ConfirmCancelSolicitud()
    {
        if (currentSolicitudInfo == null) return;
        
        isCancelling = true;
        StateHasChanged();
        
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.DeleteAsync($"api/solicitudascenso/{currentSolicitudInfo.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Solicitud cancelada exitosamente");
                CloseCancelConfirmation();
                await LoadSolicitudes(); // Recargar la lista
            }
            else
            {
                var errorMessage = await response.GetErrorMessageAsync();
                ToastService.ShowError($"Error al cancelar solicitud: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cancelar solicitud: {ex.Message}");
        }
        finally
        {
            isCancelling = false;
            StateHasChanged();
        }
    }
    
    #endregion
    
    #region Reenvío de Solicitudes con Documentos
    
    private void ShowReenviarConfirmation(SGA.Web.Models.SolicitudAscensoDto solicitud)
    {
        currentSolicitudInfo = new SolicitudData
        {
            Id = solicitud.Id,
            NivelActual = solicitud.NivelActual,
            NivelSolicitado = solicitud.NivelSolicitado,
            Estado = solicitud.Estado,
            FechaSolicitud = solicitud.FechaSolicitud
        };
        
        showReenviarFormulario = true;
        showDetails = false; // Cerrar modal de detalles si está abierto
    }
    
    private void CloseReenviarFormulario()
    {
        showReenviarFormulario = false;
        currentSolicitudInfo = null;
        totalDocumentosReenvio = 0;
        reenviarDocumentosSelector = null;
        isReenviandoConDocumentos = false;
    }
    
    private void OnReenvioDocumentSelectionChanged(Dictionary<string, bool> seleccionados)
    {
        if (reenviarDocumentosSelector != null)
        {
            totalDocumentosReenvio = reenviarDocumentosSelector.GetTotalSelectedCount();
        }
        StateHasChanged();
    }
    
    private async Task ConfirmReenviarConDocumentos()
    {
        if (currentSolicitudInfo == null || reenviarDocumentosSelector == null) return;
        
        isReenviandoConDocumentos = true;
        StateHasChanged();
        
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var documentosSeleccionados = reenviarDocumentosSelector.GetSelectedDocuments();
            var request = new { DocumentosSeleccionados = documentosSeleccionados };
            
            var response = await Http.PutAsJsonAsync($"api/solicitudascenso/{currentSolicitudInfo.Id}/reenviar-con-documentos", request);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Solicitud reenviada exitosamente con los nuevos documentos");
                CloseReenviarFormulario();
                await LoadSolicitudes();
            }
            else
            {
                var errorMessage = await response.GetErrorMessageAsync();
                ToastService.ShowError($"Error al reenviar solicitud: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al reenviar solicitud: {ex.Message}");
        }
        finally
        {
            isReenviandoConDocumentos = false;
            StateHasChanged();
        }
    }
    
    #endregion
    
    #region Métodos de utilidad
    
    private string GetEstadoBadgeClass(string estado)
    {
        return estado switch
        {
            "Pendiente" => "bg-warning",
            "EnProceso" => "bg-info",
            "Aprobada" => "bg-success",
            "Rechazada" => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private string TruncateFileName(string fileName, int maxLength)
    {
        if (fileName.Length <= maxLength) return fileName;
        
        var extension = Path.GetExtension(fileName);
        var nameWithoutExtension = Path.GetFileNameWithoutExtension(fileName);
        var truncatedName = nameWithoutExtension.Substring(0, Math.Max(0, maxLength - extension.Length - 3));
        
        return $"{truncatedName}...{extension}";
    }
    
    #endregion
    
}
