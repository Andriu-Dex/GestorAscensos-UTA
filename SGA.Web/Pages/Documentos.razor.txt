@page "/documentos"
@attribute [Authorize]
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h3>Gestión de Documentos</h3>
    
    <!-- Nueva sección para Obras Académicas -->
    <div class="card mb-4">
        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Obras Académicas</h5>
            <button class="btn btn-light" @onclick="() => ShowObrasModal()">
                <i class="bi bi-plus-circle"></i> Agregar Obras
            </button>
        </div>
        <div class="card-body">
            @if (isLoadingObras)
            {
                <div class="d-flex justify-content-center my-3">
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">Cargando obras...</span>
                    </div>
                </div>
            }
            else if (obrasAcademicas == null || !obrasAcademicas.Any())
            {
                <div class="alert alert-info" role="alert">
                    No tiene obras académicas registradas. Utilice el botón "Agregar Obras" para solicitar la inclusión de nuevas obras.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Título</th>
                                <th>Tipo</th>
                                <th>Fecha Publicación</th>
                                <th>Revista/Editorial</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var obra in obrasAcademicas)
                            {
                                <tr>
                                    <td>@obra.Titulo</td>
                                    <td>@obra.TipoObra</td>
                                    <td>@obra.FechaPublicacion.ToString("dd/MM/yyyy")</td>
                                    <td>@(obra.Revista ?? obra.Editorial ?? "N/A")</td>
                                    <td>
                                        <span class="badge bg-success">Aprobada</span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            
            @if (solicitudesPendientes != null && solicitudesPendientes.Any())
            {
                <hr />
                <h6>Mis Solicitudes de Obras</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Título</th>
                                <th>Tipo</th>
                                <th>Fecha Solicitud</th>
                                <th>Estado</th>
                                <th>Observaciones</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var solicitud in solicitudesPendientes)
                            {
                                <tr>
                                    <td>@solicitud.Titulo</td>
                                    <td>@solicitud.TipoObra</td>
                                    <td>@solicitud.FechaCreacion.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        @if (solicitud.Estado == "Pendiente")
                                        {
                                            <span class="badge bg-warning text-dark">Pendiente</span>
                                        }
                                        else if (solicitud.Estado == "Aprobada")
                                        {
                                            <span class="badge bg-success">Aprobada</span>
                                        }
                                        else if (solicitud.Estado == "Rechazada")
                                        {
                                            <span class="badge bg-danger">Rechazada</span>
                                        }
                                    </td>
                                    <td>
                                        @if (solicitud.Estado == "Aprobada" && !string.IsNullOrEmpty(solicitud.ComentariosRevision))
                                        {
                                            <small class="text-success">@solicitud.ComentariosRevision</small>
                                        }
                                        else if (solicitud.Estado == "Rechazada")
                                        {
                                            @if (!string.IsNullOrEmpty(solicitud.MotivoRechazo))
                                            {
                                                <small class="text-danger"><strong>Motivo:</strong> @solicitud.MotivoRechazo</small>
                                            }
                                            @if (!string.IsNullOrEmpty(solicitud.ComentariosRevision))
                                            {
                                                <br><small class="text-muted">@solicitud.ComentariosRevision</small>
                                            }
                                            <br><button type="button" class="btn btn-link btn-sm p-0 text-danger" 
                                                       @onclick="() => MostrarMotivoRechazo(solicitud)">
                                                <i class="bi bi-info-circle"></i> Ver detalles del rechazo
                                            </button>
                                        }
                                        else if (solicitud.Estado == "Pendiente")
                                        {
                                            <small class="text-muted">En revisión</small>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            @if (PuedeVisualizar(solicitud.Estado) && solicitud.SolicitudId.HasValue)
                                            {
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        @onclick="() => VisualizarDocumento(solicitud.SolicitudId.Value)"
                                                        title="Ver documento">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            }
                                            
                                            @if (PuedeDescargar(solicitud.Estado) && solicitud.SolicitudId.HasValue)
                                            {
                                                <button type="button" class="btn btn-outline-success btn-sm" 
                                                        @onclick="() => DescargarDocumento(solicitud.SolicitudId.Value)"
                                                        title="Descargar documento">
                                                    <i class="bi bi-download"></i>
                                                </button>
                                            }
                                            
                                            @if (PuedeEditarMetadatos(solicitud.Estado))
                                            {
                                                <button type="button" class="btn btn-outline-warning btn-sm" 
                                                        @onclick="() => MostrarEditarMetadatos(solicitud)"
                                                        title="Editar metadatos">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                            }
                                            
                                            @if (PuedeReemplazarArchivo(solicitud.Estado))
                                            {
                                                <button type="button" class="btn btn-outline-info btn-sm" 
                                                        @onclick="() => MostrarReemplazarArchivo(solicitud)"
                                                        title="Reemplazar archivo">
                                                    <i class="bi bi-file-arrow-up"></i>
                                                </button>
                                            }
                                            
                                            @if (PuedeAgregarComentario(solicitud.Estado))
                                            {
                                                <button type="button" class="btn btn-outline-secondary btn-sm" 
                                                        @onclick="() => MostrarAgregarComentario(solicitud)"
                                                        title="Agregar comentario">
                                                    <i class="bi bi-chat-dots"></i>
                                                </button>
                                            }
                                            
                                            @if (PuedeReenviar(solicitud.Estado) && solicitud.SolicitudId.HasValue)
                                            {
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        @onclick="() => ReenviarSolicitud(solicitud.SolicitudId.Value)"
                                                        title="Reenviar para revisión">
                                                    <i class="bi bi-arrow-clockwise"></i>
                                                </button>
                                            }
                                            
                                            @if (PuedeEliminar(solicitud.Estado) && solicitud.SolicitudId.HasValue)
                                            {
                                                <button type="button" class="btn btn-outline-danger btn-sm" 
                                                        @onclick="() => EliminarSolicitud(solicitud.SolicitudId.Value)"
                                                        title="Eliminar solicitud">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
    
    <!-- Modal para Ver Motivo de Rechazo -->
    @if (showMotivoRechazoModal && solicitudSeleccionada != null)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Motivo de Rechazo</h5>
                        <button type="button" class="btn-close" @onclick="CerrarMotivoRechazo"></button>
                    </div>
                    <div class="modal-body">
                        <h6>@solicitudSeleccionada.Titulo</h6>
                        @if (!string.IsNullOrEmpty(solicitudSeleccionada.MotivoRechazo))
                        {
                            <div class="alert alert-danger">
                                <strong>Motivo del rechazo:</strong><br>
                                @solicitudSeleccionada.MotivoRechazo
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(solicitudSeleccionada.ComentariosRevision))
                        {
                            <div class="alert alert-info">
                                <strong>Comentarios adicionales:</strong><br>
                                @solicitudSeleccionada.ComentariosRevision
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarMotivoRechazo">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal para Editar Metadatos -->
    @if (showEditarMetadatosModal && solicitudSeleccionada != null)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Editar Metadatos - @solicitudSeleccionada.Titulo</h5>
                        <button type="button" class="btn-close" @onclick="CerrarEditarMetadatos"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="row">
                                <div class="col-md-12 mb-3">
                                    <label class="form-label">Título</label>
                                    <input type="text" class="form-control" @bind="metadatosEdicion.Titulo" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Tipo de Obra</label>
                                    <select class="form-select" @bind="metadatosEdicion.TipoObra">
                                        <option value="">Seleccionar...</option>
                                        <option value="Libro">Libro</option>
                                        <option value="Artículo Científico">Artículo Científico</option>
                                        <option value="Capítulo de Libro">Capítulo de Libro</option>
                                        <option value="Ponencia">Ponencia</option>
                                        <option value="Otro">Otro</option>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Fecha de Publicación</label>
                                    <input type="date" class="form-control" @bind="metadatosEdicion.FechaPublicacion" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Editorial</label>
                                    <input type="text" class="form-control" @bind="metadatosEdicion.Editorial" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Revista</label>
                                    <input type="text" class="form-control" @bind="metadatosEdicion.Revista" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">ISBN/ISSN</label>
                                    <input type="text" class="form-control" @bind="metadatosEdicion.ISBN_ISSN" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">DOI</label>
                                    <input type="text" class="form-control" @bind="metadatosEdicion.DOI" />
                                </div>
                                <div class="col-md-12 mb-3">
                                    <label class="form-label">Autores</label>
                                    <input type="text" class="form-control" @bind="metadatosEdicion.Autores" />
                                </div>
                                <div class="col-md-12 mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="metadatosEdicion.EsIndexada" />
                                        <label class="form-check-label">¿Es indexada?</label>
                                    </div>
                                </div>
                                @if (metadatosEdicion.EsIndexada == true)
                                {
                                    <div class="col-md-12 mb-3">
                                        <label class="form-label">Índice de Indexación</label>
                                        <input type="text" class="form-control" @bind="metadatosEdicion.IndiceIndexacion" />
                                    </div>
                                }
                                <div class="col-md-12 mb-3">
                                    <label class="form-label">Descripción</label>
                                    <textarea class="form-control" rows="3" @bind="metadatosEdicion.Descripcion"></textarea>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarEditarMetadatos">Cancelar</button>
                        <button type="button" class="btn btn-primary" @onclick="GuardarMetadatos" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                                <span> Guardando...</span>
                            }
                            else
                            {
                                <span>Guardar Cambios</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal para Reemplazar Archivo -->
    @if (showReemplazarArchivoModal && solicitudSeleccionada != null)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Reemplazar Archivo - @solicitudSeleccionada.Titulo</h5>
                        <button type="button" class="btn-close" @onclick="CerrarReemplazarArchivo"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>Importante:</strong> Al reemplazar el archivo, la solicitud será enviada nuevamente para revisión.
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Seleccionar nuevo archivo PDF</label>
                            <InputFile @ref="inputFileReemplazo" OnChange="OnFileChangeReemplazo" class="form-control" accept=".pdf" />
                            @if (!string.IsNullOrEmpty(archivoReemplazoNombre))
                            {
                                <div class="mt-2">
                                    <small class="text-success">Archivo seleccionado: @archivoReemplazoNombre</small>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarReemplazarArchivo">Cancelar</button>
                        <button type="button" class="btn btn-warning" @onclick="ReemplazarArchivo" 
                                disabled="@(isProcessing || string.IsNullOrEmpty(archivoReemplazoContenido))">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                                <span> Reemplazando...</span>
                            }
                            else
                            {
                                <span>Reemplazar Archivo</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal para Agregar Comentario -->
    @if (showAgregarComentarioModal && solicitudSeleccionada != null)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Agregar Comentario - @solicitudSeleccionada.Titulo</h5>
                        <button type="button" class="btn-close" @onclick="CerrarAgregarComentario"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i>
                            Este comentario será visible para el administrador que revise la solicitud.
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Comentario para el evaluador</label>
                            <textarea class="form-control" rows="4" @bind="nuevoComentario" 
                                      placeholder="Agregue aclaraciones o información adicional sobre su obra académica..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarAgregarComentario">Cancelar</button>
                        <button type="button" class="btn btn-primary" @onclick="GuardarComentario" 
                                disabled="@(isProcessing || string.IsNullOrWhiteSpace(nuevoComentario))">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                                <span> Agregando...</span>
                            }
                            else
                            {
                                <span>Agregar Comentario</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Modal para Visualizar PDF -->
    @if (showVisualizarPDFModal && !string.IsNullOrEmpty(pdfUrl))
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@pdfNombreArchivo</h5>
                        <button type="button" class="btn-close" @onclick="CerrarVisualizarPDF"></button>
                    </div>
                    <div class="modal-body p-0">
                        @if (isLoadingPDF)
                        {
                            <div class="d-flex justify-content-center align-items-center" style="height: 500px;">
                                <div class="text-center">
                                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                        <span class="visually-hidden">Cargando PDF...</span>
                                    </div>
                                    <p class="mt-3">Cargando documento...</p>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(errorPDF))
                        {
                            <div class="alert alert-danger m-3" role="alert">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <strong>Error al cargar PDF:</strong> @errorPDF
                            </div>
                        }
                        else
                        {
                            <div class="pdf-viewer-container">
                                <iframe src="@pdfUrl" style="width: 100%; height: 600px; border: none;" frameborder="0"></iframe>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarVisualizarPDF">
                            <i class="bi bi-x-circle me-2"></i>Cerrar
                        </button>
                        @if (!string.IsNullOrEmpty(pdfUrl) && !isLoadingPDF && solicitudSeleccionada?.SolicitudId.HasValue == true)
                        {
                            <button type="button" class="btn btn-primary" @onclick="() => DescargarDocumento(solicitudSeleccionada!.SolicitudId!.Value)">
                                <i class="bi bi-download me-2"></i>Descargar PDF
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
    
    <!-- Nueva sección para Certificados de Capacitación -->
    <div class="card mb-4">
        <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Certificados de Capacitación</h5>
            <button class="btn btn-light" @onclick="() => ShowCertificadosModal()">
                <i class="bi bi-plus-circle"></i> Agregar Certificados
            </button>
        </div>
        <div class="card-body">
            @if (isLoadingCertificados)
            {
                <div class="d-flex justify-content-center my-3">
                    <div class="spinner-border text-info" role="status">
                        <span class="visually-hidden">Cargando certificados...</span>
                    </div>
                </div>
            }
            else if (solicitudesCertificados == null || !solicitudesCertificados.Any())
            {
                <div class="alert alert-info" role="alert">
                    No tiene certificados de capacitación registrados. Utilice el botón "Agregar Certificados" para solicitar la inclusión de nuevos certificados.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Nombre del Curso</th>
                                <th>Institución</th>
                                <th>Tipo</th>
                                <th>Horas</th>
                                <th>Fecha Inicio</th>
                                <th>Fecha Fin</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var certificado in solicitudesCertificados)
                            {
                                <tr>
                                    <td>@certificado.NombreCurso</td>
                                    <td>@certificado.InstitucionOfertante</td>
                                    <td>@certificado.TipoCapacitacion</td>
                                    <td>@certificado.HorasDuracion</td>
                                    <td>@certificado.FechaInicio.ToString("dd/MM/yyyy")</td>
                                    <td>@certificado.FechaFin.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        @if (certificado.Estado == "Pendiente")
                                        {
                                            <span class="badge bg-warning text-dark">Pendiente</span>
                                        }
                                        else if (certificado.Estado == "Aprobada")
                                        {
                                            <span class="badge bg-success">Aprobada</span>
                                        }
                                        else if (certificado.Estado == "Rechazada")
                                        {
                                            <span class="badge bg-danger">Rechazada</span>
                                        }
                                        else if (certificado.Estado == "En Proceso")
                                        {
                                            <span class="badge bg-primary">En Proceso</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            @if (PuedeVisualizarCertificado(certificado.Estado))
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-primary" 
                                                        @onclick="() => VisualizarCertificado(certificado.Id)" 
                                                        title="Ver certificado">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            }
                                            @if (PuedeEditarCertificado(certificado.Estado))
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-warning" 
                                                        @onclick="() => EditarCertificado(certificado)" 
                                                        title="Editar certificado">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                            }
                                            @if (PuedeReemplazarArchivoCertificado(certificado.Estado))
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-info" 
                                                        @onclick="() => ReemplazarArchivoCertificado(certificado)" 
                                                        title="Reemplazar archivo">
                                                    <i class="bi bi-file-earmark-arrow-up"></i>
                                                </button>
                                            }
                                            @if (PuedeEliminarCertificado(certificado.Estado))
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => EliminarCertificado(certificado.Id)" 
                                                        title="Eliminar certificado">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                            @if (certificado.Estado == "Rechazada")
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-secondary" 
                                                        @onclick="() => VerMotivoRechazoCertificado(certificado)" 
                                                        title="Ver motivo de rechazo">
                                                    <i class="bi bi-info-circle"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
    
    <div class="card">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Mis Documentos</h5>
            <button class="btn btn-light" @onclick="() => ShowUploadModal()">
                <i class="bi bi-upload"></i> Subir Documento
            </button>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center my-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else if (documentos == null || !documentos.Any())
            {
                <div class="alert alert-info" role="alert">
                    No tiene documentos registrados. Utilice el botón "Subir Documento" para añadir sus documentos.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Tipo</th>
                                <th>Fecha</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var doc in documentos)
                            {
                                <tr>
                                    <td>@doc.Nombre</td>
                                    <td>@doc.TipoDocumento?.Nombre</td>
                                    <td>@doc.FechaCreacion.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        @if (doc.Verificado)
                                        {
                                            <span class="badge bg-success">Verificado</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning text-dark">Pendiente</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-primary" @onclick="() => DownloadDocument(doc)">
                                                <i class="bi bi-download"></i>
                                            </button>
                                            <button class="btn btn-sm btn-info" @onclick="() => ViewDocument(doc)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            @if (!doc.Verificado)
                                            {
                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteDocument(doc.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal de Carga -->
@if (showUploadModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Subir Documento</h5>
                    <button type="button" class="btn-close" @onclick="CloseUploadModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="documentName" class="form-label">Nombre del Documento</label>
                        <input type="text" class="form-control" id="documentName" @bind="newDocumento.Nombre" />
                    </div>
                    <div class="mb-3">
                        <label for="documentType" class="form-label">Tipo de Documento</label>
                        <select class="form-select" id="documentType" @bind="newDocumento.TipoDocumentoId">
                            <option value="0">Seleccione un tipo...</option>
                            @if (tiposDocumento != null)
                            {
                                @foreach (var tipo in tiposDocumento)
                                {
                                    <option value="@tipo.Id">@tipo.Nombre</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="documentFile" class="form-label">Archivo</label>
                        <InputFile id="documentFile" OnChange="OnInputFileChange" class="form-control" accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" />
                        @if (uploadProgress > 0 && uploadProgress < 100)
                        {
                            <div class="progress mt-2">
                                <div class="progress-bar" role="progressbar" style="width: @uploadProgress%;" aria-valuenow="@uploadProgress" aria-valuemin="0" aria-valuemax="100">@uploadProgress%</div>
                            </div>
                        }
                    </div>
                    <div class="mb-3">
                        <label for="documentDescription" class="form-label">Descripción</label>
                        <textarea class="form-control" id="documentDescription" rows="3" @bind="newDocumento.Descripcion"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseUploadModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="UploadDocument" disabled="@(!isFileSelected || isUploading)">
                        @if (isUploading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Subiendo...</span>
                        }
                        else
                        {
                            <span>Subir</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Visualización -->
@if (showViewModal && selectedDocumento != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedDocumento.Nombre</h5>
                    <button type="button" class="btn-close" @onclick="CloseViewModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    @if (viewUrl != null)
                    {
                        <iframe src="@viewUrl" style="width: 100%; height: 500px;" frameborder="0"></iframe>
                    }
                    else
                    {
                        <div class="alert alert-warning">No se puede previsualizar este tipo de documento.</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseViewModal">Cerrar</button>
                    <button type="button" class="btn btn-primary" @onclick="() => DownloadDocument(selectedDocumento)">Descargar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Obras Académicas -->
@if (showObrasModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar Obras Académicas</h5>
                    <button type="button" class="btn-close" @onclick="CloseObrasModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Comentarios adicionales</label>
                        <textarea class="form-control" rows="2" @bind="comentariosSolicitud" placeholder="Comentarios opcionales sobre la solicitud..."></textarea>
                    </div>
                    
                    @for (int i = 0; i < nuevasObras.Count; i++)
                    {
                        var index = i;
                        <div class="card mb-3">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Obra Académica @(index + 1)</h6>
                                @if (nuevasObras.Count > 1)
                                {
                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoverObra(index)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                }
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-8 mb-3">
                                        <label class="form-label">Título *</label>
                                        <input type="text" class="form-control" @bind="nuevasObras[index].Titulo" required />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Tipo de Obra *</label>
                                        <select class="form-select" @bind="nuevasObras[index].TipoObra" required>
                                            <option value="">Seleccione...</option>
                                            <option value="Artículo">Artículo</option>
                                            <option value="Libro">Libro</option>
                                            <option value="Capítulo de Libro">Capítulo de Libro</option>
                                            <option value="Tesis">Tesis</option>
                                            <option value="Ponencia">Ponencia</option>
                                            <option value="Otro">Otro</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Fecha de Publicación *</label>
                                        <input type="date" class="form-control" @bind="nuevasObras[index].FechaPublicacion" required />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Revista</label>
                                        <input type="text" class="form-control" @bind="nuevasObras[index].Revista" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Editorial</label>
                                        <input type="text" class="form-control" @bind="nuevasObras[index].Editorial" />
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">ISBN/ISSN</label>
                                        <input type="text" class="form-control" @bind="nuevasObras[index].ISBN_ISSN" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">DOI</label>
                                        <input type="text" class="form-control" @bind="nuevasObras[index].DOI" placeholder="10.xxxx/xxxxx" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <div class="form-check mt-4">
                                            <input class="form-check-input" type="checkbox" @bind="nuevasObras[index].EsIndexada" />
                                            <label class="form-check-label">Es indexada</label>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Autores</label>
                                    <input type="text" class="form-control" @bind="nuevasObras[index].Autores" placeholder="Autor 1, Autor 2, etc." />
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Descripción</label>
                                    <textarea class="form-control" rows="2" @bind="nuevasObras[index].Descripcion"></textarea>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Archivo PDF (opcional)</label>
                                    <InputFile OnChange="@((e) => OnObraFileChange(e, index))" class="form-control" accept=".pdf" />
                                    @if (!string.IsNullOrEmpty(nuevasObras[index].ArchivoNombre))
                                    {
                                        <small class="text-success">
                                            <i class="bi bi-check-circle"></i> Archivo: @nuevasObras[index].ArchivoNombre
                                        </small>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    
                    <div class="d-grid gap-2 mb-3">
                        <button type="button" class="btn btn-outline-primary" @onclick="AgregarOtraObra">
                            <i class="bi bi-plus-circle"></i> Añadir otra obra
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseObrasModal">Cancelar</button>
                    <button type="button" class="btn btn-success" @onclick="EnviarSolicitudObras" disabled="@(!PuedeEnviarSolicitud() || isEnviandoObras)">
                        @if (isEnviandoObras)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Enviando...</span>
                        }
                        else
                        {
                            <span>Enviar Solicitud</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Certificados de Capacitación -->
@if (showCertificadosModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar Certificados de Capacitación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarCertificadosModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    @for (int i = 0; i < nuevosCertificados.Count; i++)
                    {
                        var index = i;
                        <div class="card mb-3">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Certificado @(index + 1)</h6>
                                @if (nuevosCertificados.Count > 1)
                                {
                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoverCertificado(index)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                }
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Nombre del Curso <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" @bind="nuevosCertificados[index].NombreCurso" placeholder="Nombre completo del curso" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Institución Ofertante <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" @bind="nuevosCertificados[index].InstitucionOfertante" placeholder="Institución que ofreció el curso" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Tipo de Capacitación <span class="text-danger">*</span></label>
                                            <select class="form-select" @bind="nuevosCertificados[index].TipoCapacitacion">
                                                <option value="">Seleccione...</option>
                                                <option value="Curso">Curso</option>
                                                <option value="Taller">Taller</option>
                                                <option value="Seminario">Seminario</option>
                                                <option value="Diplomado">Diplomado</option>
                                                <option value="Conferencia">Conferencia</option>
                                                <option value="Certificación">Certificación</option>
                                                <option value="Especialización">Especialización</option>
                                                <option value="Otro">Otro</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Modalidad <span class="text-danger">*</span></label>
                                            <select class="form-select" @bind="nuevosCertificados[index].Modalidad">
                                                <option value="">Seleccione...</option>
                                                <option value="Presencial">Presencial</option>
                                                <option value="Virtual">Virtual</option>
                                                <option value="Mixta">Mixta</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">Horas de Duración <span class="text-danger">*</span></label>
                                            <input type="number" class="form-control" @bind="nuevosCertificados[index].HorasDuracion" placeholder="40" min="1" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Fecha de Inicio <span class="text-danger">*</span></label>
                                            <input type="date" class="form-control" @bind="nuevosCertificados[index].FechaInicio" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Fecha de Fin <span class="text-danger">*</span></label>
                                            <input type="date" class="form-control" @bind="nuevosCertificados[index].FechaFin" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Número de Registro</label>
                                            <input type="text" class="form-control" @bind="nuevosCertificados[index].NumeroRegistro" placeholder="Número o código del certificado" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Área Temática</label>
                                            <input type="text" class="form-control" @bind="nuevosCertificados[index].AreaTematica" placeholder="Área de conocimiento" />
                                        </div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Descripción</label>
                                    <textarea class="form-control" rows="3" @bind="nuevosCertificados[index].Descripcion" placeholder="Descripción del contenido o logros del curso..."></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Archivo PDF del Certificado <span class="text-danger">*</span></label>
                                    <InputFile class="form-control" OnChange="(e) => OnFileSelectedCertificado(e, index)" accept=".pdf" />
                                    <div class="form-text">Suba el archivo PDF del certificado (máximo 10MB)</div>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <div class="text-center mb-3">
                        <button type="button" class="btn btn-outline-secondary" @onclick="AgregarOtroCertificado">
                            <i class="bi bi-plus-circle me-2"></i>Agregar Otro Certificado
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarCertificadosModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarCertificados" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <text>Guardando...</text>
                        }
                        else
                        {
                            <i class="bi bi-save me-2"></i><text>Guardar Certificados</text>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Editar Certificado -->
@if (showEditarCertificadoModal && editarCertificadoDto != null && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Certificado de Capacitación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarEditarCertificadoModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Nombre del Curso <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" @bind="editarCertificadoDto.NombreCurso" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Institución Ofertante <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" @bind="editarCertificadoDto.InstitucionOfertante" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Tipo de Capacitación <span class="text-danger">*</span></label>
                                <select class="form-select" @bind="editarCertificadoDto.TipoCapacitacion">
                                    <option value="">Seleccione...</option>
                                    <option value="Curso">Curso</option>
                                    <option value="Taller">Taller</option>
                                    <option value="Seminario">Seminario</option>
                                    <option value="Diplomado">Diplomado</option>
                                    <option value="Conferencia">Conferencia</option>
                                    <option value="Certificación">Certificación</option>
                                    <option value="Especialización">Especialización</option>
                                    <option value="Otro">Otro</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Modalidad <span class="text-danger">*</span></label>
                                <select class="form-select" @bind="editarCertificadoDto.Modalidad">
                                    <option value="">Seleccione...</option>
                                    <option value="Presencial">Presencial</option>
                                    <option value="Virtual">Virtual</option>
                                    <option value="Mixta">Mixta</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Horas de Duración <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" @bind="editarCertificadoDto.HorasDuracion" min="1" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Fecha de Inicio <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" @bind="editarCertificadoDto.FechaInicio" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Fecha de Fin <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" @bind="editarCertificadoDto.FechaFin" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Número de Registro</label>
                                <input type="text" class="form-control" @bind="editarCertificadoDto.NumeroRegistro" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Área Temática</label>
                                <input type="text" class="form-control" @bind="editarCertificadoDto.AreaTematica" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <textarea class="form-control" rows="3" @bind="editarCertificadoDto.Descripcion"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarEditarCertificadoModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarEdicionCertificado" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <text>Guardando...</text>
                        }
                        else
                        {
                            <i class="bi bi-save me-2"></i><text>Guardar Cambios</text>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Reemplazar Archivo de Certificado -->
@if (showReemplazarArchivoCertificadoModal && reemplazarArchivoCertificadoDto != null && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reemplazar Archivo del Certificado</h5>
                    <button type="button" class="btn-close" @onclick="CerrarReemplazarArchivoCertificadoModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        <strong>Certificado:</strong> @certificadoSeleccionado.NombreCurso
                        <br />
                        <strong>Archivo actual:</strong> @(certificadoSeleccionado.ArchivoNombre ?? "Sin archivo")
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Nuevo Archivo PDF <span class="text-danger">*</span></label>
                        <InputFile class="form-control" OnChange="OnFileSelectedReemplazoCertificado" accept=".pdf" />
                        <div class="form-text">Seleccione el nuevo archivo PDF del certificado (máximo 10MB)</div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(reemplazarArchivoCertificadoDto.ArchivoNombre))
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle me-2"></i>
                            Archivo seleccionado: <strong>@reemplazarArchivoCertificadoDto.ArchivoNombre</strong>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarReemplazarArchivoCertificadoModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarReemplazoArchivoCertificado" 
                            disabled="@(isProcessing || string.IsNullOrEmpty(reemplazarArchivoCertificadoDto.ArchivoNombre))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <text>Reemplazando...</text>
                        }
                        else
                        {
                            <i class="bi bi-upload me-2"></i><text>Reemplazar Archivo</text>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Motivo de Rechazo de Certificado -->
@if (showMotivoRechazoCertificadoModal && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Motivo de Rechazo</h5>
                    <button type="button" class="btn-close" @onclick="CerrarMotivoRechazoCertificado" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Certificado rechazado:</strong> @certificadoSeleccionado.NombreCurso
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label"><strong>Motivo del rechazo:</strong></label>
                        <div class="form-control" style="min-height: 80px; background-color: #f8f9fa;">
                            @(certificadoSeleccionado.MotivoRechazo ?? "No se especificó un motivo de rechazo.")
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(certificadoSeleccionado.ComentariosRevision))
                    {
                        <div class="mb-3">
                            <label class="form-label"><strong>Comentarios adicionales:</strong></label>
                            <div class="form-control" style="min-height: 60px; background-color: #f8f9fa;">
                                @certificadoSeleccionado.ComentariosRevision
                            </div>
                        </div>
                    }
                    
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        Puede editar la información del certificado y volver a enviarlo para revisión.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarMotivoRechazoCertificado">Cerrar</button>
                    <button type="button" class="btn btn-primary" @onclick="() => { CerrarMotivoRechazoCertificado(); EditarCertificado(certificadoSeleccionado); }">
                        <i class="bi bi-pencil me-2"></i>Editar Certificado
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Visualización de Certificado -->
@if (showVisualizarCertificadoModal && !string.IsNullOrEmpty(pdfUrl))
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-file-earmark-pdf me-2"></i>
                        Visualizar Certificado - @(pdfNombreArchivo ?? "Documento")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarVisualizarCertificadoModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body p-0">
                    @if (isLoadingPDF)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="height: 500px;">
                            <div class="text-center">
                                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                    <span class="visually-hidden">Cargando PDF...</span>
                                </div>
                                <p class="mt-3">Cargando certificado...</p>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorPDF))
                    {
                        <div class="alert alert-danger m-3" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <strong>Error al cargar PDF:</strong> @errorPDF
                        </div>
                    }
                    else
                    {
                        <div class="pdf-viewer-container">
                            <iframe src="@pdfUrl" style="width: 100%; height: 600px; border: none;" frameborder="0"></iframe>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarVisualizarCertificadoModal">
                        <i class="bi bi-x-circle me-2"></i>Cerrar
                    </button>
                    @if (!string.IsNullOrEmpty(pdfUrl) && !isLoadingPDF && certificadoSeleccionadoParaPDF != Guid.Empty)
                    {
                        <button type="button" class="btn btn-primary" @onclick="() => DescargarCertificado(certificadoSeleccionadoParaPDF)">
                            <i class="bi bi-download me-2"></i>Descargar PDF
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // Variables existentes para documentos
    private List<DocumentoDto>? documentos;
    private List<TipoDocumentoDto>? tiposDocumento;
    private bool isLoading = true;
    private bool showUploadModal = false;
    private bool showViewModal = false;
    private DocumentoDto newDocumento = new DocumentoDto();
    private DocumentoDto? selectedDocumento;
    private IBrowserFile? selectedFile;
    private bool isFileSelected = false;
    private bool isUploading = false;
    private int uploadProgress = 0;
    private string? viewUrl;

    // Variables para obras académicas
    private List<ObraAcademicaDetalleDto>? obrasAcademicas;
    private List<ObraAcademicaDetalleDto>? solicitudesPendientes;
    private bool isLoadingObras = true;
    private bool showObrasModal = false;
    private bool isEnviandoObras = false;
    private List<NuevaObraAcademicaDto> nuevasObras = new();
    private string comentariosSolicitud = string.Empty;
    
    // Variables para gestión de documentos
    private ObraAcademicaDetalleDto? solicitudSeleccionada;
    private bool showMotivoRechazoModal = false;
    private bool showEditarMetadatosModal = false;
    private bool showReemplazarArchivoModal = false;
    private bool showAgregarComentarioModal = false;
    private bool showVisualizarPDFModal = false;
    private bool isProcessing = false;
    
    // Variables para editar metadatos
    private EditarMetadatosSolicitudDto metadatosEdicion = new();
    
    // Variables para reemplazar archivo
    private InputFile? inputFileReemplazo;
    private string archivoReemplazoNombre = string.Empty;
    private string archivoReemplazoContenido = string.Empty;
    
    // Variables para comentarios
    private string nuevoComentario = string.Empty;
    
    // Variables para visualizar PDF
    private string? pdfUrl;
    private string? pdfNombreArchivo;
    private bool isLoadingPDF = false;
    private string? errorPDF;
    
    // Variables para certificados de capacitación
    private List<CertificadoCapacitacionDetalleDto> solicitudesCertificados = new();
    private bool isLoadingCertificados = false;
    private bool showCertificadosModal = false;
    private bool showEditarCertificadoModal = false;
    private bool showReemplazarArchivoCertificadoModal = false;
    private bool showVisualizarCertificadoModal = false;
    private bool showMotivoRechazoCertificadoModal = false;

    private CertificadoCapacitacionDetalleDto? certificadoSeleccionado = null;
    private Guid certificadoSeleccionadoParaPDF = Guid.Empty;
    private List<CrearCertificadoCapacitacionDto> nuevosCertificados = new();
    private EditarMetadatosCertificadoDto? editarCertificadoDto = null;
    private ReemplazarArchivoCertificadoDto? reemplazarArchivoCertificadoDto = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentos();
        await LoadTiposDocumento();
        await LoadObrasAcademicas();
        await LoadSolicitudesPendientes();
        await LoadCertificados();
    }

    private async Task LoadObrasAcademicas()
    {
        try
        {
            isLoadingObras = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetFromJsonAsync<ResponseObrasAcademicasDto>("api/obraacademicas/mis-obras");
            if (response != null && response.Exitoso)
            {
                obrasAcademicas = response.Obras;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar obras académicas: {ex.Message}");
        }
        finally
        {
            isLoadingObras = false;
        }
    }

    private async Task LoadSolicitudesPendientes()
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            // Cargar todas las solicitudes (pendientes, aprobadas y rechazadas)
            var response = await Http.GetFromJsonAsync<ResponseObrasAcademicasDto>("api/obraacademicas/mis-solicitudes");
            if (response != null && response.Exitoso)
            {
                solicitudesPendientes = response.Obras;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar solicitudes: {ex.Message}");
        }
    }

    private void ShowObrasModal()
    {
        nuevasObras = new List<NuevaObraAcademicaDto> { new NuevaObraAcademicaDto() };
        comentariosSolicitud = string.Empty;
        showObrasModal = true;
        StateHasChanged();
    }

    private void CloseObrasModal()
    {
        showObrasModal = false;
        nuevasObras.Clear();
        StateHasChanged();
    }

    private void AgregarOtraObra()
    {
        nuevasObras.Add(new NuevaObraAcademicaDto());
    }

    private void RemoverObra(int index)
    {
        if (nuevasObras.Count > 1)
        {
            nuevasObras.RemoveAt(index);
        }
    }

    private async Task OnObraFileChange(InputFileChangeEventArgs e, int index)
    {
        var file = e.File;
        if (file != null && file.Size <= 10 * 1024 * 1024) // 10MB max
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var bytes = memoryStream.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            
            nuevasObras[index].ArchivoNombre = file.Name;
            nuevasObras[index].ArchivoContenido = base64;
            nuevasObras[index].ArchivoTipo = file.ContentType;
        }
        else if (file != null)
        {
            ToastService.ShowError("El archivo excede el tamaño máximo permitido de 10MB");
        }
    }

    private bool PuedeEnviarSolicitud()
    {
        return nuevasObras.Any() && nuevasObras.All(o => 
            !string.IsNullOrWhiteSpace(o.Titulo) && 
            !string.IsNullOrWhiteSpace(o.TipoObra) && 
            o.FechaPublicacion != default);
    }

    private async Task EnviarSolicitudObras()
    {
        if (!PuedeEnviarSolicitud())
        {
            ToastService.ShowWarning("Por favor complete todos los campos obligatorios.");
            return;
        }

        try
        {
            isEnviandoObras = true;
            StateHasChanged(); // Actualizar UI inmediatamente
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var solicitud = new SolicitudObrasAcademicasDto
            {
                Obras = nuevasObras,
                Comentarios = comentariosSolicitud
            };

            Console.WriteLine($"[DEBUG] Enviando solicitud con {solicitud.Obras.Count} obras");
            
            var response = await Http.PostAsJsonAsync("api/obraacademicas/solicitar-nuevas", solicitud);
            
            Console.WriteLine($"[DEBUG] Respuesta del servidor: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseObrasAcademicasDto>();
                Console.WriteLine($"[DEBUG] Resultado parseado: {result?.Exitoso}, Mensaje: {result?.Mensaje}");
                
                if (result != null && result.Exitoso)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    CloseObrasModal();
                    await LoadSolicitudesPendientes();
                    await LoadObrasAcademicas(); // Recargar obras también
                }
                else
                {
                    var mensaje = result?.Mensaje ?? "Error desconocido al enviar solicitud";
                    Console.WriteLine($"[DEBUG] Error en resultado: {mensaje}");
                    ToastService.ShowError(mensaje);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[DEBUG] Error HTTP: {response.StatusCode} - {errorContent}");
                ToastService.ShowError($"Error al enviar solicitud: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[DEBUG] Excepción: {ex.Message}");
            ToastService.ShowError($"Error al enviar solicitud: {ex.Message}");
        }
        finally
        {
            isEnviandoObras = false;
            StateHasChanged(); // Actualizar UI al final
        }
    }
    
    private async Task LoadDocumentos()
    {
        try
        {
            isLoading = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            documentos = await Http.GetFromJsonAsync<List<DocumentoDto>>("api/documento/mis-documentos");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar documentos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadTiposDocumento()
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            tiposDocumento = await Http.GetFromJsonAsync<List<TipoDocumentoDto>>("api/tipodocumento");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar tipos de documento: {ex.Message}");
        }
    }
    
    private void ShowUploadModal()
    {
        newDocumento = new DocumentoDto();
        selectedFile = null;
        isFileSelected = false;
        uploadProgress = 0;
        showUploadModal = true;
    }
    
    private void CloseUploadModal()
    {
        showUploadModal = false;
    }
    
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        isFileSelected = true;
        uploadProgress = 0;
    }
    
    private async Task UploadDocument()
    {
        if (selectedFile == null || newDocumento.TipoDocumentoId <= 0 || string.IsNullOrWhiteSpace(newDocumento.Nombre))
        {
            ToastService.ShowWarning("Por favor complete todos los campos obligatorios.");
            return;
        }
        
        isUploading = true;
        uploadProgress = 0;
        
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var content = new MultipartFormDataContent();
            content.Add(new StringContent(newDocumento.Nombre), "Nombre");
            content.Add(new StringContent(newDocumento.TipoDocumentoId.ToString()), "TipoDocumentoId");
            content.Add(new StringContent(newDocumento.Descripcion ?? ""), "Descripcion");
            
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // 10 MB max
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "Archivo", selectedFile.Name);
            
            var response = await Http.PostAsync("api/documento", content);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Documento subido con éxito");
                CloseUploadModal();
                await LoadDocumentos();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Error al subir documento: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al subir documento: {ex.Message}");
        }
        finally
        {
            isUploading = false;
        }
    }
    
    private async Task DeleteDocument(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar este documento?"))
            return;
            
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.DeleteAsync($"api/documento/{id}");
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Documento eliminado con éxito");
                await LoadDocumentos();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Error al eliminar documento: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al eliminar documento: {ex.Message}");
        }
    }
    
    private async Task ViewDocument(DocumentoDto documento)
    {
        selectedDocumento = documento;
        showViewModal = true;
        
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            viewUrl = $"api/documento/{documento.Id}/view?token={token}";
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al preparar visualización: {ex.Message}");
        }
    }
    
    private void CloseViewModal()
    {
        showViewModal = false;
        viewUrl = null;
    }
    
    private async Task DownloadDocument(DocumentoDto documento)
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            var url = $"api/documento/{documento.Id}/download?token={token}";
            await JSRuntime.InvokeVoidAsync("open", url, "_blank");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al descargar documento: {ex.Message}");
        }
    }
    
    public class DocumentoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string? Descripcion { get; set; }
        public string RutaArchivo { get; set; } = string.Empty;
        public int TipoDocumentoId { get; set; }
        public TipoDocumentoDto? TipoDocumento { get; set; }
        public DateTime FechaCreacion { get; set; }
        public bool Verificado { get; set; }
    }
    
    public class TipoDocumentoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string? Descripcion { get; set; }
    }

    // DTOs para obras académicas
    public class NuevaObraAcademicaDto
    {
        public string Titulo { get; set; } = string.Empty;
        public string TipoObra { get; set; } = string.Empty;
        public DateTime FechaPublicacion { get; set; } = DateTime.Today;
        public string? Editorial { get; set; }
        public string? Revista { get; set; }
        public string? ISBN_ISSN { get; set; }
        public string? DOI { get; set; }
        public bool EsIndexada { get; set; }
        public string? IndiceIndexacion { get; set; }
        public string? Autores { get; set; } = string.Empty;
        public string? Descripcion { get; set; }
        public string? ArchivoNombre { get; set; }
        public string? ArchivoContenido { get; set; }
        public string? ArchivoTipo { get; set; }
    }

    public class SolicitudObrasAcademicasDto
    {
        public List<NuevaObraAcademicaDto> Obras { get; set; } = new();
        public string? Comentarios { get; set; }
    }

    public class ObraAcademicaDetalleDto
    {
        public int Id { get; set; }
        public Guid? SolicitudId { get; set; }
        public string Titulo { get; set; } = string.Empty;
        public string TipoObra { get; set; } = string.Empty;
        public DateTime FechaPublicacion { get; set; }
        public string? Editorial { get; set; }
        public string? Revista { get; set; }
        public string? ISBN_ISSN { get; set; }
        public string? DOI { get; set; }
        public bool EsIndexada { get; set; }
        public string? IndiceIndexacion { get; set; }
        public string? Autores { get; set; } = string.Empty;
        public string? Descripcion { get; set; }
        public string? ArchivoNombre { get; set; }
        public bool TieneArchivo { get; set; }
        public DateTime FechaCreacion { get; set; }
        public DateTime? FechaActualizacion { get; set; }
        public DateTime? FechaRevision { get; set; }
        public string? Estado { get; set; }
        public string? ComentariosRevision { get; set; }
        public string? MotivoRechazo { get; set; }
    }

    public class ResponseObrasAcademicasDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
        public List<ObraAcademicaDetalleDto> Obras { get; set; } = new();
        public int TotalObras { get; set; }
    }
    
    // Variables para gestión de documentos
    
    // Métodos para verificar permisos según estado
    private bool PuedeVisualizar(string? estado) => !string.IsNullOrEmpty(estado);
    
    private bool PuedeDescargar(string? estado) => estado == "Aprobada";
    
    private bool PuedeEditarMetadatos(string? estado) => 
        estado == "Pendiente" || estado == "En Proceso" || estado == "Rechazada";
    
    private bool PuedeReemplazarArchivo(string? estado) => 
        estado == "Pendiente" || estado == "Rechazada";
    
    private bool PuedeAgregarComentario(string? estado) => estado == "En Proceso";
    
    private bool PuedeReenviar(string? estado) => estado == "Rechazada";
    
    private bool PuedeEliminar(string? estado) => 
        estado == "Pendiente" || estado == "Rechazada";
    
    // Métodos para gestión de documentos
    private async Task VisualizarDocumento(Guid solicitudId)
    {
        try
        {
            isLoadingPDF = true;

            errorPDF = null;
            showVisualizarPDFModal = true;
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            // Buscar la solicitud para obtener el nombre del archivo
            var solicitud = solicitudesPendientes?.FirstOrDefault(s => s.SolicitudId == solicitudId);
            pdfNombreArchivo = solicitud?.ArchivoNombre ?? "Documento";
            
            StateHasChanged();
            
            // Crear URL para visualización del PDF
            pdfUrl = $"http://localhost:5115/api/obraacademicas/visualizar-archivo/{solicitudId}";
            
            await Task.Delay(500); // Pequeña pausa para permitir que el iframe se configure
        }
        catch (Exception ex)
        {
            errorPDF = $"Error al cargar PDF: {ex.Message}";
        }
        finally
        {
            isLoadingPDF = false;
            StateHasChanged();
        }
    }
    
    private void CerrarVisualizarPDF()
    {
        showVisualizarPDFModal = false;
        pdfUrl = null;
        pdfNombreArchivo = null;
        errorPDF = null;
    }
    
    private async Task DescargarDocumento(Guid solicitudId)
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            var url = $"api/obraacademicas/descargar-archivo/{solicitudId}?token={token}";
            await JSRuntime.InvokeVoidAsync("open", url, "_blank");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al descargar archivo: {ex.Message}");
        }
    }
    
    private void MostrarEditarMetadatos(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        metadatosEdicion = new EditarMetadatosSolicitudDto
        {
            Titulo = solicitud.Titulo,
            Descripcion = solicitud.Descripcion,
            TipoObra = solicitud.TipoObra,
            FechaPublicacion = solicitud.FechaPublicacion,
            Editorial = solicitud.Editorial,
            Revista = solicitud.Revista,
            ISBN_ISSN = solicitud.ISBN_ISSN,
            DOI = solicitud.DOI,
            EsIndexada = solicitud.EsIndexada,
            IndiceIndexacion = solicitud.IndiceIndexacion,
            Autores = solicitud.Autores
        };
        showEditarMetadatosModal = true;
    }
    
    private void CerrarEditarMetadatos()
    {
        showEditarMetadatosModal = false;
        solicitudSeleccionada = null;
        metadatosEdicion = new();
    }
    
    private async Task GuardarMetadatos()
    {
        if (solicitudSeleccionada?.SolicitudId == null) return;
        
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/obraacademicas/editar-metadatos/{solicitudSeleccionada.SolicitudId}", metadatosEdicion);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoDto>();
                if (result?.Exitoso == true)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    await LoadSolicitudesPendientes();
                    CerrarEditarMetadatos();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al editar metadatos");
                }
            }
            else
            {
                ToastService.ShowError("Error al editar metadatos");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al editar metadatos: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private void MostrarReemplazarArchivo(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        archivoReemplazoNombre = string.Empty;
        archivoReemplazoContenido = string.Empty;
        showReemplazarArchivoModal = true;
    }
    
    private void CerrarReemplazarArchivo()
    {
        showReemplazarArchivoModal = false;
        solicitudSeleccionada = null;
        archivoReemplazoNombre = string.Empty;
        archivoReemplazoContenido = string.Empty;
    }
    
    private async Task OnFileChangeReemplazo(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.Size <= 10 * 1024 * 1024) // 10MB max
        {
            try
            {
                using var stream = file.OpenReadStream(10 * 1024 * 1024);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                
                archivoReemplazoNombre = file.Name;
                archivoReemplazoContenido = Convert.ToBase64String(memoryStream.ToArray());
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error al procesar archivo: {ex.Message}");
            }
        }
        else
        {
            ToastService.ShowError("El archivo no puede exceder 10MB");
        }
    }
    
    private async Task ReemplazarArchivo()
    {
        if (solicitudSeleccionada?.SolicitudId == null || string.IsNullOrEmpty(archivoReemplazoContenido)) return;
        
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var archivoDto = new ReemplazarArchivoDto
            {
                ArchivoNombre = archivoReemplazoNombre,
                ArchivoContenido = archivoReemplazoContenido,
                ArchivoTipo = "application/pdf"
            };
            
            var response = await Http.PutAsJsonAsync($"api/obraacademicas/reemplazar-archivo/{solicitudSeleccionada.SolicitudId}", archivoDto);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoDto>();
                if (result?.Exitoso == true)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    await LoadSolicitudesPendientes();
                    CerrarReemplazarArchivo();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al reemplazar archivo");
                }
            }
            else
            {
                ToastService.ShowError("Error al reemplazar archivo");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al reemplazar archivo: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private void MostrarAgregarComentario(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        nuevoComentario = string.Empty;
        showAgregarComentarioModal = true;
    }
    
    private void CerrarAgregarComentario()
    {
        showAgregarComentarioModal = false;
        solicitudSeleccionada = null;
        nuevoComentario = string.Empty;
    }
    
    private async Task GuardarComentario()
    {
        if (solicitudSeleccionada?.SolicitudId == null || string.IsNullOrWhiteSpace(nuevoComentario)) return;
        
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PostAsJsonAsync($"api/obraacademicas/agregar-comentario/{solicitudSeleccionada.SolicitudId}", nuevoComentario);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoDto>();
                if (result?.Exitoso == true)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    await LoadSolicitudesPendientes();
                    CerrarAgregarComentario();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al agregar comentario");
                }
            }
            else
            {
                ToastService.ShowError("Error al agregar comentario");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al agregar comentario: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private async Task ReenviarSolicitud(Guid solicitudId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea reenviar esta solicitud para revisión?"))
            return;
        
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsync($"api/obraacademicas/reenviar/{solicitudId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoDto>();
                if (result?.Exitoso == true)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    await LoadSolicitudesPendientes();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al reenviar solicitud");
                }
            }
            else
            {
                ToastService.ShowError("Error al reenviar solicitud");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al reenviar solicitud: {ex.Message}");
        }
    }
    
    private async Task EliminarSolicitud(Guid solicitudId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar esta solicitud? Esta acción no se puede deshacer."))
            return;
        
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.DeleteAsync($"api/obraacademicas/eliminar/{solicitudId}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoDto>();
                if (result?.Exitoso == true)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    await LoadSolicitudesPendientes();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al eliminar solicitud");
                }
            }
            else
            {
                ToastService.ShowError("Error al eliminar solicitud");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al eliminar solicitud: {ex.Message}");
        }
    }
    
    private void CerrarMotivoRechazo()
    {
        showMotivoRechazoModal = false;
        solicitudSeleccionada = null;
    }
    
    private void MostrarMotivoRechazo(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        showMotivoRechazoModal = true;
    }
    
    // ==========================================
    // VARIABLES Y MÉTODOS PARA CERTIFICADOS DE CAPACITACIÓN
    // ==========================================

    private async Task LoadCertificados()
    {
        try
        {
            isLoadingCertificados = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/certificados-capacitacion/mis-certificados");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseCertificadosCapacitacionDto>();
                if (result?.Exitoso == true)
                {
                    solicitudesCertificados = result.Certificados ?? new List<CertificadoCapacitacionDetalleDto>();
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar certificados: {ex.Message}");
        }
        finally
        {
            isLoadingCertificados = false;
        }
    }

    private void ShowCertificadosModal()
    {
        nuevosCertificados = new List<CrearCertificadoCapacitacionDto>
        {
            new CrearCertificadoCapacitacionDto()
        };
        showCertificadosModal = true;
    }

    private void CerrarCertificadosModal()
    {
        showCertificadosModal = false;
        nuevosCertificados.Clear();
    }

    private void AgregarOtroCertificado()
    {
        nuevosCertificados.Add(new CrearCertificadoCapacitacionDto());
    }

    private void RemoverCertificado(int index)
    {
        if (nuevosCertificados.Count > 1)
        {
            nuevosCertificados.RemoveAt(index);
        }
    }

    private async Task GuardarCertificados()
    {
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var solicitudDto = new SolicitarCertificadosCapacitacionDto
            {
                Certificados = nuevosCertificados
            };

            var response = await Http.PostAsJsonAsync("api/certificados-capacitacion/solicitar", solicitudDto);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoDto>();
                if (result?.Exitoso == true)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    await LoadCertificados();
                    CerrarCertificadosModal();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al guardar certificados");
                }
            }
            else
            {
                ToastService.ShowError("Error al guardar certificados");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al guardar certificados: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Métodos de verificación de permisos
    private bool PuedeVisualizarCertificado(string estado) => !string.IsNullOrEmpty(estado);
    private bool PuedeEditarCertificado(string estado) => estado == "Pendiente" || estado == "En Proceso" || estado == "Rechazada";
    private bool PuedeReemplazarArchivoCertificado(string estado) => estado == "Pendiente" || estado == "Rechazada";
    private bool PuedeEliminarCertificado(string estado) => estado == "Pendiente" || estado == "Rechazada";

    // Métodos de acción para certificados
    private async Task VisualizarCertificado(Guid certificadoId)
    {
        try
        {
            isLoadingPDF = true;
            errorPDF = null;
            showVisualizarCertificadoModal = true;
            certificadoSeleccionadoParaPDF = certificadoId;
            
            StateHasChanged();

            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Crear URL para visualización del PDF usando el iframe
            pdfUrl = $"api/certificados-capacitacion/visualizar-archivo/{certificadoId}";
            
            // Buscar el certificado para obtener el nombre del archivo
            var certificado = solicitudesCertificados?.FirstOrDefault(c => c.Id == certificadoId);
            pdfNombreArchivo = certificado?.ArchivoNombre ?? $"Certificado_{certificado?.NombreCurso.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd}.pdf";
            
            // Pequeña pausa para permitir que el iframe se configure
            await Task.Delay(500);
        }
        catch (Exception ex)
        {
            errorPDF = $"Error al cargar PDF: {ex.Message}";
            ToastService.ShowError($"Error al visualizar certificado: {ex.Message}");
        }
        finally
        {
            isLoadingPDF = false;
            StateHasChanged();
        }
    }

    private void EditarCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        editarCertificadoDto = new EditarMetadatosCertificadoDto
        {
            NombreCurso = certificado.NombreCurso,
            InstitucionOfertante = certificado.InstitucionOfertante,
            TipoCapacitacion = certificado.TipoCapacitacion,
            FechaInicio = certificado.FechaInicio,
            FechaFin = certificado.FechaFin,
            HorasDuracion = certificado.HorasDuracion,
            Modalidad = certificado.Modalidad,
            NumeroRegistro = certificado.NumeroRegistro,
            AreaTematica = certificado.AreaTematica,
            Descripcion = certificado.Descripcion
        };
        showEditarCertificadoModal = true;
    }

    private void ReemplazarArchivoCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        reemplazarArchivoCertificadoDto = new ReemplazarArchivoCertificadoDto();
        showReemplazarArchivoCertificadoModal = true;
    }

    private async Task EliminarCertificado(Guid certificadoId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de que desea eliminar este certificado?"))
        {
            try
            {
                isProcessing = true;
                var token = await LocalStorage.GetItemAsStringAsync("authToken");
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var response = await Http.DeleteAsync($"api/certificados-capacitacion/eliminar/{certificadoId}");
                
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<ResponseGenericoCertificadoDto>();
                    if (result?.Exitoso == true)
                    {
                        ToastService.ShowSuccess(result.Mensaje);
                        await LoadCertificados();
                    }
                    else
                    {
                        ToastService.ShowError(result?.Mensaje ?? "Error al eliminar certificado");
                    }
                }
                else
                {
                    ToastService.ShowError("Error al eliminar certificado");
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error al eliminar certificado: {ex.Message}");
            }
            finally
            {
                isProcessing = false;
            }
        }
    }

    private void VerMotivoRechazoCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        showMotivoRechazoCertificadoModal = true;
    }

    private void CerrarMotivoRechazoCertificado()
    {
        showMotivoRechazoCertificadoModal = false;
        certificadoSeleccionado = null;
    }

    // Métodos para modal de edición
    private void CerrarEditarCertificadoModal()
    {
        showEditarCertificadoModal = false;
        editarCertificadoDto = null;
        certificadoSeleccionado = null;
    }

    private async Task GuardarEdicionCertificado()
    {
        if (editarCertificadoDto == null || certificadoSeleccionado == null) return;

        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync($"api/certificados-capacitacion/editar-metadatos/{certificadoSeleccionado.Id}", editarCertificadoDto);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoDto>();
                if (result?.Exitoso == true)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    await LoadCertificados();
                    CerrarEditarCertificadoModal();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al actualizar certificado");
                }
            }
            else
            {
                ToastService.ShowError("Error al actualizar certificado");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al actualizar certificado: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Métodos para modal de reemplazar archivo
    private void CerrarReemplazarArchivoCertificadoModal()
    {
        showReemplazarArchivoCertificadoModal = false;
        reemplazarArchivoCertificadoDto = null;
        certificadoSeleccionado = null;
    }

    private async Task OnFileSelectedReemplazoCertificado(InputFileChangeEventArgs e)
    {
        if (reemplazarArchivoCertificadoDto == null) return;

        var file = e.File;
        if (file != null)
        {
            if (file.ContentType != "application/pdf")
            {
                ToastService.ShowError("Solo se permiten archivos PDF");
                return;
            }

            if (file.Size > 10 * 1024 * 1024) // 10MB
            {
                ToastService.ShowError("El archivo no puede superar los 10MB");
                return;
            }

            try
            {
                using var stream = file.OpenReadStream(10 * 1024 * 1024);
                var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer);
                
                reemplazarArchivoCertificadoDto.ArchivoNombre = file.Name;
                reemplazarArchivoCertificadoDto.ArchivoContenido = Convert.ToBase64String(buffer);
                reemplazarArchivoCertificadoDto.ArchivoTipo = file.ContentType;
                
                ToastService.ShowSuccess($"Archivo {file.Name} cargado correctamente");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error al cargar archivo: {ex.Message}");
            }
        }
    }

    private async Task GuardarReemplazoArchivoCertificado()
    {
        if (reemplazarArchivoCertificadoDto == null || certificadoSeleccionado == null) return;

        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync($"api/certificados-capacitacion/reemplazar-archivo/{certificadoSeleccionado.Id}", reemplazarArchivoCertificadoDto);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseGenericoCertificadoDto>();
                if (result?.Exitoso == true)
                {
                    ToastService.ShowSuccess(result.Mensaje);
                    await LoadCertificados();
                    CerrarReemplazarArchivoCertificadoModal();
                }
                else
                {
                    ToastService.ShowError(result?.Mensaje ?? "Error al reemplazar archivo");
                }
            }
            else
            {
                ToastService.ShowError("Error al reemplazar archivo");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al reemplazar archivo: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private async Task OnFileSelectedCertificado(InputFileChangeEventArgs e, int index)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.ContentType != "application/pdf")
            {
                ToastService.ShowError("Solo se permiten archivos PDF");
                return;
            }

            if (file.Size > 10 * 1024 * 1024) // 10MB
            {
                ToastService.ShowError("El archivo no puede superar los 10MB");
                return;
            }

            try
            {
                using var stream = file.OpenReadStream(10 * 1024 * 1024);
                var buffer = new byte[file.Size];
                await stream.ReadAsync(buffer);
                
                nuevosCertificados[index].ArchivoNombre = file.Name;
                nuevosCertificados[index].ArchivoContenido = Convert.ToBase64String(buffer);
                nuevosCertificados[index].ArchivoTipo = file.ContentType;
                
                ToastService.ShowSuccess($"Archivo {file.Name} cargado correctamente");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error al cargar archivo: {ex.Message}");
            }
        }
    }
    
    // DTOs adicionales para Certificados de Capacitación
    public class EditarMetadatosCertificadoDto
    {
        public string? NombreCurso { get; set; }
        public string? InstitucionOfertante { get; set; }
        public string? TipoCapacitacion { get; set; }
        public DateTime? FechaInicio { get; set; }
        public DateTime? FechaFin { get; set; }
        public int? HorasDuracion { get; set; }
        public string? Modalidad { get; set; }
        public string? NumeroRegistro { get; set; }
        public string? AreaTematica { get; set; }
        public string? Descripcion { get; set; }
    }

    public class ResponseGenericoCertificadoDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
        public object? Datos { get; set; }
    }

    // DTOs adicionales necesarios
    public class EditarMetadatosSolicitudDto
    {
        public string? Titulo { get; set; }
        public string? Descripcion { get; set; }
        public string? TipoObra { get; set; }
        public DateTime? FechaPublicacion { get; set; }
        public string? Editorial { get; set; }
        public string? Revista { get; set; }
        public string? ISBN_ISSN { get; set; }
        public string? DOI { get; set; }
        public bool? EsIndexada { get; set; }
        public string? IndiceIndexacion { get; set; }
        public string? Autores { get; set; }
    }

    public class CertificadoCapacitacionDetalleDto
    {
        public Guid Id { get; set; }
        public string NombreCurso { get; set; } = string.Empty;
        public string InstitucionOfertante { get; set; } = string.Empty;
        public string TipoCapacitacion { get; set; } = string.Empty;
        public DateTime FechaInicio { get; set; }
        public DateTime FechaFin { get; set; }
        public int HorasDuracion { get; set; }
        public string Modalidad { get; set; } = string.Empty;
        public string? NumeroRegistro { get; set; }
        public string? AreaTematica { get; set; }
        public string? Descripcion { get; set; }
        public string? ArchivoNombre { get; set; }
        public bool TieneArchivo { get; set; }
        public DateTime FechaCreacion { get; set; }
        public string Estado { get; set; } = string.Empty;
        public string? MotivoRechazo { get; set; }
        public string? ComentariosRevision { get; set; }
    }

    public class CrearCertificadoCapacitacionDto
    {
        public string NombreCurso { get; set; } = string.Empty;
        public string InstitucionOfertante { get; set; } = string.Empty;
        public string TipoCapacitacion { get; set; } = string.Empty;
        public DateTime FechaInicio { get; set; } = DateTime.Now;
        public DateTime FechaFin { get; set; } = DateTime.Now;
        public int HorasDuracion { get; set; }
        public string Modalidad { get; set; } = string.Empty;
        public string? NumeroRegistro { get; set; }
        public string? AreaTematica { get; set; }
        public string? Descripcion { get; set; }
        public string? ArchivoNombre { get; set; }
        public string? ArchivoContenido { get; set; }
        public string ArchivoTipo { get; set; } = "application/pdf";
    }

    public class SolicitarCertificadosCapacitacionDto
    {
        public List<CrearCertificadoCapacitacionDto> Certificados { get; set; } = new();
    }

    public class ResponseCertificadosCapacitacionDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
        public List<CertificadoCapacitacionDetalleDto> Certificados { get; set; } = new();
        public int TotalCertificados { get; set; }
    }

    public class ReemplazarArchivoCertificadoDto
    {
        public string ArchivoNombre { get; set; } = string.Empty;
        public string ArchivoContenido { get; set; } = string.Empty;
        public string ArchivoTipo { get; set; } = "application/pdf";
    }

    public class ResponseGenericoDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
    }

    public class ReemplazarArchivoDto
    {
        public string ArchivoNombre { get; set; } = string.Empty;
        public string ArchivoContenido { get; set; } = string.Empty;
        public string ArchivoTipo { get; set; } = "application/pdf";
    }

    // Métodos para modal de visualización de certificados
    private void CerrarVisualizarCertificadoModal()
    {
        showVisualizarCertificadoModal = false;
        pdfUrl = null;
        pdfNombreArchivo = null;
        errorPDF = null;
        isLoadingPDF = false;
        certificadoSeleccionadoParaPDF = Guid.Empty;
    }

    private async Task DescargarCertificado(Guid certificadoId)
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"api/certificados-capacitacion/descargar-archivo/{certificadoId}");
            
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var certificado = solicitudesCertificados?.FirstOrDefault(c => c.Id == certificadoId);
                var fileName = certificado?.ArchivoNombre ?? $"certificado_{certificado?.NombreCurso.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd}.pdf";
                
                await JSRuntime.InvokeVoidAsync("downloadFile", Convert.ToBase64String(fileBytes), fileName, "application/pdf");
                ToastService.ShowSuccess("Certificado descargado correctamente");
            }
            else
            {
                ToastService.ShowError($"Error al descargar el certificado: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al descargar certificado: {ex.Message}");
        }
    }
}
