@page "/perfil"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using SGA.Web.Services
@using SGA.Web.Models
@using System.Threading

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<div class="container mt-4">
    <h3>Mi Perfil</h3>
    
    <div class="row">
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Información Personal</h5>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center my-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (userInfo != null)
                    {                        
                        <div class="text-center mb-4">
                            <div class="avatar mx-auto mb-3">
                                <span class="avatar-initial">@GetInitials()</span>
                            </div>
                            <h4>@userInfo.Nombres @userInfo.Apellidos</h4>
                            <p class="text-muted">Docente Titular @userInfo.NivelActual</p>
                        </div>
                        
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Cédula:</span>
                                <span class="fw-bold">@userInfo.Cedula</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Email:</span>
                                <span class="fw-bold">@userInfo.Email</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Teléfono:</span>
                                <span class="fw-bold">@userInfo.TelefonoContacto</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Facultad:</span>
                                <span class="fw-bold">@(userInfo.FacultadInfo?.Nombre ?? userInfo.Facultad ?? "No asignada")</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Fecha de ingreso:</span>
                                <span class="fw-bold">@userInfo.FechaIngresoNivelActual.ToString("dd/MM/yyyy")</span>
                            </li>
                        </ul>
                        
                        <div class="d-grid gap-2 mt-3">
                            <button class="btn btn-outline-primary" @onclick="() => showEditModal = true">
                                <i class="bi bi-pencil"></i> Editar Perfil
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="() => showPasswordModal = true">
                                <i class="bi bi-key"></i> Cambiar Contraseña
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Indicadores Académicos</h5>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center my-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (indicadores != null)
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-body text-center">
                                        <div class="tiempo-transcurrido">
                                            @if (indicadores != null && !string.IsNullOrEmpty(indicadores.TiempoTranscurridoTexto))
                                            {
                                                <h4 class="display-6">@indicadores.TiempoTranscurridoTexto</h4>
                                            }
                                            else
                                            {
                                                <h4 class="display-6">@(indicadores?.TiempoRol ?? 0) meses</h4>
                                            }
                                        </div>
                                        <p class="text-muted">Tiempo en nivel actual</p>
                                        @if (indicadores != null && !string.IsNullOrEmpty(indicadores.TiempoRestanteTexto))
                                        {
                                            <div class="tiempo-restante @(indicadores.CumpleTiempoMinimo ? "text-success" : "text-warning") mb-2">
                                                @if (indicadores.CumpleTiempoMinimo)
                                                {
                                                    <i class="bi bi-check-circle-fill me-1"></i>
                                                    <small>¡Tiempo mínimo cumplido!</small>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-hourglass-split me-1"></i>
                                                    <small>Falta: @indicadores.TiempoRestanteTexto</small>
                                                }
                                            </div>
                                        }
                                        <div class="progress" style="height: 10px;">
                                            <div class="progress-bar @(indicadores?.CumpleTiempoMinimo == true ? "bg-success" : "bg-primary")" role="progressbar" 
                                                 style="width: @GetTiempoPercentage()%;" 
                                                 aria-valuenow="@GetTiempoPercentage()" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                        <small class="text-muted mt-2 d-block">Meta: 4 años (48 meses) - @GetTiempoPercentage()%</small>
                                        @if (userInfo != null)
                                        {
                                            <small class="text-muted d-block">Desde: @userInfo.FechaIngresoNivelActual.ToString("dd/MM/yyyy")</small>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-body text-center">
                                        <h1 class="display-4">@indicadores.NumeroObras</h1>
                                        <p class="text-muted">Obras académicas</p>
                                        <div class="progress" style="height: 10px;">
                                            <div class="progress-bar bg-primary" role="progressbar" 
                                                 style="width: @GetPercentage(indicadores.NumeroObras, 3)%;" 
                                                 aria-valuenow="@indicadores.NumeroObras" aria-valuemin="0" aria-valuemax="3"></div>
                                        </div>
                                        <small class="text-muted mt-2 d-block">Meta: 3 obras</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <div class="card h-100">
                                    <div class="card-body text-center">
                                        <h1 class="display-4">@indicadores.PuntajeEvaluacion%</h1>
                                        <p class="text-muted">Evaluación docente</p>
                                        <div class="progress" style="height: 10px;">
                                            <div class="progress-bar @GetEvaluationColorClass(indicadores.PuntajeEvaluacion)" role="progressbar" 
                                                 style="width: @indicadores.PuntajeEvaluacion%;" 
                                                 aria-valuenow="@indicadores.PuntajeEvaluacion" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                        <small class="text-muted mt-2 d-block">Meta: 80%</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="card h-100">
                                    <div class="card-body text-center">
                                        <h1 class="display-4">@indicadores.HorasCapacitacion</h1>
                                        <p class="text-muted">Horas de capacitación</p>
                                        <div class="progress" style="height: 10px;">
                                            <div class="progress-bar bg-primary" role="progressbar" 
                                                 style="width: @GetPercentage(indicadores.HorasCapacitacion, 120)%;" 
                                                 aria-valuenow="@indicadores.HorasCapacitacion" aria-valuemin="0" aria-valuemax="120"></div>
                                        </div>
                                        <small class="text-muted mt-2 d-block">Meta: 120 horas</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="card h-100">
                                    <div class="card-body text-center">
                                        <h1 class="display-4">@indicadores.TiempoInvestigacion</h1>
                                        <p class="text-muted">Meses en investigación</p>
                                        <div class="progress" style="height: 10px;">
                                            <div class="progress-bar bg-primary" role="progressbar" 
                                                 style="width: @GetPercentage(indicadores.TiempoInvestigacion, 24)%;" 
                                                 aria-valuenow="@indicadores.TiempoInvestigacion" aria-valuemin="0" aria-valuemax="24"></div>
                                        </div>
                                        <small class="text-muted mt-2 d-block">Meta: 24 meses</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2 mt-4">
                            <button class="btn btn-primary" @onclick="RefreshIndicadores">
                                <i class="bi bi-arrow-clockwise"></i> Actualizar Indicadores
                            </button>
                        </div>
                    }
                </div>
            </div>
            
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Requisitos para Ascenso</h5>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center my-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (requisitos != null)
                    {
                        <div class="alert @(cumpleTodosRequisitos ? "alert-success" : "alert-warning")">
                            @if (cumpleTodosRequisitos)
                            {
                                <h5><i class="bi bi-check-circle"></i> ¡Felicidades!</h5>
                                <p>Cumple con todos los requisitos para solicitar un ascenso a Titular @(userInfo?.NivelActual + 1 ?? 0).</p>
                                <a href="/solicitudes/nueva" class="btn btn-success">Iniciar Solicitud de Ascenso</a>
                            }
                            else
                            {
                                <h5><i class="bi bi-info-circle"></i> Atención</h5>
                                <p>Aún no cumple con todos los requisitos necesarios para el ascenso. Por favor, revise los requisitos pendientes.</p>
                            }
                        </div>
                        
                        <div class="table-responsive mt-3">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Requisito</th>
                                        <th>Estado</th>
                                        <th>Detalle</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>Tiempo en rol actual</td>
                                        <td>
                                            <span class="badge @(requisitos.CumpleTiempoRol ? "bg-success" : "bg-danger")">
                                                @(requisitos.CumpleTiempoRol ? "Cumple" : "No cumple")
                                            </span>
                                        </td>
                                        <td>@(indicadores?.TiempoRol ?? 0) meses (mínimo 48 meses)</td>
                                    </tr>
                                    <tr>
                                        <td>Obras académicas</td>
                                        <td>
                                            <span class="badge @(requisitos.CumpleObras ? "bg-success" : "bg-danger")">
                                                @(requisitos.CumpleObras ? "Cumple" : "No cumple")
                                            </span>
                                        </td>                                        <td>@(indicadores?.NumeroObras ?? 0) obras (mínimo 3 obras)</td>
                                    </tr>
                                    <tr>
                                        <td>Evaluación docente</td>
                                        <td>
                                            <span class="badge @(requisitos.CumpleEvaluacion ? "bg-success" : "bg-danger")">
                                                @(requisitos.CumpleEvaluacion ? "Cumple" : "No cumple")
                                            </span>
                                        </td>
                                        <td>@(indicadores?.PuntajeEvaluacion ?? 0)% (mínimo 80%)</td>
                                    </tr>
                                    <tr>
                                        <td>Capacitación</td>
                                        <td>
                                            <span class="badge @(requisitos.CumpleCapacitacion ? "bg-success" : "bg-danger")">
                                                @(requisitos.CumpleCapacitacion ? "Cumple" : "No cumple")
                                            </span>
                                        </td>
                                        <td>@(indicadores?.HorasCapacitacion ?? 0) horas (mínimo 120 horas)</td>
                                    </tr>
                                    <tr>
                                        <td>Investigación</td>
                                        <td>
                                            <span class="badge @(requisitos.CumpleInvestigacion ? "bg-success" : "bg-danger")">
                                                @(requisitos.CumpleInvestigacion ? "Cumple" : "No cumple")
                                            </span>
                                        </td>
                                        <td>@(indicadores?.TiempoInvestigacion ?? 0) meses (mínimo 24 meses)</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Edición de Perfil -->
@if (showEditModal && userInfo != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Perfil</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editUserModel" OnValidSubmit="HandleEditSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="nombres" class="form-label">Nombres</label>
                            <InputText id="nombres" class="form-control" @bind-Value="editUserModel.Nombres" />
                            <ValidationMessage For="@(() => editUserModel.Nombres)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="apellidos" class="form-label">Apellidos</label>
                            <InputText id="apellidos" class="form-control" @bind-Value="editUserModel.Apellidos" />
                            <ValidationMessage For="@(() => editUserModel.Apellidos)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="editUserModel.Email" />
                            <ValidationMessage For="@(() => editUserModel.Email)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="telefono" class="form-label">Teléfono de Contacto</label>
                            <InputText id="telefono" class="form-control" @bind-Value="editUserModel.TelefonoContacto" />
                            <ValidationMessage For="@(() => editUserModel.TelefonoContacto)" />
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Guardando...</span>
                                }
                                else
                                {
                                    <span>Guardar Cambios</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Cambio de Contraseña -->
@if (showPasswordModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cambiar Contraseña</h5>
                    <button type="button" class="btn-close" @onclick="ClosePasswordModal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@passwordModel" OnValidSubmit="HandlePasswordSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Contraseña Actual</label>
                            <InputText type="password" id="currentPassword" class="form-control" @bind-Value="passwordModel.CurrentPassword" />
                            <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">Nueva Contraseña</label>
                            <InputText type="password" id="newPassword" class="form-control" @bind-Value="passwordModel.NewPassword" />
                            <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                            <small class="form-text text-muted">
                                La contraseña debe tener al menos 8 caracteres, incluyendo mayúsculas, minúsculas, números y caracteres especiales.
                            </small>
                        </div>
                        
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirmar Contraseña</label>
                            <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
                            <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ClosePasswordModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Cambiando...</span>
                                }
                                else
                                {
                                    <span>Cambiar Contraseña</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // ID fijo para datos de demostración
    private static readonly string DEMO_USER_ID = "00000000-0000-0000-0000-000000000001";
    
    private UserInfoModel userInfo = new UserInfoModel();
    private IndicadoresModel indicadores = new IndicadoresModel();
    private RequisitosModel requisitos = new RequisitosModel();
    private EditUserModel editUserModel = new EditUserModel();
    private ChangePasswordModel passwordModel = new ChangePasswordModel();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool showEditModal = false;
    private bool showPasswordModal = false;
    private bool cumpleTodosRequisitos = false;
    private string authToken = string.Empty;
    
    // Variables para el timer y cálculo de tiempo
    private Timer? _timer;
    private DateTime _currentTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
              // Obtener token del almacenamiento local
            authToken = await LocalStorage.GetItemAsStringAsync("authToken") ?? string.Empty;
            
            if (string.IsNullOrEmpty(authToken))
            {
                await HandleAuthenticationError("No se encontró una sesión activa");
                return;
            }
            
            // Configurar el HttpClient con el token
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
            
            // Inicializar modelos para evitar errores de null reference
            userInfo = new UserInfoModel();
            indicadores = new IndicadoresModel();
            requisitos = new RequisitosModel();
            
            // Mostrar mensaje de carga
            // Cargando información del perfil...
            
            // Cargar datos de manera secuencial
            await LoadUserInfo();
            
            // Inicializar el timer para actualización en tiempo real
            IniciarTimer();
            
            // Verificar si se cargó correctamente la información del usuario
            if (userInfo != null && !string.IsNullOrEmpty(userInfo.Id))
            {
                // Cargar indicadores primero
                await LoadIndicadores();
                // Esperar un momento para asegurar que los indicadores se carguen completamente
                await Task.Delay(100);
                // Luego cargar requisitos basados en los indicadores
                await LoadRequisitos();
                
                // Inicializar componentes de JS
                await JSRuntime.InvokeVoidAsync("initializeTooltips");
                
                // Información cargada correctamente
            }
        }
        catch (Exception ex)
        {
            // Verificar si es un error de autenticación
            if (ex.Message.Contains("401") || ex.Message.ToLower().Contains("unauthorized"))
            {
                await HandleAuthenticationError($"Error de autenticación: {ex.Message}");
            }
            else
            {
                // Error al cargar la página
            }
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadUserInfo()
    {        try
        {
            // Verificar y configurar el token antes de cada petición
            await ValidateAuthToken();
            
            // Realizar la petición al endpoint correcto
            var response = await Http.GetAsync("api/auth/me");
            
            if (response.IsSuccessStatusCode)
            {
                var tempUserInfo = await response.Content.ReadFromJsonAsync<UserInfoModel>();
                
                if (tempUserInfo != null)
                {
                    userInfo = tempUserInfo;
                    
                    // Inicializar el modelo de edición
                    editUserModel = new EditUserModel
                    {
                        Nombres = userInfo.Nombres ?? "",
                        Apellidos = userInfo.Apellidos ?? "",
                        Email = userInfo.Email ?? "",
                        TelefonoContacto = userInfo.TelefonoContacto ?? ""
                    };
                }
                else
                {
                    // No se pudo obtener la información del usuario
                    userInfo = new UserInfoModel(); // Objeto vacío para evitar null references
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                // En modo DEBUG, usar datos de demostración
                #if DEBUG
                Console.WriteLine("Usando datos de demostración para desarrollo");
                
                userInfo = new UserInfoModel
                {
                    Id = DEMO_USER_ID,
                    Nombres = "Usuario",
                    Apellidos = "Demo",
                    Cedula = "1234567890",
                    Email = "usuario.demo@uta.edu.ec",
                    TelefonoContacto = "0987654321",
                    FacultadId = 1,
                    FacultadInfo = new FacultadInfo { Id = 1, Nombre = "Facultad de Ingeniería" },
                    NivelActual = 1,
                    FechaIngresoNivelActual = DateTime.Now.AddMonths(-24)
                };
                
                editUserModel = new EditUserModel
                {
                    Nombres = userInfo.Nombres,
                    Apellidos = userInfo.Apellidos,
                    Email = userInfo.Email,
                    TelefonoContacto = userInfo.TelefonoContacto
                };
                
                // Toast message removed
                #else
                // En producción, mostrar error de autenticación
                var errorContent = await response.Content.ReadAsStringAsync();
                await HandleAuthenticationError($"Sesión expirada o no tiene permisos suficientes: {errorContent}");
                #endif
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                // Toast message removed
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.ToLower().Contains("unauthorized"))
            {
                // En modo DEBUG, usar datos de demostración
                #if DEBUG
                
                userInfo = new UserInfoModel
                {
                    Id = DEMO_USER_ID,
                    Nombres = "Usuario",
                    Apellidos = "Demo",
                    Cedula = "1234567890",
                    Email = "usuario.demo@uta.edu.ec",
                    TelefonoContacto = "0987654321",
                    FacultadId = 1,
                    FacultadInfo = new FacultadInfo { Id = 1, Nombre = "Facultad de Ingeniería" },
                    NivelActual = 1,
                    FechaIngresoNivelActual = DateTime.Now.AddMonths(-24)
                };
                
                editUserModel = new EditUserModel
                {
                    Nombres = userInfo.Nombres,
                    Apellidos = userInfo.Apellidos,
                    Email = userInfo.Email,
                    TelefonoContacto = userInfo.TelefonoContacto
                };
                
                // Toast message removed
                #else
                // En producción, mostrar error de autenticación
                await HandleAuthenticationError($"Error de autenticación: {ex.Message}");
                #endif
            }
            else
            {
                // Toast message removed
            }
        }
    }
    
    private async Task LoadIndicadores()
    {        try
        {
            // Verificar y configurar el token
            await EnsureAuthTokenAsync();
            
            // En modo DEBUG, si estamos usando datos de demostración para el usuario,
            // también usamos datos de demostración para los indicadores
            #if DEBUG
            if (userInfo.Id == DEMO_USER_ID && userInfo.Nombres == "Usuario" && userInfo.Apellidos == "Demo")
            {
                indicadores = new IndicadoresModel
                {
                    TiempoRol = 81, // 81 meses (cumple - mínimo 48)
                    NumeroObras = 0, // 0 obras (no cumple - mínimo 3)
                    PuntajeEvaluacion = 0, // 0% (no cumple - mínimo 80%)
                    HorasCapacitacion = 0, // 0 horas (no cumple - mínimo 120)
                    TiempoInvestigacion = 0 // 0 meses (no cumple - mínimo 24)
                };
                // Calcular tiempo detallado para datos de demostración
                CalcularTiempoDetallado();
                return;
            }
            #endif
            
            // Realizar la petición al endpoint correcto
            var response = await Http.GetAsync("api/docente/indicadores");
            
            if (response.IsSuccessStatusCode)
            {
                var tempIndicadores = await response.Content.ReadFromJsonAsync<IndicadoresModel>();
                
                if (tempIndicadores != null)
                {
                    indicadores = tempIndicadores;
                    // Calcular tiempo detallado después de cargar los indicadores
                    CalcularTiempoDetallado();
                }
                else
                {
                    // Toast message removed
                    indicadores = new IndicadoresModel(); // Objeto vacío para evitar null references
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleAuthenticationError("Sesión expirada");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                // Toast message removed
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.ToLower().Contains("unauthorized"))
            {
                await HandleAuthenticationError($"Error de autenticación: {ex.Message}");
            }
            else
            {
                // Toast message removed
            }
        }
    }
    
    private async Task LoadRequisitos()
    {
        try
        {            // Verificar y configurar el token
            await EnsureAuthTokenAsync();
            
            // Verificar si tenemos información del usuario e indicadores
            if (userInfo == null || string.IsNullOrEmpty(userInfo.Id))
            {
                // Toast message removed
                return;
            }
            
            // Asegurar que los indicadores estén cargados
            if (indicadores == null)
            {
                // Toast message removed  
                return;
            }
            
            // En modo DEBUG, si estamos usando datos de demostración para el usuario,            // también usamos datos de demostración para los requisitos
            #if DEBUG
            if (userInfo.Id == DEMO_USER_ID && userInfo.Nombres == "Usuario" && userInfo.Apellidos == "Demo")
            {
                // Logging para debug
                Console.WriteLine($"DEBUG - Indicadores: TiempoInvestigacion = {indicadores.TiempoInvestigacion}");
                Console.WriteLine($"DEBUG - Validando: {indicadores.TiempoInvestigacion} >= 24 = {indicadores.TiempoInvestigacion >= 24}");
                
                requisitos = new RequisitosModel
                {
                    CumpleTiempoRol = indicadores.TiempoRol >= 48, // 81 meses >= 48 meses requeridos
                    CumpleObras = indicadores.NumeroObras >= 3, // 0 obras < 3 obras requeridas
                    CumpleEvaluacion = indicadores.PuntajeEvaluacion >= 80, // 0% < 80% requerido
                    CumpleCapacitacion = indicadores.HorasCapacitacion >= 120, // 0 horas < 120 horas requeridas
                    CumpleInvestigacion = indicadores.TiempoInvestigacion >= 24 // 0 meses < 24 meses requeridos
                };
                
                // Logging adicional para verificar valores
                Console.WriteLine($"DEBUG - Requisitos calculados:");
                Console.WriteLine($"  CumpleTiempoRol: {requisitos.CumpleTiempoRol}");
                Console.WriteLine($"  CumpleObras: {requisitos.CumpleObras}");
                Console.WriteLine($"  CumpleEvaluacion: {requisitos.CumpleEvaluacion}");
                Console.WriteLine($"  CumpleCapacitacion: {requisitos.CumpleCapacitacion}");
                Console.WriteLine($"  CumpleInvestigacion: {requisitos.CumpleInvestigacion}");
                
                cumpleTodosRequisitos = requisitos.CumpleTiempoRol && 
                                        requisitos.CumpleObras && 
                                        requisitos.CumpleEvaluacion && 
                                        requisitos.CumpleCapacitacion && 
                                        requisitos.CumpleInvestigacion;
                
                // Forzar actualización de la UI
                StateHasChanged();
                return;
            }
            #endif
            
            // Usar la URL correcta del endpoint
            var response = await Http.GetAsync("api/docente/requisitos");
            
            if (response.IsSuccessStatusCode)
            {
                var tempRequisitos = await response.Content.ReadFromJsonAsync<RequisitosModel>();
                
                if (tempRequisitos != null)
                {
                    requisitos = tempRequisitos;
                    
                    cumpleTodosRequisitos = requisitos.CumpleTiempoRol && 
                                            requisitos.CumpleObras && 
                                            requisitos.CumpleEvaluacion && 
                                            requisitos.CumpleCapacitacion && 
                                            requisitos.CumpleInvestigacion;
                    
                    // Forzar actualización de la UI
                    StateHasChanged();
                }
                else
                {
                    // Toast message removed
                    requisitos = new RequisitosModel(); // Objeto vacío para evitar null references
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleAuthenticationError("Sesión expirada");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                // El endpoint de requisitos no existe
                // Toast message removed
                requisitos = new RequisitosModel(); // Objeto vacío para evitar null references
                cumpleTodosRequisitos = false;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                // Toast message removed
                requisitos = new RequisitosModel(); // Objeto vacío para evitar null references
                cumpleTodosRequisitos = false;
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.ToLower().Contains("unauthorized"))
            {
                await HandleAuthenticationError($"Error de autenticación: {ex.Message}");
            }
            else
            {
                // Toast message removed
            }
        }
    }
    
    private async Task RefreshIndicadores()
    {
        try
        {            isLoading = true;
            
            // Verificar y configurar el token
            await EnsureAuthTokenAsync();
            
            // Toast message removed
            
            var response = await Http.PostAsync("api/docente/actualizar-indicadores", null);
            
            if (response.IsSuccessStatusCode)
            {
                // Toast message removed
                await LoadIndicadores();
                await LoadRequisitos();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleAuthenticationError("Sesión expirada");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                // Toast message removed
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.ToLower().Contains("unauthorized"))
            {
                await HandleAuthenticationError($"Error de autenticación: {ex.Message}");
            }
            else
            {
                // Toast message removed
            }
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void CloseEditModal()
    {
        showEditModal = false;
    }
    
    private void ClosePasswordModal()
    {
        showPasswordModal = false;
        passwordModel = new ChangePasswordModel();
    }
    
    private async Task HandleEditSubmit()
    {
        try
        {            isSubmitting = true;
            
            // Verificar y configurar el token
            await EnsureAuthTokenAsync();
            
            // Toast message removed
            
            // En modo DEBUG, si estamos usando datos de demostración, simular éxito
            #if DEBUG
            if (userInfo.Id == DEMO_USER_ID && userInfo.Nombres == "Usuario" && userInfo.Apellidos == "Demo")
            {
                userInfo.Nombres = editUserModel.Nombres ?? "";
                userInfo.Apellidos = editUserModel.Apellidos ?? "";
                userInfo.Email = editUserModel.Email ?? "";
                userInfo.TelefonoContacto = editUserModel.TelefonoContacto ?? "";
                
                // Perfil actualizado correctamente (modo demostración)
                CloseEditModal();
                return;
            }
            #endif
            
            var response = await Http.PutAsJsonAsync("api/docente/actualizar-perfil", editUserModel);
            
            if (response.IsSuccessStatusCode)
            {
                // Toast message removed
                await LoadUserInfo();
                CloseEditModal();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleAuthenticationError("Sesión expirada");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                // Toast message removed
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.ToLower().Contains("unauthorized"))
            {
                await HandleAuthenticationError($"Error de autenticación: {ex.Message}");
            }
            else
            {
                // Toast message removed
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    private async Task HandlePasswordSubmit()
    {
        if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
        {
            // Toast message removed
            return;
        }
        
        try
        {            isSubmitting = true;
            
            // Verificar y configurar el token
            await EnsureAuthTokenAsync();
            
            // Toast message removed
            
            // En modo DEBUG, si estamos usando datos de demostración, simular éxito
            #if DEBUG
            if (userInfo.Id == DEMO_USER_ID && userInfo.Nombres == "Usuario" && userInfo.Apellidos == "Demo")
            {
                // Contraseña cambiada correctamente (modo demostración)
                ClosePasswordModal();
                return;
            }
            #endif
            
            var response = await Http.PostAsJsonAsync("api/auth/cambiar-password", passwordModel);
            
            if (response.IsSuccessStatusCode)
            {
                // Toast message removed
                ClosePasswordModal();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleAuthenticationError("Sesión expirada");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                // Toast message removed
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401") || ex.Message.ToLower().Contains("unauthorized"))
            {
                await HandleAuthenticationError($"Error de autenticación: {ex.Message}");
            }
            else
            {
                // Toast message removed
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    private async Task HandleAuthenticationError(string message)
    {
        // Mostrar mensaje al usuario con más detalles
        // Toast message removed
        
        // Limpiar el token y la sesión antes de redirigir
        await LocalStorage.RemoveItemAsync("authToken");
        
        try {
            await AuthService.Logout();
        }
        catch (Exception ex) {
            // Ignorar errores en el logout
        }
        
        // Limpiar las cabeceras de autorización
        Http.DefaultRequestHeaders.Authorization = null;
        authToken = string.Empty;
        
        // Limpiar variables de estado
        userInfo = new UserInfoModel();
        indicadores = new IndicadoresModel();
        requisitos = new RequisitosModel();
        
        // Mostrar mensaje de sesión expirada
        // Toast message removed
        
        // Redireccionar al login después de un breve delay para que el usuario vea el mensaje
        await Task.Delay(2000);
        NavigationManager.NavigateTo("/login?returnUrl=/perfil&sessionExpired=true", true);
    }
    
    private string GetInitials()
    {
        if (userInfo == null)
            return "";
            
        string initials = "";
        
        if (!string.IsNullOrEmpty(userInfo.Nombres))
            initials += userInfo.Nombres[0];
            
        if (!string.IsNullOrEmpty(userInfo.Apellidos))
            initials += userInfo.Apellidos[0];
            
        return initials.ToUpper();
    }
    
    private double GetPercentage(double value, double max)
    {
        return Math.Min(value * 100 / max, 100);
    }    private string GetEvaluationColorClass(decimal puntaje)
    {
        if (puntaje >= 90)
            return "bg-success";
        else if (puntaje >= 80)
            return "bg-primary";
        else if (puntaje >= 70)
            return "bg-warning";
        else
            return "bg-danger";
    }
    
    private async Task ValidateAuthToken()
    {        try {
            // Si no tenemos token, intentamos obtenerlo
            if (string.IsNullOrEmpty(authToken))
            {
                authToken = await LocalStorage.GetItemAsStringAsync("authToken") ?? string.Empty;
                
                if (string.IsNullOrEmpty(authToken))
                {
                    await HandleAuthenticationError("No se encontró la sesión. Por favor inicie sesión nuevamente.");
                    return;
                }
            }
            
            // Configuramos el header de autorización
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
        }
        catch (Exception ex)
        {
            // Toast message removed
        }
    }
      private async Task EnsureAuthTokenAsync()
    {        try 
        {
            // Si no tenemos token, intentamos obtenerlo
            if (string.IsNullOrEmpty(authToken))
            {
                authToken = await LocalStorage.GetItemAsStringAsync("authToken") ?? string.Empty;
                
                if (string.IsNullOrEmpty(authToken))
                {
                    await HandleAuthenticationError("No se encontró la sesión. Por favor inicie sesión nuevamente.");
                    return;
                }
            }
            
            // Configuramos el header de autorización
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
        }
        catch (Exception ex)
        {
            // Toast message removed
        }
    }
    
    // Métodos para cálculo de tiempo detallado
    private void CalcularTiempoDetallado()
    {
        if (indicadores == null || userInfo == null)
            return;
            
        _currentTime = DateTime.Now;
        var fechaInicio = userInfo.FechaIngresoNivelActual;
        var tiempoTranscurrido = _currentTime - fechaInicio;
        var tiempoMinimoRequerido = TimeSpan.FromDays(4 * 365.25); // 4 años
        
        indicadores.FechaInicioRol = fechaInicio;
        indicadores.TiempoTranscurrido = tiempoTranscurrido;
        indicadores.CumpleTiempoMinimo = tiempoTranscurrido >= tiempoMinimoRequerido;
        
        if (indicadores.CumpleTiempoMinimo)
        {
            indicadores.TiempoRestante = TimeSpan.Zero;
            indicadores.TiempoRestanteTexto = "¡Tiempo cumplido!";
        }
        else
        {
            indicadores.TiempoRestante = tiempoMinimoRequerido - tiempoTranscurrido;
            indicadores.TiempoRestanteTexto = FormatearTiempoRestante(indicadores.TiempoRestante);
        }
        
        indicadores.TiempoTranscurridoTexto = FormatearTiempoTranscurrido(tiempoTranscurrido);
    }
    
    private string FormatearTiempoTranscurrido(TimeSpan tiempo)
    {
        var años = (int)(tiempo.TotalDays / 365.25);
        var meses = (int)((tiempo.TotalDays % 365.25) / 30.44);
        var dias = (int)((tiempo.TotalDays % 365.25) % 30.44);
        var horas = tiempo.Hours;
        var minutos = tiempo.Minutes;
        
        var partes = new List<string>();
        
        if (años > 0)
            partes.Add($"{años} año{(años != 1 ? "s" : "")}");
        if (meses > 0)
            partes.Add($"{meses} mes{(meses != 1 ? "es" : "")}");
        if (dias > 0 && años == 0) // Solo mostrar días si no hay años
            partes.Add($"{dias} día{(dias != 1 ? "s" : "")}");
        if (horas > 0 && años == 0 && meses == 0) // Solo mostrar horas si no hay años ni meses
            partes.Add($"{horas} hora{(horas != 1 ? "s" : "")}");
        if (minutos > 0 && años == 0 && meses == 0 && dias == 0) // Solo mostrar minutos si solo hay horas y minutos
            partes.Add($"{minutos} minuto{(minutos != 1 ? "s" : "")}");
            
        return partes.Count > 0 ? string.Join(", ", partes) : "Menos de 1 minuto";
    }
    
    private string FormatearTiempoRestante(TimeSpan tiempo)
    {
        var años = (int)(tiempo.TotalDays / 365.25);
        var meses = (int)((tiempo.TotalDays % 365.25) / 30.44);
        var dias = (int)((tiempo.TotalDays % 365.25) % 30.44);
        var horas = tiempo.Hours;
        var minutos = tiempo.Minutes;
        
        var partes = new List<string>();
        
        if (años > 0)
            partes.Add($"{años} año{(años != 1 ? "s" : "")}");
        if (meses > 0)
            partes.Add($"{meses} mes{(meses != 1 ? "es" : "")}");
        if (dias > 0 && años < 2) // Mostrar días solo si hay menos de 2 años
            partes.Add($"{dias} día{(dias != 1 ? "s" : "")}");
        if (horas > 0 && años == 0 && meses < 6) // Mostrar horas solo si hay menos de 6 meses
            partes.Add($"{horas} hora{(horas != 1 ? "s" : "")}");
        if (minutos > 0 && años == 0 && meses == 0 && dias < 7) // Mostrar minutos solo en los últimos días
            partes.Add($"{minutos} minuto{(minutos != 1 ? "s" : "")}");
            
        return partes.Count > 0 ? string.Join(", ", partes) : "Menos de 1 minuto";
    }
    
    private int GetTiempoPercentage()
    {
        if (indicadores == null || userInfo == null)
            return 0;
            
        var tiempoTranscurrido = _currentTime - userInfo.FechaIngresoNivelActual;
        var tiempoMinimoEnDias = 4 * 365.25; // 4 años en días
        var porcentaje = (int)Math.Min(100, (tiempoTranscurrido.TotalDays / tiempoMinimoEnDias) * 100);
        
        return porcentaje;
    }
    
    private void IniciarTimer()
    {
        _timer = new Timer(async _ =>
        {
            _currentTime = DateTime.Now;
            CalcularTiempoDetallado();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1)); // Actualizar cada minuto
    }
    
    private void DetenerTimer()
    {
        _timer?.Dispose();
        _timer = null;
    }
    
    public void Dispose()
    {
        DetenerTimer();
    }
    
    public class EditUserModel
    {
        public string? Nombres { get; set; }
        public string? Apellidos { get; set; }
        public string? Email { get; set; }
        public string? TelefonoContacto { get; set; }
    }
    
    public class ChangePasswordModel
    {
        public string? CurrentPassword { get; set; }
        public string? NewPassword { get; set; }
        public string? ConfirmPassword { get; set; }
    }
}
