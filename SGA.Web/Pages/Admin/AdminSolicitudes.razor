@page "/admin/solicitudes"
@attribute [Authorize(Roles = "Administrador")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Net.Http.Json
@using SGA.Web.Shared
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3>
                    <i class="bi bi-clipboard-check"></i> 
                    Gestión de Solicitudes de Ascenso
                </h3>
                <div class="d-flex gap-2 align-items-center">
                    <button class="btn" style="background-color: #8a1538; border-color: #8a1538; color: white;" @onclick="ActualizarSolicitudes">
                        <i class="bi bi-arrow-clockwise"></i> Actualizar
                    </button>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item"><a href="/admin">Panel Admin</a></li>
                            <li class="breadcrumb-item active" aria-current="page">Solicitudes</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-3">
                            <label class="form-label">Filtrar por estado:</label>
                            <select @onchange="FiltrarPorEstado" class="form-select">
                                <option value="Todas">Todas las solicitudes</option>
                                <option value="Pendiente">Pendientes</option>
                                <option value="En Proceso">En Proceso</option>
                                <option value="Aprobada">Aprobadas</option>
                                <option value="Rechazada">Rechazadas</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Nivel solicitado:</label>
                            <select @onchange="FiltrarPorNivel" class="form-select">
                                <option value="">Todos los niveles</option>
                                <option value="2">Titular 2</option>
                                <option value="3">Titular 3</option>
                                <option value="4">Titular 4</option>
                                <option value="5">Titular 5</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Buscar docente:</label>
                            <input type="text" @bind="filtroDocente" @onkeypress="BuscarEnter" 
                                   class="form-control" placeholder="Nombre, apellido o cédula" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">&nbsp;</label>
                            <button @onclick="LimpiarFiltros" class="btn btn-outline-secondary w-100">
                                <i class="bi bi-x-circle"></i> Limpiar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Estadísticas de solicitudes -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <h4>@solicitudesFiltradas.Count(s => s.Estado == "Pendiente")</h4>
                    <small>Pendientes</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <h4>@solicitudesFiltradas.Count(s => s.Estado == "En Proceso")</h4>
                    <small>En Proceso</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <h4>@solicitudesFiltradas.Count(s => s.Estado == "Aprobada")</h4>
                    <small>Aprobadas</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body text-center">
                    <h4>@solicitudesFiltradas.Count(s => s.Estado == "Rechazada")</h4>
                    <small>Rechazadas</small>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando solicitudes...</span>
            </div>
        </div>
    }
    else if (!solicitudesFiltradas.Any())
    {
        <div class="alert alert-info" role="alert">
            <i class="bi bi-info-circle"></i>
            No se encontraron solicitudes que coincidan con los filtros aplicados.
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-list"></i> Lista de Solicitudes (@solicitudesFiltradas.Count)
                </h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Docente</th>
                                <th>Cédula</th>
                                <th>Nivel Actual</th>
                                <th>Nivel Solicitado</th>
                                <th>Fecha Solicitud</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var solicitud in solicitudesFiltradas)
                            {
                                <tr>
                                    <td>
                                        <span class="badge bg-secondary">SOL-@solicitud.Id</span>
                                    </td>
                                    <td>
                                        <div>
                                            <strong>@solicitud.DocenteNombres @solicitud.DocenteApellidos</strong>
                                            <br>
                                            <small class="text-muted">@solicitud.DocenteEmail</small>
                                        </div>
                                    </td>
                                    <td>@solicitud.DocenteCedula</td>
                                    <td>
                                        <span class="badge bg-info">@solicitud.NivelActual</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">@solicitud.NivelSolicitado</span>
                                    </td>
                                    <td>@solicitud.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <span class="badge @GetEstadoBadgeClass(solicitud.Estado)">
                                            @solicitud.Estado
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button @onclick="() => VerDocumentos(solicitud.Id)" 
                                                    class="btn btn-outline-primary" title="Ver documentos">
                                                <i class="bi bi-file-earmark-pdf"></i>
                                            </button>
                                            @if (solicitud.Estado == "Pendiente" || solicitud.Estado == "En Proceso")
                                            {
                                                <button @onclick="() => AprobarSolicitud(solicitud.Id)" 
                                                        class="btn btn-outline-success" title="Aprobar">
                                                    <i class="bi bi-check-circle"></i>
                                                </button>
                                                <button @onclick="() => RechazarSolicitud(solicitud.Id)" 
                                                        class="btn btn-outline-danger" title="Rechazar">
                                                    <i class="bi bi-x-circle"></i>
                                                </button>
                                            }
                                            @if (solicitud.Estado == "Rechazada" && !string.IsNullOrWhiteSpace(solicitud.MotivoRechazo))
                                            {
                                                <button @onclick="() => VerMotivoRechazo(solicitud.Id)" 
                                                        class="btn btn-outline-warning" title="Ver motivo de rechazo">
                                                    <i class="bi bi-exclamation-triangle"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal para aprobar solicitud -->
@if (showApprovalModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content border-0 shadow">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-check-circle"></i> Aprobar Solicitud de Ascenso
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    @if (solicitudParaModal != null)
                    {
                        <div class="alert alert-info">
                            <h6 class="alert-heading">
                                <i class="bi bi-info-circle"></i> Información de la Solicitud
                            </h6>
                            <p class="mb-2">
                                <strong>Docente:</strong> @solicitudParaModal.DocenteNombres @solicitudParaModal.DocenteApellidos
                            </p>
                            <p class="mb-2">
                                <strong>Cédula:</strong> @solicitudParaModal.DocenteCedula
                            </p>
                            <p class="mb-0">
                                <strong>Ascenso:</strong> 
                                <span class="badge bg-info">@solicitudParaModal.NivelActual</span>
                                <i class="bi bi-arrow-right mx-2"></i>
                                <span class="badge bg-success">@solicitudParaModal.NivelSolicitado</span>
                            </p>
                        </div>
                        
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>¡Atención!</strong> Al aprobar esta solicitud:
                            <ul class="mb-0 mt-2">
                                <li>El docente será promovido al nivel <strong>@solicitudParaModal.NivelSolicitado</strong></li>
                                <li>Se reiniciarán automáticamente sus contadores de obras, horas de capacitación, etc.</li>
                                <li>Se enviará una notificación de felicitación al docente</li>
                                <li>Esta acción <strong>no se puede deshacer</strong></li>
                            </ul>
                        </div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">Observaciones (opcional):</label>
                        <textarea @bind="observacionesAprobacion" class="form-control" rows="3" 
                                  placeholder="Comentarios adicionales sobre la aprobación..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-success" @onclick="ConfirmarAprobacion" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            @:Procesando...
                        }
                        else
                        {
                            <i class="bi bi-check-circle"></i>
                            @: Aprobar Ascenso
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para rechazar solicitud -->
@if (showRejectionModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-x-circle"></i> Rechazar Solicitud de Ascenso
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    @if (solicitudParaModal != null)
                    {
                        <div class="alert alert-info">
                            <h6 class="alert-heading">
                                <i class="bi bi-info-circle"></i> Información de la Solicitud
                            </h6>
                            <p class="mb-2">
                                <strong>Docente:</strong> @solicitudParaModal.DocenteNombres @solicitudParaModal.DocenteApellidos
                            </p>
                            <p class="mb-2">
                                <strong>Cédula:</strong> @solicitudParaModal.DocenteCedula
                            </p>
                            <p class="mb-0">
                                <strong>Nivel solicitado:</strong> 
                                <span class="badge bg-primary">@solicitudParaModal.NivelSolicitado</span>
                            </p>
                        </div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">Motivo del rechazo <span class="text-danger">*</span>:</label>
                        <textarea @bind="motivoRechazo" class="form-control" rows="4" 
                                  placeholder="Explique detalladamente el motivo del rechazo..." required></textarea>
                        <div class="form-text">
                            Este motivo será enviado al docente junto con la notificación de rechazo.
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarRechazo" 
                            disabled="@(isProcessing || string.IsNullOrWhiteSpace(motivoRechazo))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            @:Procesando...
                        }
                        else
                        {
                            <i class="bi bi-x-circle"></i>
                            @: Rechazar Solicitud
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para mostrar motivo de rechazo -->
@if (showMotivoRechazoModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle"></i> Motivo de Rechazo
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalMotivoRechazo"></button>
                </div>
                <div class="modal-body">
                    @if (solicitudParaModal != null)
                    {
                        <div class="alert alert-info">
                            <h6 class="alert-heading">
                                <i class="bi bi-info-circle"></i> Información de la Solicitud
                            </h6>
                            <p class="mb-2">
                                <strong>Docente:</strong> @solicitudParaModal.DocenteNombres @solicitudParaModal.DocenteApellidos
                            </p>
                            <p class="mb-2">
                                <strong>Cédula:</strong> @solicitudParaModal.DocenteCedula
                            </p>
                            <p class="mb-2">
                                <strong>Nivel solicitado:</strong> 
                                <span class="badge bg-primary">@solicitudParaModal.NivelSolicitado</span>
                            </p>
                            <p class="mb-0">
                                <strong>Fecha de solicitud:</strong> @solicitudParaModal.FechaSolicitud.ToString("dd/MM/yyyy")
                            </p>
                        </div>
                        
                        <div class="alert alert-danger">
                            <h6 class="alert-heading">
                                <i class="bi bi-x-circle"></i> Motivo del Rechazo
                            </h6>
                            <div class="mt-2">
                                <p class="mb-0" style="white-space: pre-wrap;">@solicitudParaModal.MotivoRechazo</p>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalMotivoRechazo">
                        <i class="bi bi-x-lg"></i> Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para mostrar lista de documentos -->
@if (showDocumentosModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" style="max-width: 900px;">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-file-earmark-pdf me-2"></i>
                        Documentos de la Solicitud SOL-@solicitudSeleccionada?.Id.ToString().Substring(0, 8)
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModalDocumentos"></button>
                </div>
                <div class="modal-body">
                    @if (documentosLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando documentos...</span>
                            </div>
                            <p class="mt-2 text-muted">Cargando documentos...</p>
                        </div>
                    }
                    else if (documentosActuales?.Any() == true)
                    {
                        <div class="list-group">
                            @foreach (var documento in documentosActuales)
                            {
                                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-file-earmark-pdf text-danger me-3" style="font-size: 1.5rem;"></i>
                                        <div>
                                            <h6 class="mb-1">@documento.NombreArchivo</h6>
                                            <small class="text-muted">
                                                Tipo: @documento.TipoDocumento | 
                                                Tamaño: @FormatFileSize(documento.TamanoArchivo) |
                                                Fecha: @documento.FechaCreacion.ToString("dd/MM/yyyy HH:mm")
                                            </small>
                                        </div>
                                    </div>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" 
                                                @onclick="() => VisualizarPDF(documento.Id, documento.NombreArchivo)"
                                                title="Visualizar PDF">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-secondary" 
                                                @onclick="() => DescargarDocumento(documento.Id, documento.NombreArchivo)"
                                                title="Descargar">
                                            <i class="bi bi-download"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-file-earmark-x text-muted" style="font-size: 3rem;"></i>
                            <p class="text-muted mt-2">No hay documentos asociados a esta solicitud.</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalDocumentos">
                        <i class="bi bi-x-circle me-1"></i>
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para visualizar PDF -->
@if (showVisorPDF)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5); z-index: 1060;">
        <div class="modal-dialog" style="max-width: 70%; width: 70%;">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-file-earmark-pdf me-2"></i>
                        @nombreArchivoPDF
                    </h5>
                    <div class="btn-group me-3">
                        <button type="button" class="btn btn-outline-light btn-sm" 
                                @onclick="() => DescargarDocumento(documentoIdActual, nombreArchivoPDF)"
                                title="Descargar PDF">
                            <i class="bi bi-download"></i>
                        </button>
                    </div>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarVisorPDF"></button>
                </div>
                <div class="modal-body p-0" style="height: 70vh;">
                    @if (pdfLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Cargando PDF...</span>
                                </div>
                                <p class="mt-2 text-muted">Cargando documento PDF...</p>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(pdfDataUrl))
                    {
                        <iframe src="@pdfDataUrl" 
                                style="width: 100%; height: 100%; border: none;" 
                                title="Visualizador PDF">
                        </iframe>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="text-center">
                                <i class="bi bi-file-earmark-x text-muted" style="font-size: 4rem;"></i>
                                <p class="text-muted mt-2">Error al cargar el documento PDF.</p>
                                <button class="btn btn-outline-primary" @onclick="() => VisualizarPDF(documentoIdActual, nombreArchivoPDF)">
                                    <i class="bi bi-arrow-clockwise me-1"></i>
                                    Reintentar
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarVisorPDF">
                        <i class="bi bi-x-circle me-1"></i>
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Toast de notificaciones -->
@if (showToast)
{
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header" style="background-color: @GetToastHeaderColor();">
                <i class="@GetToastIcon() me-2"></i>
                <strong class="me-auto text-white">@toastTitle</strong>
                <button type="button" class="btn-close btn-close-white" @onclick="() => showToast = false"></button>
            </div>
            <div class="toast-body">
                @toastMessage
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private List<SolicitudAscensoDto> solicitudes = new();
    private List<SolicitudAscensoDto> solicitudesFiltradas = new();
    
    private string filtroEstado = "Todas";
    private string filtroNivel = "";
    private string filtroDocente = "";
    
    // Variables para modales de aprobación/rechazo
    private bool showApprovalModal = false;
    private bool showRejectionModal = false;
    private bool showMotivoRechazoModal = false;
    private bool isProcessing = false;
    private SolicitudAscensoDto? solicitudParaModal = null;
    private string observacionesAprobacion = "";
    private string motivoRechazo = "";

    // Variables para notificaciones
    private bool showToast = false;
    private string toastTitle = "";
    private string toastMessage = "";
    private ToastType toastType = ToastType.Info;

    // Variables para gestión de documentos
    private bool showDocumentosModal = false;
    private bool showVisorPDF = false;
    private bool documentosLoading = false;
    private bool pdfLoading = false;
    private SolicitudAscensoDto? solicitudSeleccionada = null;
    private List<DocumentoDto> documentosActuales = new();
    private Guid documentoIdActual = Guid.Empty;
    private string nombreArchivoPDF = "";
    private string pdfDataUrl = "";

    public enum ToastType
    {
        Success,
        Error,
        Warning,
        Info
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarSolicitudes();
    }

    protected override Task OnParametersSetAsync()
    {
        if (showToast)
        {
            // Auto-hide después de 5 segundos
            _ = Task.Run(async () =>
            {
                await Task.Delay(5000);
                await InvokeAsync(() =>
                {
                    showToast = false;
                    StateHasChanged();
                });
            });
        }
        return Task.CompletedTask;
    }

    private async Task CargarSolicitudes()
    {
        try
        {
            isLoading = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetFromJsonAsync<List<SolicitudAscensoDto>>("api/solicitudascenso");
            solicitudes = response ?? new List<SolicitudAscensoDto>();
            
            AplicarFiltros();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar solicitudes: {ex.Message}");
            ShowToast("Error", "Error al cargar las solicitudes", ToastType.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ActualizarSolicitudes()
    {
        await CargarSolicitudes();
        ShowToast("Éxito", "Solicitudes actualizadas", ToastType.Success);
    }

    private void FiltrarPorEstado(ChangeEventArgs e)
    {
        filtroEstado = e.Value?.ToString() ?? "Todas";
        AplicarFiltros();
    }

    private void FiltrarPorNivel(ChangeEventArgs e)
    {
        filtroNivel = e.Value?.ToString() ?? "";
        AplicarFiltros();
    }

    private Task BuscarEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AplicarFiltros();
        }
        return Task.CompletedTask;
    }

    private void LimpiarFiltros()
    {
        filtroEstado = "Todas";
        filtroNivel = "";
        filtroDocente = "";
        AplicarFiltros();
    }

    private void AplicarFiltros()
    {
        solicitudesFiltradas = solicitudes.Where(s =>
            (filtroEstado == "Todas" || s.Estado == filtroEstado) &&
            (string.IsNullOrEmpty(filtroNivel) || s.NivelSolicitado == filtroNivel) &&
            (string.IsNullOrEmpty(filtroDocente) || 
             s.DocenteNombres.Contains(filtroDocente, StringComparison.OrdinalIgnoreCase) ||
             s.DocenteApellidos.Contains(filtroDocente, StringComparison.OrdinalIgnoreCase) ||
             s.DocenteCedula.Contains(filtroDocente, StringComparison.OrdinalIgnoreCase))
        ).OrderByDescending(s => s.FechaSolicitud).ToList();
        
        StateHasChanged();
    }

    private string GetEstadoBadgeClass(string estado)
    {
        return estado switch
        {
            "Pendiente" => "bg-warning",
            "En Proceso" => "bg-info",
            "Aprobada" => "bg-success",
            "Rechazada" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    // Métodos para gestión de documentos
    private async Task VerDocumentos(Guid solicitudId)
    {
        try
        {
            documentosLoading = true;
            solicitudSeleccionada = solicitudes.FirstOrDefault(s => s.Id == solicitudId);
            showDocumentosModal = true;
            StateHasChanged();

            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetFromJsonAsync<List<DocumentoDto>>($"api/solicitudascenso/{solicitudId}/documentos");
            documentosActuales = response ?? new List<DocumentoDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar documentos: {ex.Message}");
            ShowToast("Error", "Error al cargar los documentos", ToastType.Error);
        }
        finally
        {
            documentosLoading = false;
            StateHasChanged();
        }
    }

    private async Task VisualizarPDF(Guid documentoId, string nombreArchivo)
    {
        try
        {
            pdfLoading = true;
            documentoIdActual = documentoId;
            nombreArchivoPDF = nombreArchivo;
            showVisorPDF = true;
            StateHasChanged();

            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetAsync($"api/solicitudascenso/documento/{documentoId}");
            if (response.IsSuccessStatusCode)
            {
                var pdfBytes = await response.Content.ReadAsByteArrayAsync();
                var base64String = Convert.ToBase64String(pdfBytes);
                pdfDataUrl = $"data:application/pdf;base64,{base64String}";
            }
            else
            {
                ShowToast("Error", "No se pudo cargar el documento PDF", ToastType.Error);
                pdfDataUrl = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al visualizar PDF: {ex.Message}");
            ShowToast("Error", "Error al visualizar el documento", ToastType.Error);
            pdfDataUrl = "";
        }
        finally
        {
            pdfLoading = false;
            StateHasChanged();
        }
    }

    private async Task DescargarDocumento(Guid documentoId, string nombreArchivo)
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            await JSRuntime.InvokeVoidAsync("downloadDocument", $"api/solicitudascenso/documento/{documentoId}", nombreArchivo);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al descargar documento: {ex.Message}");
            ShowToast("Error", "Error al descargar el documento", ToastType.Error);
        }
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        return $"{bytes / (1024 * 1024):F1} MB";
    }

    private void CerrarModalDocumentos()
    {
        showDocumentosModal = false;
        documentosActuales.Clear();
        solicitudSeleccionada = null;
        StateHasChanged();
    }

    private void CerrarVisorPDF()
    {
        showVisorPDF = false;
        pdfDataUrl = "";
        documentoIdActual = Guid.Empty;
        nombreArchivoPDF = "";
        StateHasChanged();
    }

    // Métodos para aprobación/rechazo
    private void AprobarSolicitud(Guid solicitudId)
    {
        var solicitud = solicitudes.FirstOrDefault(s => s.Id == solicitudId);
        if (solicitud != null)
        {
            solicitudParaModal = solicitud;
            observacionesAprobacion = "";
            showApprovalModal = true;
            StateHasChanged();
        }
    }

    private void RechazarSolicitud(Guid solicitudId)
    {
        var solicitud = solicitudes.FirstOrDefault(s => s.Id == solicitudId);
        if (solicitud != null)
        {
            solicitudParaModal = solicitud;
            motivoRechazo = "";
            showRejectionModal = true;
            StateHasChanged();
        }
    }

    private void VerMotivoRechazo(Guid solicitudId)
    {
        var solicitud = solicitudes.FirstOrDefault(s => s.Id == solicitudId);
        if (solicitud != null)
        {
            solicitudParaModal = solicitud;
            showMotivoRechazoModal = true;
            StateHasChanged();
        }
    }

    private void CerrarModalMotivoRechazo()
    {
        showMotivoRechazoModal = false;
        solicitudParaModal = null;
        StateHasChanged();
    }

    private void CerrarModal()
    {
        showApprovalModal = false;
        showRejectionModal = false;
        showMotivoRechazoModal = false;
        solicitudParaModal = null;
        observacionesAprobacion = "";
        motivoRechazo = "";
        StateHasChanged();
    }

    private async Task ConfirmarAprobacion()
    {
        if (solicitudParaModal == null || isProcessing) return;
        
        try
        {
            isProcessing = true;
            StateHasChanged();
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var request = new ProcesarSolicitudRequest
            {
                SolicitudId = solicitudParaModal.Id,
                Aprobar = true,
                MotivoRechazo = null
            };

            var response = await Http.PostAsJsonAsync($"api/solicitudascenso/{solicitudParaModal.Id}/procesar", request);
            
            if (response.IsSuccessStatusCode)
            {
                ShowToast("¡Solicitud Aprobada!", 
                    $"La solicitud de {solicitudParaModal.DocenteNombres} {solicitudParaModal.DocenteApellidos} ha sido aprobada exitosamente. El docente recibirá una notificación de felicitación.", 
                    ToastType.Success);
                
                CerrarModal();
                await CargarSolicitudes();
            }
            else
            {
                ShowToast("Error", "No se pudo aprobar la solicitud. Intente nuevamente.", 
                    ToastType.Error);
            }
        }
        catch (Exception ex)
        {
            ShowToast("Error", $"Error al aprobar solicitud: {ex.Message}", 
                ToastType.Error);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmarRechazo()
    {
        if (solicitudParaModal == null || isProcessing || string.IsNullOrWhiteSpace(motivoRechazo)) return;
        
        try
        {
            isProcessing = true;
            StateHasChanged();
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var request = new ProcesarSolicitudRequest
            {
                SolicitudId = solicitudParaModal.Id,
                Aprobar = false,
                MotivoRechazo = motivoRechazo
            };

            var response = await Http.PostAsJsonAsync($"api/solicitudascenso/{solicitudParaModal.Id}/procesar", request);
            
            if (response.IsSuccessStatusCode)
            {
                ShowToast("Solicitud Rechazada", 
                    $"La solicitud de {solicitudParaModal.DocenteNombres} {solicitudParaModal.DocenteApellidos} ha sido rechazada. El docente recibirá una notificación con el motivo.", 
                    ToastType.Warning);
                
                CerrarModal();
                await CargarSolicitudes();
            }
            else
            {
                ShowToast("Error", "No se pudo rechazar la solicitud. Intente nuevamente.", 
                    ToastType.Error);
            }
        }
        catch (Exception ex)
        {
            ShowToast("Error", $"Error al rechazar solicitud: {ex.Message}", 
                ToastType.Error);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ShowToast(string title, string message, ToastType type)
    {
        toastTitle = title;
        toastMessage = message;
        toastType = type;
        showToast = true;
        StateHasChanged();
    }

    private string GetToastHeaderColor()
    {
        return toastType switch
        {
            ToastType.Success => "#198754",
            ToastType.Error => "#dc3545",
            ToastType.Warning => "#fd7e14",
            ToastType.Info => "#0d6efd",
            _ => "#6c757d"
        };
    }

    private string GetToastIcon()
    {
        return toastType switch
        {
            ToastType.Success => "bi bi-check-circle-fill text-white",
            ToastType.Error => "bi bi-x-circle-fill text-white",
            ToastType.Warning => "bi bi-exclamation-triangle-fill text-white",
            ToastType.Info => "bi bi-info-circle-fill text-white",
            _ => "bi bi-bell-fill text-white"
        };
    }

    // Clases DTO necesarias
    public class SolicitudAscensoDto
    {
        public Guid Id { get; set; }
        public Guid DocenteId { get; set; }
        public string DocenteNombre { get; set; } = string.Empty;
        public string DocenteNombres { get; set; } = string.Empty;
        public string DocenteApellidos { get; set; } = string.Empty;
        public string DocenteEmail { get; set; } = string.Empty;
        public string DocenteCedula { get; set; } = string.Empty;
        public string NivelActual { get; set; } = string.Empty;
        public string NivelSolicitado { get; set; } = string.Empty;
        public string Estado { get; set; } = string.Empty;
        public string? MotivoRechazo { get; set; }
        public DateTime FechaSolicitud { get; set; }
        public DateTime? FechaAprobacion { get; set; }
        public string? AprobadoPor { get; set; }
        
        // Datos al momento de la solicitud
        public decimal PromedioEvaluaciones { get; set; }
        public int HorasCapacitacion { get; set; }
        public int NumeroObrasAcademicas { get; set; }
        public int MesesInvestigacion { get; set; }
        public int TiempoEnNivelDias { get; set; }
        
        public List<DocumentoDto> Documentos { get; set; } = new();
    }

    public class ProcesarSolicitudRequest
    {
        public Guid SolicitudId { get; set; }
        public bool Aprobar { get; set; }
        public string? MotivoRechazo { get; set; }
    }

    public class DocumentoDto
    {
        public Guid Id { get; set; }
        public string NombreArchivo { get; set; } = string.Empty;
        public long TamanoArchivo { get; set; }
        public string TipoDocumento { get; set; } = string.Empty;
        public DateTime FechaCreacion { get; set; }
    }
}

<script>
window.downloadDocument = async (url, filename) => {
    try {
        // Obtener el token de autenticación
        const token = localStorage.getItem('authToken');
        
        // Hacer la petición con el token
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token.replace(/"/g, '')}`
            }
        });
        
        if (!response.ok) {
            throw new Error('Error al descargar el documento');
        }
        
        // Obtener el blob del archivo
        const blob = await response.blob();
        
        // Crear un enlace temporal para la descarga
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = filename || 'documento.pdf';
        
        // Agregar el enlace al DOM temporalmente
        document.body.appendChild(link);
        
        // Hacer clic en el enlace para iniciar la descarga
        link.click();
        
        // Remover el enlace del DOM
        document.body.removeChild(link);
        
        // Liberar el objeto URL
        window.URL.revokeObjectURL(link.href);
        
        console.log(`Descarga iniciada: ${filename}`);
    } catch (error) {
        console.error('Error al descargar documento:', error);
        alert('Error al descargar el documento. Por favor, intente nuevamente.');
    }
};

// Función para cerrar modales con tecla Escape
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        // Buscar si hay algún modal abierto
        const modals = document.querySelectorAll('.modal.show');
        if (modals.length > 0) {
            // Enviar evento para cerrar el modal más reciente
            const lastModal = modals[modals.length - 1];
            const closeButton = lastModal.querySelector('.btn-close');
            if (closeButton) {
                closeButton.click();
            }
        }
    }
});

console.log('AdminSolicitudes JavaScript cargado correctamente');
</script>