@page "/admin/configuracion-requisitos"
@using SGA.Web.Models.Admin
@using SGA.Web.Models.Enums
@using SGA.Web.Extensions
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using SGA.Web.Services
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject TitulosAcademicosService TitulosService
@inject Blazored.Toast.Services.IToastService ToastService
@attribute [Authorize(Roles = "Administrador")]

<h1 class="visually-hidden">Configuración de Requisitos de Ascenso</h1>

<link href="css/configuracion-requisitos.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="config-container">
    <!-- Header Section -->
    <div class="config-header">
        <h1 class="config-title">
            <i class="fas fa-cogs"></i>
            Configuración de Requisitos de Ascenso
        </h1>
        <p class="config-subtitle">
            Administra los requisitos dinámicos para cada nivel de ascenso docente
        </p>
    </div>

    <!-- Main Card -->
    <div class="config-card config-mb-4">
        <div class="config-card-header">
            <h5 class="config-card-title">Requisitos Dinámicos por Nivel</h5>
            <div class="config-d-flex config-gap-2">
                <button class="config-btn config-btn-light config-btn-sm config-me-2" 
                        title="Crear una nueva configuración de requisitos para un nivel de ascenso"
                        @onclick="AbrirDialogoCrear">
                    <i class="fas fa-plus config-me-1"></i>
                    Nueva Configuración
                </button>
                <button class="config-btn config-btn-outline-light config-btn-sm" 
                        title="Actualizar la lista de configuraciones desde la base de datos"
                        @onclick="CargarConfiguraciones">
                    <i class="fas fa-sync-alt config-me-1"></i>
                    Actualizar
                </button>
            </div>
        </div>
        <div class="config-card-body">
            @if (cargando)
            {
                <div class="config-loading">
                    <div class="config-spinner" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="config-mt-3 config-text-uta">Cargando configuraciones...</p>
                </div>
            }
            else if (configuraciones.Any())
            {
                <div class="config-table-container">
                    <div class="config-search-container">
                        <h6 class="config-text-muted">Configuraciones de Requisitos</h6>
                        <div class="config-search-group">
                            <i class="fas fa-search config-search-icon"></i>
                            <input type="text" class="config-search-input" placeholder="Buscar..." 
                                   @bind-value="_searchString" @bind-value:event="oninput" />
                        </div>
                    </div>
                    <table class="config-table">
                        <thead>
                            <tr>
                                <th>Nivel Actual</th>
                                <th>Nivel Destino</th>
                                <th>Años</th>
                                <th>Obras</th>
                                <th>% Eval.</th>
                                <th>Hrs. Cap.</th>
                                <th>Meses Inv.</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var config in configuraciones.Where(x => _quickFilter(x)))
                            {
                                <tr>
                                    <td>
                                        @if (config.EsNivelEnum)
                                        {
                                            <span class="badge bg-primary">@config.NivelActualNombre</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">@config.NivelActualNombre</span>
                                        }
                                    </td>
                                    <td>
                                        @if (config.EsNivelEnum)
                                        {
                                            <span class="badge bg-primary">@config.NivelSolicitadoNombre</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">@config.NivelSolicitadoNombre</span>
                                        }
                                    </td>
                                    <td>@config.TiempoMinimoAnios</td>
                                    <td>@config.ObrasMinimas</td>
                                    <td>@config.PuntajeEvaluacionMinimo</td>
                                    <td>@config.HorasCapacitacionMinimas</td>
                                    <td>@config.TiempoInvestigacionMinimo</td>
                                    <td>
                                        <span class="config-badge @(config.EstaActivo ? "config-badge-success" : "config-badge-secondary")">
                                            @(config.EstaActivo ? "Activo" : "Inactivo")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="config-btn-group">
                                            <button class="config-btn config-btn-outline-primary config-btn-sm" 
                                                    title="Editar los requisitos de esta configuración"
                                                    @onclick="() => AbrirDialogoEditar(config)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="config-btn config-btn-outline-warning config-btn-sm" 
                                                    title="@(config.EstaActivo ? "Desactivar esta configuración" : "Activar esta configuración")"
                                                    @onclick="() => ToggleEstado(config)">
                                                <i class="fas fa-@(config.EstaActivo ? "eye" : "eye-slash")"></i>
                                            </button>
                                            <button class="config-btn config-btn-outline-danger config-btn-sm" 
                                                    title="Eliminar permanentemente esta configuración"
                                                    @onclick="() => EliminarConfiguracion(config)">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="config-alert config-alert-info">
                    <p>No hay configuraciones de requisitos registradas.</p>
                    <button class="config-btn config-btn-primary config-mt-3" 
                            title="Crear configuraciones automáticas con valores predeterminados para todos los niveles"
                            @onclick="InicializarConfiguracionesPorDefecto">
                        <i class="fas fa-plus config-me-1"></i>
                        Crear Configuraciones por Defecto
                    </button>
                </div>
            }
        </div>
    </div>

    @if (configuraciones.Any())
    {
        <div class="config-card">
            <div class="config-card-header" style="background: linear-gradient(135deg, rgba(138, 21, 56, 0.1) 0%, rgba(138, 21, 56, 0.05) 100%); color: var(--uta-primary);">
                <h5 class="config-card-title">Resumen de Cobertura</h5>
            </div>
            <div class="config-card-body">
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem;">
                    @foreach (var ascenso in GetTodosLosAscensos())
                    {
                        var tieneConfiguracion = configuraciones.Any(c => c.NivelActual == ascenso.Actual && c.NivelSolicitado == ascenso.Solicitado);
                        <div class="config-badge @(tieneConfiguracion ? "config-badge-success" : "config-badge-danger") config-p-2 config-w-100" style="text-align: left; display: flex; justify-content: space-between;">
                            <span>@ascenso.Nombre</span>
                            <span>@(tieneConfiguracion ? "✓ Configurado" : "✗ Falta")</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal de Edición Híbrido -->
<div class="modal fade" id="modalConfiguracion" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-uta-gradient text-white">
                <h5 class="modal-title">@(configuracionActual.Id == Guid.Empty ? "Nueva Configuración" : "Editar Configuración")</h5>
                <button type="button" class="btn-close btn-close-white" 
                        title="Cerrar sin guardar cambios"
                        data-bs-dismiss="modal" 
                        aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <!-- Selector de Tipo de Nivel -->
                    <div class="mb-4">
                        <label class="form-label fw-bold">Tipo de Configuración</label>
                        <div class="d-flex gap-3">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="tipoNivel" value="enum" 
                                       checked="@(tipoNivel == "enum")" 
                                       @onclick="@(() => OnTipoNivelChanged("enum"))" />
                                <label class="form-check-label">
                                    <i class="fas fa-layer-group text-primary me-1"></i>
                                    Niveles Predefinidos
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="tipoNivel" value="titulo" 
                                       checked="@(tipoNivel == "titulo")" 
                                       @onclick="@(() => OnTipoNivelChanged("titulo"))" />
                                <label class="form-check-label">
                                    <i class="fas fa-graduation-cap text-success me-1"></i>
                                    Títulos Académicos Dinámicos
                                </label>
                            </div>
                        </div>
                        <small class="text-muted">
                            Los niveles predefinidos son los tradicionales del sistema. Los títulos dinámicos permiten mayor flexibilidad.
                        </small>
                    </div>

                    <!-- Configuración para Niveles Enum -->
                    @if (tipoNivel == "enum")
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Nivel Actual</label>
                                <select class="form-select" @bind="configuracionEdicion.NivelActual">
                                    <option value="">-- Seleccionar nivel --</option>
                                    @foreach (var nivel in Enum.GetValues(typeof(NivelTitular)))
                                    {
                                        <option value="@nivel">@nivel</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Nivel Destino</label>
                                <select class="form-select" @bind="configuracionEdicion.NivelSolicitado">
                                    <option value="">-- Seleccionar nivel --</option>
                                    @foreach (var nivel in Enum.GetValues(typeof(NivelTitular)))
                                    {
                                        <option value="@nivel">@nivel</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }

                    <!-- Configuración para Títulos Dinámicos -->
                    @if (tipoNivel == "titulo")
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Título Actual</label>
                                <select class="form-select" @bind="configuracionEdicion.TituloActualId" 
                                        @bind:after="@(async () => await OnTituloActualChanged(configuracionEdicion.TituloActualId))">>
                                    <option value="">-- Seleccionar título --</option>
                                    @foreach (var titulo in titulosAcademicos.Where(t => t.EstaActivo))
                                    {
                                        <option value="@titulo.Id">@titulo.Nombre</option>
                                    }
                                </select>
                                @if (configuracionEdicion.TituloActualId.HasValue)
                                {
                                    var tituloSeleccionado = titulosAcademicos.FirstOrDefault(t => t.Id == configuracionEdicion.TituloActualId.Value);
                                    if (tituloSeleccionado != null && !string.IsNullOrEmpty(tituloSeleccionado.Descripcion))
                                    {
                                        <small class="text-muted">@tituloSeleccionado.Descripcion</small>
                                    }
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Título Destino</label>
                                @if (cargandoTitulos)
                                {
                                    <div class="d-flex align-items-center">
                                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                        <span class="text-muted">Cargando opciones...</span>
                                    </div>
                                }
                                else
                                {
                                    <select class="form-select" @bind="configuracionEdicion.TituloSolicitadoId"
                                            disabled="@(!configuracionEdicion.TituloActualId.HasValue || !titulosPosibles.Any())">
                                        <option value="">-- Seleccionar título --</option>
                                        @foreach (var titulo in titulosPosibles)
                                        {
                                            <option value="@titulo.Id">@titulo.Nombre</option>
                                        }
                                    </select>
                                    @if (!configuracionEdicion.TituloActualId.HasValue)
                                    {
                                        <small class="text-warning">Seleccione primero un título actual</small>
                                    }
                                    else if (!titulosPosibles.Any())
                                    {
                                        <small class="text-info">No hay títulos de ascenso disponibles para esta selección</small>
                                    }
                                    else if (configuracionEdicion.TituloSolicitadoId.HasValue)
                                    {
                                        var tituloSeleccionado = titulosPosibles.FirstOrDefault(t => t.Id == configuracionEdicion.TituloSolicitadoId.Value);
                                        if (tituloSeleccionado != null && !string.IsNullOrEmpty(tituloSeleccionado.Descripcion))
                                        {
                                            <small class="text-muted">@tituloSeleccionado.Descripcion</small>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    }

                    <!-- Configuración de Requisitos (común para ambos tipos) -->
                    <hr class="my-4" />
                    <h6 class="text-muted mb-3">
                        <i class="fas fa-cogs me-2"></i>
                        Requisitos de Ascenso
                    </h6>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Tiempo Mínimo (meses)</label>
                            <input type="number" class="form-control" @bind="configuracionEdicion.TiempoMinimoMeses" min="0" />
                            <small class="text-muted">Equivale a @(configuracionEdicion.TiempoMinimoMeses / 12) años y @(configuracionEdicion.TiempoMinimoMeses % 12) meses</small>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Obras Mínimas</label>
                            <input type="number" class="form-control" @bind="configuracionEdicion.ObrasMinimas" min="0" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">% Evaluación Mínimo</label>
                            <input type="number" class="form-control" @bind="configuracionEdicion.PuntajeEvaluacionMinimo" min="0" max="100" step="0.1" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Horas Capacitación</label>
                            <input type="number" class="form-control" @bind="configuracionEdicion.HorasCapacitacionMinimas" min="0" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Meses Investigación</label>
                        <input type="number" class="form-control" @bind="configuracionEdicion.TiempoInvestigacionMinimo" min="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción (Opcional)</label>
                        <textarea class="form-control" @bind="configuracionEdicion.Descripcion" rows="3" 
                                  placeholder="Descripción adicional para esta configuración de ascenso..."></textarea>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="chkActivo" @bind="configuracionEdicion.EstaActivo" />
                        <label class="form-check-label" for="chkActivo">Configuración Activa</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" 
                        title="Cancelar y cerrar sin guardar cambios"
                        data-bs-dismiss="modal">
                    Cancelar
                </button>
                <button type="button" class="btn btn-primary" 
                        title="Guardar la configuración de requisitos"
                        @onclick="GuardarConfiguracion">
                    <i class="fas fa-save me-1"></i> Guardar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Confirmación de Eliminación -->
<ConfirmDeleteModal 
    IsVisible="@mostrarModalConfirmacion" 
    ItemName="@($"{configuracionAEliminar?.NivelActualNombre} → {configuracionAEliminar?.NivelSolicitadoNombre}")"
    ItemDescription="@($"Configuración de requisitos de ascenso")"
    IsProcessing="@eliminandoConfiguracion"
    OnConfirm="@ConfirmarEliminacion"
    OnCancel="@CancelarEliminacion" />

<script>
    // Funciones directamente definidas en la página
    window.mostrarModal = function(id) {
        const modalElement = document.getElementById(id);
        if (modalElement) {
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
        }
    };

    window.ocultarModal = function(id) {
        const modalElement = document.getElementById(id);
        if (modalElement) {
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            }
        }
    };



    // Inicializar popovers si es necesario
    document.addEventListener("DOMContentLoaded", function() {
        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        popoverTriggerList.map(function(popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl);
        });
    });
</script>

@code {
    private List<ConfiguracionRequisitoDto> configuraciones = new();
    private List<TituloAcademicoOpcionDto> titulosAcademicos = new();
    private List<TituloAcademicoOpcionDto> titulosPosibles = new();
    private bool cargando = true;
    private string _searchString = "";
    private ConfiguracionRequisitoDto configuracionActual = new();
    private CrearActualizarConfiguracionRequisitoDto configuracionEdicion = new();
    private bool esEdicion = false;
    
    // Variables para el formulario híbrido
    private string tipoNivel = "enum"; // "enum" o "titulo"
    private bool cargandoTitulos = false;

    // Variables para el modal de confirmación de eliminación
    private bool mostrarModalConfirmacion = false;
    private ConfiguracionRequisitoDto? configuracionAEliminar = null;
    private bool eliminandoConfiguracion = false;

    private Func<ConfiguracionRequisitoDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // Buscar en nombres calculados (que ya manejan la lógica híbrida)
        if (x.NivelActualNombre?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (x.NivelSolicitadoNombre?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (x.Descripcion?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await CargarConfiguraciones();
        await CargarTitulosAcademicos();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Método sincrónico sin operaciones async
        base.OnAfterRender(firstRender);
    }

    private async Task CargarTitulosAcademicos()
    {
        try
        {
            titulosAcademicos = await TitulosService.GetOpcionesAsync();
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error al cargar títulos académicos: {ex.Message}");
        }
    }

    private async Task OnTituloActualChanged(Guid? tituloId)
    {
        if (tituloId.HasValue)
        {
            cargandoTitulos = true;
            StateHasChanged();
            
            try
            {
                titulosPosibles = await TitulosService.GetPosiblesAscensosAsync(tituloId.Value);
                configuracionEdicion.TituloSolicitadoId = null; // Reset selection
            }
            catch (Exception ex)
            {
                MostrarAlerta("error", $"Error al cargar títulos posibles: {ex.Message}");
            }
            finally
            {
                cargandoTitulos = false;
                StateHasChanged();
            }
        }
        else
        {
            titulosPosibles.Clear();
            configuracionEdicion.TituloSolicitadoId = null;
        }
    }

    private async Task CargarConfiguraciones()
    {
        try
        {
            cargando = true;
            StateHasChanged();

            var response = await Http.GetAsync("/api/admin/ConfiguracionRequisitos");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<ConfiguracionRequisitoDto>>();
                configuraciones = result ?? new List<ConfiguracionRequisitoDto>();
            }
            else
            {
                MostrarAlerta("error", "Error al cargar las configuraciones");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task AbrirDialogoCrear()
    {
        configuracionEdicion = new CrearActualizarConfiguracionRequisitoDto();
        configuracionActual = new ConfiguracionRequisitoDto();
        tipoNivel = "enum"; // Default to enum
        titulosPosibles.Clear();
        esEdicion = false;
        await JSRuntime.InvokeVoidAsync("mostrarModal", "modalConfiguracion");
    }

    private async Task AbrirDialogoEditar(ConfiguracionRequisitoDto configuracion)
    {
        configuracionActual = configuracion;
        configuracionEdicion = new CrearActualizarConfiguracionRequisitoDto
        {
            NivelActual = configuracion.NivelActual,
            NivelSolicitado = configuracion.NivelSolicitado,
            TituloActualId = configuracion.TituloActualId,
            TituloSolicitadoId = configuracion.TituloSolicitadoId,
            TiempoMinimoMeses = configuracion.TiempoMinimoMeses,
            ObrasMinimas = configuracion.ObrasMinimas,
            PuntajeEvaluacionMinimo = configuracion.PuntajeEvaluacionMinimo,
            HorasCapacitacionMinimas = configuracion.HorasCapacitacionMinimas,
            TiempoInvestigacionMinimo = configuracion.TiempoInvestigacionMinimo,
            EstaActivo = configuracion.EstaActivo,
            Descripcion = configuracion.Descripcion
        };
        
        // Determine the type based on current configuration
        tipoNivel = configuracion.EsNivelEnum ? "enum" : "titulo";
        
        // Load possible titles if editing a title-based configuration
        if (tipoNivel == "titulo" && configuracion.TituloActualId.HasValue)
        {
            await OnTituloActualChanged(configuracion.TituloActualId.Value);
        }
        else
        {
            titulosPosibles.Clear();
        }
        
        esEdicion = true;
        await JSRuntime.InvokeVoidAsync("mostrarModal", "modalConfiguracion");
    }

    private void OnTipoNivelChanged(string nuevoTipo)
    {
        if (tipoNivel != nuevoTipo)
        {
            tipoNivel = nuevoTipo;
            
            // Reset form values when switching type
            if (tipoNivel == "enum")
            {
                configuracionEdicion.TituloActualId = null;
                configuracionEdicion.TituloSolicitadoId = null;
                titulosPosibles.Clear();
            }
            else
            {
                configuracionEdicion.NivelActual = null;
                configuracionEdicion.NivelSolicitado = null;
            }
            
            StateHasChanged();
        }
    }

    private bool ValidarFormulario()
    {
        if (tipoNivel == "enum")
        {
            return configuracionEdicion.NivelActual.HasValue && configuracionEdicion.NivelSolicitado.HasValue;
        }
        else
        {
            return configuracionEdicion.TituloActualId.HasValue && configuracionEdicion.TituloSolicitadoId.HasValue;
        }
    }

    private async Task GuardarConfiguracion()
    {
        if (!ValidarFormulario())
        {
            MostrarAlerta("error", "Por favor complete todos los campos requeridos");
            return;
        }

        if (esEdicion)
        {
            await ActualizarConfiguracion(configuracionActual.Id, configuracionEdicion);
        }
        else
        {
            await CrearConfiguracion(configuracionEdicion);
        }
        await JSRuntime.InvokeVoidAsync("ocultarModal", "modalConfiguracion");
    }

    private async Task CrearConfiguracion(CrearActualizarConfiguracionRequisitoDto nueva)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/admin/ConfiguracionRequisitos", nueva);
            if (response.IsSuccessStatusCode)
            {
                MostrarAlerta("success", "Configuración creada exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta("error", $"Error al crear la configuración: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private async Task ActualizarConfiguracion(Guid id, CrearActualizarConfiguracionRequisitoDto actualizada)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/admin/ConfiguracionRequisitos/{id}", actualizada);
            if (response.IsSuccessStatusCode)
            {
                MostrarAlerta("success", "Configuración actualizada exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta("error", $"Error al actualizar la configuración: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private async Task ToggleEstado(ConfiguracionRequisitoDto configuracion)
    {
        try
        {
            var response = await Http.PatchAsync($"/api/admin/ConfiguracionRequisitos/{configuracion.Id}/toggle-activo", null);
            if (response.IsSuccessStatusCode)
            {
                var nuevoEstado = !configuracion.EstaActivo;
                MostrarAlerta("success", $"Configuración {(nuevoEstado ? "activada" : "desactivada")} exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                MostrarAlerta("error", "Error al cambiar el estado de la configuración");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private void EliminarConfiguracion(ConfiguracionRequisitoDto configuracion)
    {
        configuracionAEliminar = configuracion;
        mostrarModalConfirmacion = true;
        StateHasChanged();
    }

    private async Task ConfirmarEliminacion()
    {
        if (configuracionAEliminar == null) return;

        try
        {
            eliminandoConfiguracion = true;
            StateHasChanged();

            var response = await Http.DeleteAsync($"/api/admin/ConfiguracionRequisitos/{configuracionAEliminar.Id}");
            if (response.IsSuccessStatusCode)
            {
                MostrarAlerta("success", "Configuración eliminada exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                MostrarAlerta("error", "Error al eliminar la configuración");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
        finally
        {
            eliminandoConfiguracion = false;
            mostrarModalConfirmacion = false;
            configuracionAEliminar = null;
            StateHasChanged();
        }
    }

    private void CancelarEliminacion()
    {
        mostrarModalConfirmacion = false;
        configuracionAEliminar = null;
        StateHasChanged();
    }

    private async Task InicializarConfiguracionesPorDefecto()
    {
        try
        {
            var response = await Http.PostAsync("/api/admin/ConfiguracionRequisitos/inicializar-defecto", null);
            if (response.IsSuccessStatusCode)
            {
                MostrarAlerta("success", "Configuraciones por defecto creadas exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta("error", $"Error al crear configuraciones por defecto: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private List<(NivelTitular Actual, NivelTitular Solicitado, string Nombre)> GetTodosLosAscensos()
    {
        return new List<(NivelTitular, NivelTitular, string)>
        {
            (NivelTitular.Titular1, NivelTitular.Titular2, "Titular 1 → Titular 2"),
            (NivelTitular.Titular2, NivelTitular.Titular3, "Titular 2 → Titular 3"),
            (NivelTitular.Titular3, NivelTitular.Titular4, "Titular 3 → Titular 4"),
            (NivelTitular.Titular4, NivelTitular.Titular5, "Titular 4 → Titular 5")
        };
    }

    private void MostrarAlerta(string tipo, string mensaje)
    {
        switch (tipo.ToLower())
        {
            case "success":
                ToastService.ShowSuccess(mensaje);
                break;
            case "error":
                ToastService.ShowError(mensaje);
                break;
            case "warning":
                ToastService.ShowWarning(mensaje);
                break;
            case "info":
            default:
                ToastService.ShowInfo(mensaje);
                break;
        }
    }
}
