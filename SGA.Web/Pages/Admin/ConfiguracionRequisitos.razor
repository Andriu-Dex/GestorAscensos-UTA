@page "/admin/configuracion-requisitos"
@using SGA.Web.Models.Admin
@using SGA.Web.Models.Enums
@using SGA.Web.Extensions
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrador")]

<h1 class="visually-hidden">Configuración de Requisitos de Ascenso</h1>

<link href="css/configuracion-requisitos.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="config-container">
    <!-- Header Section -->
    <div class="config-header">
        <h1 class="config-title">
            <i class="fas fa-cogs"></i>
            Configuración de Requisitos de Ascenso
        </h1>
        <p class="config-subtitle">
            Administra los requisitos dinámicos para cada nivel de ascenso docente
        </p>
    </div>

    <!-- Main Card -->
    <div class="config-card config-mb-4">
        <div class="config-card-header">
            <h5 class="config-card-title">Requisitos Dinámicos por Nivel</h5>
            <div class="config-d-flex config-gap-2">
                <button class="config-btn config-btn-light config-btn-sm config-me-2" 
                        title="Crear una nueva configuración de requisitos para un nivel de ascenso"
                        data-bs-toggle="tooltip"
                        @onclick="AbrirDialogoCrear">
                    <i class="fas fa-plus config-me-1"></i>
                    Nueva Configuración
                </button>
                <button class="config-btn config-btn-outline-light config-btn-sm" 
                        title="Actualizar la lista de configuraciones desde la base de datos"
                        data-bs-toggle="tooltip"
                        @onclick="CargarConfiguraciones">
                    <i class="fas fa-sync-alt config-me-1"></i>
                    Actualizar
                </button>
            </div>
        </div>
        <div class="config-card-body">
            @if (cargando)
            {
                <div class="config-loading">
                    <div class="config-spinner" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="config-mt-3 config-text-uta">Cargando configuraciones...</p>
                </div>
            }
            else if (configuraciones.Any())
            {
                <div class="config-table-container">
                    <div class="config-search-container">
                        <h6 class="config-text-muted">Configuraciones de Requisitos</h6>
                        <div class="config-search-group">
                            <i class="fas fa-search config-search-icon"></i>
                            <input type="text" class="config-search-input" placeholder="Buscar..." 
                                   @bind-value="_searchString" @bind-value:event="oninput" />
                        </div>
                    </div>
                    <table class="config-table">
                        <thead>
                            <tr>
                                <th>Nivel Actual</th>
                                <th>Nivel Destino</th>
                                <th>Años</th>
                                <th>Obras</th>
                                <th>% Eval.</th>
                                <th>Hrs. Cap.</th>
                                <th>Meses Inv.</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var config in configuraciones.Where(x => _quickFilter(x)))
                            {
                                <tr>
                                    <td>@config.NivelActual</td>
                                    <td>@config.NivelSolicitado</td>
                                    <td>@config.TiempoMinimoAnios</td>
                                    <td>@config.ObrasMinimas</td>
                                    <td>@config.PuntajeEvaluacionMinimo</td>
                                    <td>@config.HorasCapacitacionMinimas</td>
                                    <td>@config.TiempoInvestigacionMinimo</td>
                                    <td>
                                        <span class="config-badge @(config.EstaActivo ? "config-badge-success" : "config-badge-secondary")">
                                            @(config.EstaActivo ? "Activo" : "Inactivo")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="config-btn-group">
                                            <button class="config-btn config-btn-outline-primary config-btn-sm" 
                                                    title="Editar los requisitos de esta configuración"
                                                    data-bs-toggle="tooltip"
                                                    @onclick="() => AbrirDialogoEditar(config)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="config-btn config-btn-outline-warning config-btn-sm" 
                                                    title="@(config.EstaActivo ? "Desactivar esta configuración" : "Activar esta configuración")"
                                                    data-bs-toggle="tooltip"
                                                    @onclick="() => ToggleEstado(config)">
                                                <i class="fas fa-@(config.EstaActivo ? "eye-slash" : "eye")"></i>
                                            </button>
                                            <button class="config-btn config-btn-outline-danger config-btn-sm" 
                                                    title="Eliminar permanentemente esta configuración"
                                                    data-bs-toggle="tooltip"
                                                    @onclick="() => EliminarConfiguracion(config)">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="config-alert config-alert-info">
                    <p>No hay configuraciones de requisitos registradas.</p>
                    <button class="config-btn config-btn-primary config-mt-3" 
                            title="Crear configuraciones automáticas con valores predeterminados para todos los niveles"
                            data-bs-toggle="tooltip"
                            @onclick="InicializarConfiguracionesPorDefecto">
                        <i class="fas fa-plus config-me-1"></i>
                        Crear Configuraciones por Defecto
                    </button>
                </div>
            }
        </div>
    </div>

    @if (configuraciones.Any())
    {
        <div class="config-card">
            <div class="config-card-header" style="background: linear-gradient(135deg, rgba(138, 21, 56, 0.1) 0%, rgba(138, 21, 56, 0.05) 100%); color: var(--uta-primary);">
                <h5 class="config-card-title">Resumen de Cobertura</h5>
            </div>
            <div class="config-card-body">
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem;">
                    @foreach (var ascenso in GetTodosLosAscensos())
                    {
                        var tieneConfiguracion = configuraciones.Any(c => c.NivelActual == ascenso.Actual && c.NivelSolicitado == ascenso.Solicitado);
                        <div class="config-badge @(tieneConfiguracion ? "config-badge-success" : "config-badge-danger") config-p-2 config-w-100" style="text-align: left; display: flex; justify-content: space-between;">
                            <span>@ascenso.Nombre</span>
                            <span>@(tieneConfiguracion ? "✓ Configurado" : "✗ Falta")</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal de Edición -->
<div class="modal fade" id="modalConfiguracion" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-uta-gradient text-white">
                <h5 class="modal-title">@(configuracionActual.Id == Guid.Empty ? "Nueva Configuración" : "Editar Configuración")</h5>
                <button type="button" class="btn-close btn-close-white" 
                        title="Cerrar sin guardar cambios"
                        data-bs-toggle="tooltip"
                        data-bs-dismiss="modal" 
                        aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label class="form-label">Nivel Actual</label>
                        <select class="form-select" @bind="configuracionEdicion.NivelActual">
                            @foreach (var nivel in Enum.GetValues(typeof(NivelTitular)))
                            {
                                <option value="@nivel">@nivel</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Nivel Destino</label>
                        <select class="form-select" @bind="configuracionEdicion.NivelSolicitado">
                            @foreach (var nivel in Enum.GetValues(typeof(NivelTitular)))
                            {
                                <option value="@nivel">@nivel</option>
                            }
                        </select>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Tiempo Mínimo (meses)</label>
                            <input type="number" class="form-control" @bind="configuracionEdicion.TiempoMinimoMeses" min="0" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Obras Mínimas</label>
                            <input type="number" class="form-control" @bind="configuracionEdicion.ObrasMinimas" min="0" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">% Evaluación Mínimo</label>
                            <input type="number" class="form-control" @bind="configuracionEdicion.PuntajeEvaluacionMinimo" min="0" max="100" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Horas Capacitación</label>
                            <input type="number" class="form-control" @bind="configuracionEdicion.HorasCapacitacionMinimas" min="0" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Meses Investigación</label>
                        <input type="number" class="form-control" @bind="configuracionEdicion.TiempoInvestigacionMinimo" min="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <textarea class="form-control" @bind="configuracionEdicion.Descripcion" rows="3"></textarea>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="chkActivo" @bind="configuracionEdicion.EstaActivo" />
                        <label class="form-check-label" for="chkActivo">Configuración Activa</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" 
                        title="Cancelar y cerrar sin guardar cambios"
                        data-bs-toggle="tooltip"
                        data-bs-dismiss="modal">
                    Cancelar
                </button>
                <button type="button" class="btn btn-primary" 
                        title="Guardar la configuración de requisitos"
                        data-bs-toggle="tooltip"
                        @onclick="GuardarConfiguracion">
                    <i class="fas fa-save me-1"></i> Guardar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Funciones directamente definidas en la página
    window.mostrarModal = function(id) {
        const modalElement = document.getElementById(id);
        if (modalElement) {
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
            
            // Reinicializar tooltips cuando se abre el modal
            setTimeout(function() {
                window.inicializarTooltips();
            }, 100);
        }
    };

    window.ocultarModal = function(id) {
        const modalElement = document.getElementById(id);
        if (modalElement) {
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            }
        }
    };

    // Función para inicializar tooltips
    window.inicializarTooltips = function() {
        // Eliminar tooltips existentes
        const existingTooltips = document.querySelectorAll('.tooltip');
        existingTooltips.forEach(tooltip => tooltip.remove());
        
        // Inicializar nuevos tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function(tooltipTriggerEl) {
            // Destruir tooltip existente si existe
            const existingTooltip = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
            if (existingTooltip) {
                existingTooltip.dispose();
            }
            // Crear nuevo tooltip
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    };

    window.mostrarToast = function(tipo, mensaje) {
        // Crear el contenedor del toast si no existe
        let toastContainer = document.getElementById("toast-container");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.id = "toast-container";
            toastContainer.className = "toast-container position-fixed bottom-0 end-0 p-3";
            document.body.appendChild(toastContainer);
        }

        // Crear el elemento toast
        const toastId = "toast-" + Date.now();
        const toastHTML = `
            <div id="${toastId}" class="toast align-items-center text-white bg-${tipo === "success" ? "success" : tipo === "error" ? "danger" : "info"}" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        ${mensaje}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        `;
        
        toastContainer.insertAdjacentHTML("beforeend", toastHTML);
        
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement, {
            autohide: true,
            delay: 5000
        });
        
        toast.show();
        
        // Eliminar el toast del DOM después de ocultarse
        toastElement.addEventListener("hidden.bs.toast", function() {
            toastElement.remove();
        });
    };

    // Inicializar tooltips y popovers
    document.addEventListener("DOMContentLoaded", function() {
        window.inicializarTooltips();
        
        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        popoverTriggerList.map(function(popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl);
        });
    });

    // Reinicializar tooltips cuando Blazor actualiza el DOM
    window.addEventListener('blazor-navigated', function() {
        setTimeout(function() {
            window.inicializarTooltips();
        }, 100);
    });
</script>

@code {
    private List<ConfiguracionRequisitoDto> configuraciones = new();
    private bool cargando = true;
    private string _searchString = "";
    private ConfiguracionRequisitoDto configuracionActual = new();
    private CrearActualizarConfiguracionRequisitoDto configuracionEdicion = new();
    private bool esEdicion = false;

    private Func<ConfiguracionRequisitoDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.NivelActual.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.NivelSolicitado.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Descripcion?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await CargarConfiguraciones();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Método sincrónico sin operaciones async
        base.OnAfterRender(firstRender);
    }

    private async Task CargarConfiguraciones()
    {
        try
        {
            cargando = true;
            StateHasChanged();

            var response = await Http.GetAsync("/api/admin/ConfiguracionRequisitos");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<ConfiguracionRequisitoDto>>();
                configuraciones = result ?? new List<ConfiguracionRequisitoDto>();
            }
            else
            {
                await MostrarAlerta("error", "Error al cargar las configuraciones");
            }
        }
        catch (Exception ex)
        {
            await MostrarAlerta("error", $"Error: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
            
            // Reinicializar tooltips después de actualizar el DOM
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("inicializarTooltips");
        }
    }

    private async Task AbrirDialogoCrear()
    {
        configuracionEdicion = new CrearActualizarConfiguracionRequisitoDto();
        configuracionActual = new ConfiguracionRequisitoDto();
        esEdicion = false;
        await JSRuntime.InvokeVoidAsync("mostrarModal", "modalConfiguracion");
    }

    private async Task AbrirDialogoEditar(ConfiguracionRequisitoDto configuracion)
    {
        configuracionActual = configuracion;
        configuracionEdicion = new CrearActualizarConfiguracionRequisitoDto
        {
            NivelActual = configuracion.NivelActual,
            NivelSolicitado = configuracion.NivelSolicitado,
            TiempoMinimoMeses = configuracion.TiempoMinimoMeses,
            ObrasMinimas = configuracion.ObrasMinimas,
            PuntajeEvaluacionMinimo = configuracion.PuntajeEvaluacionMinimo,
            HorasCapacitacionMinimas = configuracion.HorasCapacitacionMinimas,
            TiempoInvestigacionMinimo = configuracion.TiempoInvestigacionMinimo,
            EstaActivo = configuracion.EstaActivo,
            Descripcion = configuracion.Descripcion
        };
        esEdicion = true;
        await JSRuntime.InvokeVoidAsync("mostrarModal", "modalConfiguracion");
    }

    private async Task GuardarConfiguracion()
    {
        if (esEdicion)
        {
            await ActualizarConfiguracion(configuracionActual.Id, configuracionEdicion);
        }
        else
        {
            await CrearConfiguracion(configuracionEdicion);
        }
        await JSRuntime.InvokeVoidAsync("ocultarModal", "modalConfiguracion");
    }

    private async Task CrearConfiguracion(CrearActualizarConfiguracionRequisitoDto nueva)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/admin/ConfiguracionRequisitos", nueva);
            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta("success", "Configuración creada exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await MostrarAlerta("error", $"Error al crear la configuración: {error}");
            }
        }
        catch (Exception ex)
        {
            await MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private async Task ActualizarConfiguracion(Guid id, CrearActualizarConfiguracionRequisitoDto actualizada)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/admin/ConfiguracionRequisitos/{id}", actualizada);
            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta("success", "Configuración actualizada exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await MostrarAlerta("error", $"Error al actualizar la configuración: {error}");
            }
        }
        catch (Exception ex)
        {
            await MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private async Task ToggleEstado(ConfiguracionRequisitoDto configuracion)
    {
        try
        {
            var response = await Http.PatchAsync($"/api/admin/ConfiguracionRequisitos/{configuracion.Id}/toggle-activo", null);
            if (response.IsSuccessStatusCode)
            {
                var nuevoEstado = !configuracion.EstaActivo;
                await MostrarAlerta("success", $"Configuración {(nuevoEstado ? "activada" : "desactivada")} exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                await MostrarAlerta("error", "Error al cambiar el estado de la configuración");
            }
        }
        catch (Exception ex)
        {
            await MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private async Task EliminarConfiguracion(ConfiguracionRequisitoDto configuracion)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", 
            $"¿Está seguro que desea eliminar la configuración para el ascenso {configuracion.NivelActual} → {configuracion.NivelSolicitado}?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/admin/ConfiguracionRequisitos/{configuracion.Id}");
                if (response.IsSuccessStatusCode)
                {
                    await MostrarAlerta("success", "Configuración eliminada exitosamente");
                    await CargarConfiguraciones();
                }
                else
                {
                    await MostrarAlerta("error", "Error al eliminar la configuración");
                }
            }
            catch (Exception ex)
            {
                await MostrarAlerta("error", $"Error: {ex.Message}");
            }
        }
    }

    private async Task InicializarConfiguracionesPorDefecto()
    {
        try
        {
            var response = await Http.PostAsync("/api/admin/ConfiguracionRequisitos/inicializar-defecto", null);
            if (response.IsSuccessStatusCode)
            {
                await MostrarAlerta("success", "Configuraciones por defecto creadas exitosamente");
                await CargarConfiguraciones();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await MostrarAlerta("error", $"Error al crear configuraciones por defecto: {error}");
            }
        }
        catch (Exception ex)
        {
            await MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private List<(NivelTitular Actual, NivelTitular Solicitado, string Nombre)> GetTodosLosAscensos()
    {
        return new List<(NivelTitular, NivelTitular, string)>
        {
            (NivelTitular.Titular1, NivelTitular.Titular2, "Titular 1 → Titular 2"),
            (NivelTitular.Titular2, NivelTitular.Titular3, "Titular 2 → Titular 3"),
            (NivelTitular.Titular3, NivelTitular.Titular4, "Titular 3 → Titular 4"),
            (NivelTitular.Titular4, NivelTitular.Titular5, "Titular 4 → Titular 5")
        };
    }

    private async Task MostrarAlerta(string tipo, string mensaje)
    {
        await JSRuntime.InvokeVoidAsync("mostrarToast", tipo, mensaje);
    }
}
