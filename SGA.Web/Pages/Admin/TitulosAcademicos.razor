@page "/admin/titulos-academicos"
@using SGA.Web.Models.Admin
@using SGA.Web.Services
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject TitulosAcademicosService TitulosService
@inject Blazored.Toast.Services.IToastService ToastService
@attribute [Authorize(Roles = "Administrador")]

<h1 class="visually-hidden">Gestión de Títulos Académicos</h1>

<link href="css/configuracion-requisitos.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="config-container">
    <!-- Header Section -->
    <div class="config-header">
        <h1 class="config-title">
            <i class="fas fa-graduation-cap"></i>
            Gestión de Títulos Académicos
        </h1>
        <p class="config-subtitle">
            Administra los títulos académicos dinámicos para configuraciones de ascenso personalizadas
        </p>
    </div>

    <!-- Main Card -->
    <div class="config-card config-mb-4">
        <div class="config-card-header">
            <h5 class="config-card-title">Títulos Académicos Registrados</h5>
            <div class="config-d-flex config-gap-2">
                <button class="config-btn config-btn-light config-btn-sm config-me-2" 
                        title="Crear un nuevo título académico"
                        @onclick="AbrirDialogoCrear">
                    <i class="fas fa-plus config-me-1"></i>
                    Nuevo Título
                </button>
                <button class="config-btn config-btn-outline-light config-btn-sm" 
                        title="Actualizar la lista de títulos desde la base de datos"
                        @onclick="CargarTitulos">
                    <i class="fas fa-sync-alt config-me-1"></i>
                    Actualizar
                </button>
            </div>
        </div>
        <div class="config-card-body">
            @if (cargando)
            {
                <div class="config-loading">
                    <div class="config-spinner" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="config-mt-3 config-text-uta">Cargando títulos académicos...</p>
                </div>
            }
            else if (titulos.Any())
            {
                <div class="config-table-container">
                    <div class="config-search-container">
                        <h6 class="config-text-muted">Títulos Académicos Dinámicos</h6>
                        <div class="config-search-group">
                            <i class="fas fa-search config-search-icon"></i>
                            <input type="text" class="config-search-input" placeholder="Buscar títulos..." 
                                   @bind-value="_searchString" @bind-value:event="oninput" />
                        </div>
                    </div>
                    <table class="config-table">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Código</th>
                                <th>Orden</th>
                                <th>Descripción</th>
                                <th>Estado</th>
                                <th>Tipo</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var titulo in titulos.Where(x => _quickFilter(x)))
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(titulo.ColorHex))
                                            {
                                                <span class="badge me-2" style="background-color: @titulo.ColorHex; color: white;">
                                                    @titulo.Nombre
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">@titulo.Nombre</span>
                                            }
                                        </div>
                                    </td>
                                    <td><code>@titulo.Codigo</code></td>
                                    <td>
                                        <span class="badge bg-info">@titulo.OrdenJerarquico</span>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(titulo.Descripcion))
                                        {
                                            <small class="text-muted">@titulo.Descripcion</small>
                                        }
                                        else
                                        {
                                            <em class="text-muted">Sin descripción</em>
                                        }
                                    </td>
                                    <td>
                                        <span class="config-badge @(titulo.EstaActivo ? "config-badge-success" : "config-badge-secondary")">
                                            @(titulo.EstaActivo ? "Activo" : "Inactivo")
                                        </span>
                                    </td>
                                    <td>
                                        @if (titulo.EsTituloSistema)
                                        {
                                            <span class="badge bg-warning text-dark">
                                                <i class="fas fa-cog me-1"></i>Sistema
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">
                                                <i class="fas fa-user me-1"></i>Personalizado
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <div class="config-btn-group">
                                            <button class="config-btn config-btn-outline-primary config-btn-sm" 
                                                    title="Editar este título académico"
                                                    @onclick="() => AbrirDialogoEditar(titulo)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="config-btn config-btn-outline-warning config-btn-sm" 
                                                    title="@(titulo.EstaActivo ? "Desactivar este título" : "Activar este título")"
                                                    @onclick="() => ToggleEstado(titulo)">
                                                <i class="fas fa-@(titulo.EstaActivo ? "eye-slash" : "eye")"></i>
                                            </button>
                                            @if (!titulo.EsTituloSistema)
                                            {
                                                <button class="config-btn config-btn-outline-danger config-btn-sm" 
                                                        title="Eliminar permanentemente este título"
                                                        @onclick="() => EliminarTitulo(titulo)">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="config-alert config-alert-info">
                    <div class="text-center">
                        <i class="fas fa-graduation-cap fa-3x text-muted mb-3"></i>
                        <h5>No hay títulos académicos registrados</h5>
                        <p class="text-muted mb-4">
                            Los títulos académicos dinámicos permiten crear configuraciones de ascenso personalizadas.
                            <br>Comienza creando tu primer título académico.
                        </p>
                        <button class="config-btn config-btn-primary" 
                                title="Crear el primer título académico"
                                @onclick="AbrirDialogoCrear">
                            <i class="fas fa-plus config-me-1"></i>
                            Crear Primer Título
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    @if (titulos.Any())
    {
        <div class="config-card">
            <div class="config-card-header" style="background: linear-gradient(135deg, rgba(40, 167, 69, 0.1) 0%, rgba(40, 167, 69, 0.05) 100%); color: #28a745;">
                <h5 class="config-card-title">
                    <i class="fas fa-chart-bar me-2"></i>
                    Estadísticas de Títulos
                </h5>
            </div>
            <div class="config-card-body">
                <div class="row text-center">
                    <div class="col-md-3">
                        <div class="config-stat-card">
                            <div class="config-stat-number">@titulos.Count</div>
                            <div class="config-stat-label">Total de Títulos</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="config-stat-card">
                            <div class="config-stat-number text-success">@titulos.Count(t => t.EstaActivo)</div>
                            <div class="config-stat-label">Títulos Activos</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="config-stat-card">
                            <div class="config-stat-number text-warning">@titulos.Count(t => t.EsTituloSistema)</div>
                            <div class="config-stat-label">Títulos del Sistema</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="config-stat-card">
                            <div class="config-stat-number text-info">@titulos.Count(t => !t.EsTituloSistema)</div>
                            <div class="config-stat-label">Títulos Personalizados</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal de Edición de Títulos -->
<div class="modal fade" id="modalTitulo" tabindex="-1" data-bs-backdrop="static" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-graduation-cap me-2"></i>
                    @(esEdicion ? "Editar Título Académico" : "Nuevo Título Académico")
                </h5>
                <button type="button" class="btn-close btn-close-white" 
                        title="Cerrar sin guardar cambios"
                        data-bs-dismiss="modal" 
                        aria-label="Close">
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row">
                        <div class="col-md-8 mb-3">
                            <label class="form-label">
                                <i class="fas fa-tag me-1"></i>
                                Nombre del Título *
                            </label>
                            <input type="text" class="form-control" @bind="tituloEdicion.Nombre" 
                                   placeholder="Ej: Profesor Asistente de Investigación" 
                                   required maxlength="100" />
                            <small class="text-muted">Nombre completo y descriptivo del título académico</small>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">
                                <i class="fas fa-code me-1"></i>
                                Código *
                            </label>
                            <input type="text" class="form-control" @bind="tituloEdicion.Codigo" 
                                   placeholder="Ej: PAI" 
                                   required maxlength="20" style="text-transform: uppercase;" />
                            <small class="text-muted">Código único (mayúsculas)</small>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="fas fa-sort-numeric-up me-1"></i>
                                Orden Jerárquico *
                            </label>
                            <input type="number" class="form-control" @bind="tituloEdicion.OrdenJerarquico" 
                                   min="1" max="999" required />
                            <small class="text-muted">Orden en la jerarquía de ascensos (1 = más bajo)</small>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="fas fa-palette me-1"></i>
                                Color (Opcional)
                            </label>
                            <div class="input-group">
                                <input type="color" class="form-control form-control-color" @bind="tituloEdicion.ColorHex" />
                                <input type="text" class="form-control" @bind="tituloEdicion.ColorHex" 
                                       placeholder="#28a745" maxlength="7" />
                            </div>
                            <small class="text-muted">Color para mostrar en la interfaz</small>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="fas fa-align-left me-1"></i>
                            Descripción (Opcional)
                        </label>
                        <textarea class="form-control" @bind="tituloEdicion.Descripcion" rows="3" 
                                  placeholder="Descripción detallada del título académico, requisitos generales, etc."
                                  maxlength="500"></textarea>
                        <small class="text-muted">Descripción visible para ayudar a los usuarios</small>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check form-switch mb-3">
                                <input class="form-check-input" type="checkbox" id="chkActivo" @bind="tituloEdicion.EstaActivo" />
                                <label class="form-check-label" for="chkActivo">
                                    <i class="fas fa-eye me-1"></i>
                                    Título Activo
                                </label>
                                <div class="form-text">Los títulos inactivos no aparecen en las configuraciones</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check form-switch mb-3">
                                <input class="form-check-input" type="checkbox" id="chkSistema" @bind="tituloEdicion.EsTituloSistema" />
                                <label class="form-check-label" for="chkSistema">
                                    <i class="fas fa-cog me-1"></i>
                                    Título del Sistema
                                </label>
                                <div class="form-text">Los títulos del sistema no pueden ser eliminados</div>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(tituloEdicion.Nombre))
                    {
                        <div class="alert alert-info">
                            <h6><i class="fas fa-eye me-1"></i>Vista Previa:</h6>
                            <div class="d-flex align-items-center">
                                @if (!string.IsNullOrEmpty(tituloEdicion.ColorHex))
                                {
                                    <span class="badge me-2" style="background-color: @tituloEdicion.ColorHex; color: white;">
                                        @tituloEdicion.Nombre
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary me-2">@tituloEdicion.Nombre</span>
                                }
                                <code class="me-2">@tituloEdicion.Codigo</code>
                                <span class="badge bg-info">Orden: @tituloEdicion.OrdenJerarquico</span>
                            </div>
                        </div>
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" 
                        title="Cancelar y cerrar sin guardar cambios"
                        data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>
                    Cancelar
                </button>
                <button type="button" class="btn btn-success" 
                        title="Guardar el título académico"
                        @onclick="GuardarTitulo"
                        disabled="@(!EsFormularioValido())">
                    <i class="fas fa-save me-1"></i> 
                    @(esEdicion ? "Actualizar" : "Crear") Título
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Confirmación de Eliminación -->
<ConfirmDeleteModal 
    IsVisible="@mostrarModalConfirmacion" 
    ItemName="@tituloAEliminar?.Nombre"
    ItemDescription="@($"Código: {tituloAEliminar?.Codigo} - Orden: {tituloAEliminar?.OrdenJerarquico}")"
    IsProcessing="@eliminandoTitulo"
    OnConfirm="@ConfirmarEliminacion"
    OnCancel="@CancelarEliminacion" />

<script>
    window.mostrarModal = function(id) {
        const modalElement = document.getElementById(id);
        if (modalElement) {
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
            
            setTimeout(function() {
                window.inicializarTooltips();
            }, 100);
        }
    };

    window.ocultarModal = function(id) {
        const modalElement = document.getElementById(id);
        if (modalElement) {
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            }
        }
    };

    window.inicializarTooltips = function() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function(tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    };

    document.addEventListener("DOMContentLoaded", function() {
        window.inicializarTooltips();
    });

    window.addEventListener('blazor-navigated', function() {
        setTimeout(function() {
            window.inicializarTooltips();
        }, 100);
    });
</script>

@code {
    private List<TituloAcademicoOpcionDto> titulos = new();
    private bool cargando = true;
    private string _searchString = "";
    private TituloAcademicoOpcionDto tituloActual = new();
    private CrearTituloAcademicoDto tituloEdicion = new();
    private bool esEdicion = false;

    // Variables para el modal de confirmación de eliminación
    private bool mostrarModalConfirmacion = false;
    private TituloAcademicoOpcionDto? tituloAEliminar = null;
    private bool eliminandoTitulo = false;

    private Func<TituloAcademicoOpcionDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Nombre?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (x.Descripcion?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (x.Codigo?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await CargarTitulos();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private async Task CargarTitulos()
    {
        try
        {
            cargando = true;
            StateHasChanged();

            var response = await Http.GetAsync("/api/TitulosAcademicos/frontend?soloActivos=false");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<TituloAcademicoOpcionDto>>();
                titulos = result ?? new List<TituloAcademicoOpcionDto>();
            }
            else
            {
                MostrarAlerta("error", "Error al cargar los títulos académicos");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
            
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("inicializarTooltips");
        }
    }

    private async Task AbrirDialogoCrear()
    {
        tituloEdicion = new CrearTituloAcademicoDto 
        { 
            EstaActivo = true,
            OrdenJerarquico = (titulos.Any() ? titulos.Max(t => t.OrdenJerarquico) + 1 : 1)
        };
        tituloActual = new TituloAcademicoOpcionDto();
        esEdicion = false;
        await JSRuntime.InvokeVoidAsync("mostrarModal", "modalTitulo");
    }

    private async Task AbrirDialogoEditar(TituloAcademicoOpcionDto titulo)
    {
        tituloActual = titulo;
        tituloEdicion = new CrearTituloAcademicoDto
        {
            Nombre = titulo.Nombre,
            Descripcion = titulo.Descripcion,
            OrdenJerarquico = titulo.OrdenJerarquico,
            Codigo = titulo.Codigo ?? "",
            EstaActivo = titulo.EstaActivo,
            ColorHex = titulo.ColorHex
        };
        esEdicion = true;
        await JSRuntime.InvokeVoidAsync("mostrarModal", "modalTitulo");
    }

    private bool EsFormularioValido()
    {
        return !string.IsNullOrWhiteSpace(tituloEdicion.Nombre) &&
               !string.IsNullOrWhiteSpace(tituloEdicion.Codigo) &&
               tituloEdicion.OrdenJerarquico > 0;
    }

    private async Task GuardarTitulo()
    {
        if (!EsFormularioValido())
        {
            MostrarAlerta("error", "Por favor complete todos los campos requeridos");
            return;
        }

        try
        {
            HttpResponseMessage response;
            
            if (esEdicion)
            {
                response = await Http.PutAsJsonAsync($"/api/TitulosAcademicos/{tituloActual.Id}", tituloEdicion);
            }
            else
            {
                response = await Http.PostAsJsonAsync("/api/TitulosAcademicos", tituloEdicion);
            }

            if (response.IsSuccessStatusCode)
            {
                MostrarAlerta("success", $"Título académico {(esEdicion ? "actualizado" : "creado")} exitosamente");
                await CargarTitulos();
                await JSRuntime.InvokeVoidAsync("ocultarModal", "modalTitulo");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta("error", $"Error al {(esEdicion ? "actualizar" : "crear")} el título: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private async Task ToggleEstado(TituloAcademicoOpcionDto titulo)
    {
        try
        {
            var response = await Http.PatchAsync($"/api/TitulosAcademicos/{titulo.Id}/toggle-activo", null);
            if (response.IsSuccessStatusCode)
            {
                var nuevoEstado = !titulo.EstaActivo;
                MostrarAlerta("success", $"Título {(nuevoEstado ? "activado" : "desactivado")} exitosamente");
                await CargarTitulos();
            }
            else
            {
                MostrarAlerta("error", "Error al cambiar el estado del título");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
    }

    private void EliminarTitulo(TituloAcademicoOpcionDto titulo)
    {
        tituloAEliminar = titulo;
        mostrarModalConfirmacion = true;
        StateHasChanged();
    }

    private async Task ConfirmarEliminacion()
    {
        if (tituloAEliminar == null) return;

        try
        {
            eliminandoTitulo = true;
            StateHasChanged();

            var response = await Http.DeleteAsync($"/api/TitulosAcademicos/{tituloAEliminar.Id}");
            if (response.IsSuccessStatusCode)
            {
                MostrarAlerta("success", "Título académico eliminado exitosamente");
                await CargarTitulos();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta("error", $"Error al eliminar el título: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta("error", $"Error: {ex.Message}");
        }
        finally
        {
            eliminandoTitulo = false;
            mostrarModalConfirmacion = false;
            tituloAEliminar = null;
            StateHasChanged();
        }
    }

    private void CancelarEliminacion()
    {
        mostrarModalConfirmacion = false;
        tituloAEliminar = null;
        StateHasChanged();
    }

    private void MostrarAlerta(string tipo, string mensaje)
    {
        switch (tipo.ToLower())
        {
            case "success":
                ToastService.ShowSuccess(mensaje);
                break;
            case "error":
                ToastService.ShowError(mensaje);
                break;
            case "warning":
                ToastService.ShowWarning(mensaje);
                break;
            case "info":
            default:
                ToastService.ShowInfo(mensaje);
                break;
        }
    }

    // DTO para crear títulos
    public class CrearTituloAcademicoDto
    {
        public string Nombre { get; set; } = string.Empty;
        public string? Descripcion { get; set; }
        public int OrdenJerarquico { get; set; }
        public string Codigo { get; set; } = string.Empty;
        public bool EstaActivo { get; set; } = true;
        public string? ColorHex { get; set; }
        public bool EsTituloSistema { get; set; } = false;
    }
}
