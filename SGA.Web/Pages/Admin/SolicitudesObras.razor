@page "/admin/solicitudes-obras"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using Blazored.Toast.Services
@using System.Net.Http.Json
@using SGA.Web.Shared
@attribute [Authorize(Roles = "Administrador")]
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject IJSRuntime JSRuntime

<style>
    .modal-backdrop {
        z-index: 1040;
    }
    
    .modal {
        z-index: 1050;
    }
    
    .pdf-viewer-container {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .btn-primary-custom {
        background-color: #8a1538;
        border-color: #8a1538;
        color: white;
    }
    
    .btn-primary-custom:hover {
        background-color: #6d1029;
        border-color: #6d1029;
        color: white;
    }
    
    .border-custom {
        border-color: #8a1538 !important;
    }
    
    .text-custom {
        color: #8a1538 !important;
    }
    
    .alert-sm {
        padding: 0.375rem 0.75rem;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
    }
</style>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Solicitudes de Obras Académicas</h3>
        <button class="btn" style="background-color: #8a1538; border-color: #8a1538; color: white;" @onclick="RefreshSolicitudes">
            <i class="bi bi-arrow-clockwise"></i> Actualizar
        </button>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando solicitudes...</span>
            </div>
        </div>
    }
    else if (solicitudes == null || !solicitudes.Any())
    {
        <div class="alert alert-info" role="alert">
            <i class="bi bi-info-circle"></i> No hay solicitudes de obras académicas pendientes de revisión.
        </div>
    }
    else
    {
        <!-- Filtros -->
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Filtrar por estado:</label>
                <select class="form-select" @bind="filtroEstado" @bind:event="onchange">
                    <option value="">Todas</option>
                    <option value="Pendiente">Pendientes</option>
                    <option value="Aprobada">Aprobadas</option>
                    <option value="Rechazada">Rechazadas</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Buscar por docente:</label>
                <input type="text" class="form-control" @bind="filtroDocente" @bind:event="oninput" placeholder="Nombre o cédula..." />
            </div>
            <div class="col-md-4">
                <label class="form-label">Buscar por título:</label>
                <input type="text" class="form-control" @bind="filtroTitulo" @bind:event="oninput" placeholder="Título de la obra..." />
            </div>
        </div>

        <!-- Resumen de estados -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center bg-warning bg-opacity-10">
                    <div class="card-body">
                        <h5 class="card-title text-warning">@solicitudes.Count(s => s.Estado == "Pendiente")</h5>
                        <p class="card-text">Pendientes</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center bg-success bg-opacity-10">
                    <div class="card-body">
                        <h5 class="card-title text-success">@solicitudes.Count(s => s.Estado == "Aprobada")</h5>
                        <p class="card-text">Aprobadas</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center bg-danger bg-opacity-10">
                    <div class="card-body">
                        <h5 class="card-title text-danger">@solicitudes.Count(s => s.Estado == "Rechazada")</h5>
                        <p class="card-text">Rechazadas</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center bg-info bg-opacity-10">
                    <div class="card-body">
                        <h5 class="card-title text-info">@solicitudes.Count()</h5>
                        <p class="card-text">Total</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de solicitudes agrupadas -->
        @if (solicitudesFiltradas != null && solicitudesFiltradas.Any())
        {
            var gruposSolicitudes = solicitudesFiltradas
                .GroupBy(s => s.SolicitudGrupoId)
                .OrderByDescending(g => g.Max(s => s.FechaCreacion));

            foreach (var grupo in gruposSolicitudes)
            {
                var primeraObra = grupo.First();
                var totalObrasGrupo = grupo.Count();
                
                <div class="card mb-4 border-start border-@(GetEstadoColor(primeraObra.Estado)) border-3">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <h6 class="mb-1">
                                    <strong>Docente:</strong> @primeraObra.DocenteNombre
                                    <span class="text-muted">(@primeraObra.DocenteCedula)</span>
                                </h6>
                                <small class="text-muted">
                                    Solicitud de @totalObrasGrupo obra(s) • <EcuadorDateDisplay Date="primeraObra.FechaCreacion" 
                                                                                           Format="datetime" 
                                                                                           CssClass="fw-bold" />
                                </small>
                            </div>
                            <div class="col-md-4 text-end">
                                <span class="badge bg-@(GetEstadoColor(primeraObra.Estado)) fs-6">
                                    @primeraObra.Estado
                                </span>                                        @if (primeraObra.Estado == "Pendiente")
                                        {
                                            <div class="btn-group ms-2" role="group">
                                                <button class="btn btn-sm btn-success" @onclick="() => MostrarModalAprobacion(grupo.ToList())">
                                                    <i class="bi bi-check-circle"></i> Aprobar
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => MostrarModalRechazo(grupo.ToList())">
                                                    <i class="bi bi-x-circle"></i> Rechazar
                                                </button>
                                            </div>
                                        }
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(primeraObra.ComentariosSolicitud))
                        {
                            <div class="mt-2 p-2 bg-light rounded">
                                <small><strong>Comentarios del docente:</strong> @primeraObra.ComentariosSolicitud</small>
                            </div>
                        }
                    </div>
                    
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm mb-0">
                                <thead>
                                    <tr>
                                        <th>Título</th>
                                        <th>Tipo</th>
                                        <th>Fecha Pub.</th>
                                        <th>Revista/Editorial</th>
                                        <th>Archivo</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var obra in grupo.OrderBy(o => o.Titulo))
                                    {
                                        <tr>
                                            <td>
                                                <div class="fw-bold">@obra.Titulo</div>
                                                @if (!string.IsNullOrEmpty(obra.Autores))
                                                {
                                                    <small class="text-muted">Autores: @obra.Autores</small>
                                                }
                                            </td>
                                            <td>@obra.TipoObra</td>
                                            <td>
                                                <EcuadorDateDisplay Date="obra.FechaPublicacion" 
                                                                   Format="date" 
                                                                   CssClass="text-muted" />
                                            </td>
                                            <td>@(obra.Revista ?? obra.Editorial ?? "N/A")</td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(obra.ArchivoNombre))
                                                {
                                                    <button class="btn btn-sm text-white me-1" style="background-color: #8a1538;" @onclick="() => VisualizarPDF(obra.Id)">
                                                        <i class="bi bi-eye"></i> Ver PDF
                                                    </button>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Sin archivo</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-info" @onclick="() => MostrarDetallesObra(obra)">
                                                    <i class="bi bi-eye"></i> Detalles
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if (primeraObra.Estado != "Pendiente")
                        {
                            <div class="mt-3">
                                @if (primeraObra.Estado == "Aprobada")
                                {
                                    <div class="alert alert-success alert-sm mb-0">
                                        <i class="bi bi-check-circle"></i>
                                        <strong>Aprobada</strong> el <EcuadorDateDisplay Date="primeraObra.FechaRevision.Value" 
                                                                                                     Format="datetime" 
                                                                                                     CssClass="fw-bold" />
                                        @if (!string.IsNullOrEmpty(primeraObra.ComentariosRevision))
                                        {
                                            <br><small><strong>Comentarios:</strong> @primeraObra.ComentariosRevision</small>
                                        }
                                    </div>
                                }
                                else if (primeraObra.Estado == "Rechazada")
                                {
                                    <div class="alert alert-danger alert-sm mb-0">
                                        <i class="bi bi-x-circle"></i>
                                        <strong>Rechazada</strong> el <EcuadorDateDisplay Date="primeraObra.FechaRevision.Value" 
                                                                                                      Format="datetime" 
                                                                                                      CssClass="fw-bold" />
                                        @if (!string.IsNullOrEmpty(primeraObra.MotivoRechazo))
                                        {
                                            <br><small><strong>Motivo:</strong> @primeraObra.MotivoRechazo</small>
                                        }
                                        @if (!string.IsNullOrEmpty(primeraObra.ComentariosRevision))
                                        {
                                            <br><small><strong>Comentarios adicionales:</strong> @primeraObra.ComentariosRevision</small>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <div class="alert alert-secondary" role="alert">
                <i class="bi bi-filter"></i> No hay solicitudes que coincidan con los filtros aplicados.
            </div>
        }
    }
</div>

<!-- Modal de Aprobación -->
@if (showModalAprobacion && solicitudesParaRevisar != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-check-circle"></i> Aprobar Solicitud de Obras
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModales" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-success" role="alert">
                        <h6>¿Está seguro que desea aprobar las siguientes @solicitudesParaRevisar.Count obra(s)?</h6>
                    </div>
                    
                    <div class="list-group mb-3">
                        @foreach (var obra in solicitudesParaRevisar)
                        {
                            <div class="list-group-item">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@obra.Titulo</h6>
                                    <small>@obra.TipoObra</small>
                                </div>
                                <p class="mb-1">@obra.Autores</p>
                                <small>@obra.FechaPublicacion.ToString("dd/MM/yyyy")</small>
                            </div>
                        }
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Comentarios (opcional):</label>
                        <textarea class="form-control" rows="3" @bind="comentariosRevision" 
                                  placeholder="Comentarios adicionales sobre la aprobación..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModales">Cancelar</button>
                    <button type="button" class="btn btn-success" @onclick="AprobarSolicitudes" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        <i class="bi bi-check-circle"></i> Aprobar Obras
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Rechazo -->
@if (showModalRechazo && solicitudesParaRevisar != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-x-circle"></i> Rechazar Solicitud de Obras
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModales" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger" role="alert">
                        <h6>¿Está seguro que desea rechazar las siguientes @solicitudesParaRevisar.Count obra(s)?</h6>
                    </div>
                    
                    <div class="list-group mb-3">
                        @foreach (var obra in solicitudesParaRevisar)
                        {
                            <div class="list-group-item">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@obra.Titulo</h6>
                                    <small>@obra.TipoObra</small>
                                </div>
                                <p class="mb-1">@obra.Autores</p>
                                <small>@obra.FechaPublicacion.ToString("dd/MM/yyyy")</small>
                            </div>
                        }
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Motivo de rechazo *:</label>
                        <textarea class="form-control" rows="3" @bind="motivoRechazo" 
                                  placeholder="Explique el motivo del rechazo..." required></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Comentarios adicionales (opcional):</label>
                        <textarea class="form-control" rows="2" @bind="comentariosRevision" 
                                  placeholder="Comentarios adicionales..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModales">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="RechazarSolicitudes" 
                            disabled="@(isProcessing || string.IsNullOrWhiteSpace(motivoRechazo))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        <i class="bi bi-x-circle"></i> Rechazar Obras
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Detalles de Obra -->
@if (showModalDetalles && obraSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-detalles-header">
                    <h5 class="modal-title">
                        <i class="bi bi-file-earmark-text me-2"></i>
                        Detalles de la Obra Académica
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModalDetalles" aria-label="Cerrar"></button>
                </div>
                <div class="modal-detalles-body">
                    <div class="obra-info-card">
                        <!-- Sección del título -->
                        <div class="obra-titulo-section">
                            <h4>@obraSeleccionada.Titulo</h4>
                            <div class="obra-tipo-badge">@obraSeleccionada.TipoObra</div>
                        </div>
                        
                        <!-- Grid de información -->
                        <div class="obra-info-grid">
                            <div class="obra-info-section">
                                <div class="info-group">
                                    <label class="info-label">Fecha de Publicación</label>
                                    <div class="info-value info-value-highlight">
                                        <i class="bi bi-calendar-event me-1"></i>
                                        @obraSeleccionada.FechaPublicacion.ToString("dd/MM/yyyy")
                                    </div>
                                </div>
                                
                                <div class="info-group">
                                    <label class="info-label">Autores</label>
                                    <div class="info-value @(string.IsNullOrEmpty(obraSeleccionada.Autores) ? "info-value-muted" : "")">
                                        <i class="bi bi-people me-1"></i>
                                        @(obraSeleccionada.Autores ?? "No especificado")
                                    </div>
                                </div>
                                
                                <div class="info-group">
                                    <label class="info-label">Editorial</label>
                                    <div class="info-value @(string.IsNullOrEmpty(obraSeleccionada.Editorial) ? "info-value-muted" : "")">
                                        <i class="bi bi-building me-1"></i>
                                        @(obraSeleccionada.Editorial ?? "No especificado")
                                    </div>
                                </div>
                                
                                <div class="info-group">
                                    <label class="info-label">Revista</label>
                                    <div class="info-value @(string.IsNullOrEmpty(obraSeleccionada.Revista) ? "info-value-muted" : "")">
                                        <i class="bi bi-journal-text me-1"></i>
                                        @(obraSeleccionada.Revista ?? "No especificado")
                                    </div>
                                </div>
                            </div>
                            
                            <div class="obra-info-section">
                                <div class="info-group">
                                    <label class="info-label">ISBN/ISSN</label>
                                    <div class="info-value @(string.IsNullOrEmpty(obraSeleccionada.ISBN_ISSN) ? "info-value-muted" : "")">
                                        <i class="bi bi-hash me-1"></i>
                                        @(obraSeleccionada.ISBN_ISSN ?? "No especificado")
                                    </div>
                                </div>
                                
                                <div class="info-group">
                                    <label class="info-label">DOI</label>
                                    <div class="info-value @(string.IsNullOrEmpty(obraSeleccionada.DOI) ? "info-value-muted" : "")">
                                        <i class="bi bi-link-45deg me-1"></i>
                                        @(obraSeleccionada.DOI ?? "No especificado")
                                    </div>
                                </div>
                                
                                <div class="info-group">
                                    <label class="info-label">Obra Indexada</label>
                                    <div class="info-value">
                                        @if (obraSeleccionada.EsIndexada)
                                        {
                                            <span class="badge-indexada">
                                                <i class="bi bi-check-circle me-1"></i>
                                                Sí
                                            </span>
                                            @if (!string.IsNullOrEmpty(obraSeleccionada.IndiceIndexacion))
                                            {
                                                <div class="mt-1 small">
                                                    <i class="bi bi-info-circle me-1"></i>
                                                    Índice: @obraSeleccionada.IndiceIndexacion
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge-no-indexada">
                                                <i class="bi bi-x-circle me-1"></i>
                                                No
                                            </span>
                                        }
                                    </div>
                                </div>
                                
                                <div class="info-group">
                                    <label class="info-label">Archivo Adjunto</label>
                                    <div class="archivo-info @(string.IsNullOrEmpty(obraSeleccionada.ArchivoNombre) ? "no-file" : "has-file")">
                                        @if (!string.IsNullOrEmpty(obraSeleccionada.ArchivoNombre))
                                        {
                                            <div class="archivo-icon success">
                                                <i class="bi bi-file-earmark-pdf"></i>
                                            </div>
                                            <div class="archivo-nombre">@obraSeleccionada.ArchivoNombre</div>
                                        }
                                        else
                                        {
                                            <div class="archivo-icon warning">
                                                <i class="bi bi-file-earmark-x"></i>
                                            </div>
                                            <div class="archivo-nombre">No se adjuntó ningún archivo</div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(obraSeleccionada.Descripcion))
                    {
                        <div class="descripcion-section">
                            <h6 class="descripcion-titulo">
                                <i class="bi bi-card-text me-2"></i>
                                Descripción
                            </h6>
                            <p class="descripcion-texto">@obraSeleccionada.Descripcion</p>
                        </div>
                    }
                </div>
                <div class="modal-detalles-footer">
                    <button type="button" class="btn-custom-secondary" @onclick="CerrarModalDetalles">
                        <i class="bi bi-x-lg me-2"></i>Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Visualización de PDF -->
@if (showModalPDF && !string.IsNullOrEmpty(pdfUrl))
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-file-earmark-pdf me-2"></i>
                        Visualizar PDF - @(pdfNombreArchivo ?? "Documento")
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModalPDF" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body p-0">
                    @if (isLoadingPDF)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="height: 500px;">
                            <div class="text-center">
                                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                                    <span class="visually-hidden">Cargando PDF...</span>
                                </div>
                                <p class="mt-3">Cargando documento...</p>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorPDF))
                    {
                        <div class="alert alert-danger m-3" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <strong>Error al cargar PDF:</strong> @errorPDF
                        </div>
                    }
                    else
                    {
                        <div class="pdf-viewer-container">
                            <iframe src="@pdfUrl" style="width: 100%; height: 600px; border: none;" frameborder="0"></iframe>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalPDF">
                        <i class="bi bi-x-circle me-2"></i>Cerrar
                    </button>
                    @if (!string.IsNullOrEmpty(pdfUrl) && !isLoadingPDF)
                    {
                        <button type="button" class="btn btn-primary" @onclick="() => DescargarArchivo(solicitudIdActual)">
                            <i class="bi bi-download me-2"></i>Descargar PDF
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<SolicitudObraAcademicaAdminDto>? solicitudes;
    private List<SolicitudObraAcademicaAdminDto>? solicitudesFiltradas;
    private bool isLoading = true;
    private bool isProcessing = false;
    
    // Filtros
    private string _filtroEstado = "";
    private string _filtroDocente = "";
    private string _filtroTitulo = "";
    
    private string filtroEstado 
    { 
        get => _filtroEstado; 
        set 
        { 
            _filtroEstado = value; 
            FiltrarSolicitudes(); 
        } 
    }
    
    private string filtroDocente 
    { 
        get => _filtroDocente; 
        set 
        { 
            _filtroDocente = value; 
            FiltrarSolicitudes(); 
        } 
    }
    
    private string filtroTitulo 
    { 
        get => _filtroTitulo; 
        set 
        { 
            _filtroTitulo = value; 
            FiltrarSolicitudes(); 
        } 
    }
    
    // Modales
    private bool showModalAprobacion = false;
    private bool showModalRechazo = false;
    private bool showModalDetalles = false;
    private bool showModalPDF = false;
    private List<SolicitudObraAcademicaAdminDto>? solicitudesParaRevisar;
    private SolicitudObraAcademicaAdminDto? obraSeleccionada;
    
    // Variables para PDF
    private string? pdfUrl;
    private string? pdfNombreArchivo;
    private bool isLoadingPDF = false;
    private string? errorPDF;
    private Guid solicitudIdActual;
    
    // Campos de formulario
    private string comentariosRevision = "";
    private string motivoRechazo = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSolicitudes();
    }

    private async Task LoadSolicitudes()
    {
        try
        {
            isLoading = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetFromJsonAsync<ResponseSolicitudesAdminDto>("api/obraacademicas/admin/solicitudes");
            if (response != null && response.Exitoso)
            {
                solicitudes = response.Solicitudes;
                solicitudesFiltradas = solicitudes;
            }
            else
            {
                ToastService.ShowError(response?.Mensaje ?? "Error al cargar solicitudes");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al cargar solicitudes: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshSolicitudes()
    {
        await LoadSolicitudes();
        ToastService.ShowSuccess("Solicitudes actualizadas");
    }

    private void FiltrarSolicitudes()
    {
        if (solicitudes == null) return;

        solicitudesFiltradas = solicitudes.Where(s =>
            (string.IsNullOrEmpty(filtroEstado) || s.Estado.Equals(filtroEstado, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filtroDocente) || 
             s.DocenteNombre.Contains(filtroDocente, StringComparison.OrdinalIgnoreCase) ||
             s.DocenteCedula.Contains(filtroDocente, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filtroTitulo) || 
             s.Titulo.Contains(filtroTitulo, StringComparison.OrdinalIgnoreCase))
        ).ToList();
        
        StateHasChanged();
    }

    private void MostrarModalAprobacion(List<SolicitudObraAcademicaAdminDto> obras)
    {
        solicitudesParaRevisar = obras;
        comentariosRevision = "";
        showModalAprobacion = true;
    }

    private void MostrarModalRechazo(List<SolicitudObraAcademicaAdminDto> obras)
    {
        solicitudesParaRevisar = obras;
        comentariosRevision = "";
        motivoRechazo = "";
        showModalRechazo = true;
    }

    private void MostrarDetallesObra(SolicitudObraAcademicaAdminDto obra)
    {
        obraSeleccionada = obra;
        showModalDetalles = true;
    }

    private void CerrarModales()
    {
        showModalAprobacion = false;
        showModalRechazo = false;
        solicitudesParaRevisar = null;
        comentariosRevision = "";
        motivoRechazo = "";
    }

    private void CerrarModalDetalles()
    {
        showModalDetalles = false;
        obraSeleccionada = null;
    }

    private void CerrarModalPDF()
    {
        showModalPDF = false;
        pdfUrl = null;
        pdfNombreArchivo = null;
        errorPDF = null;
        isLoadingPDF = false;
        solicitudIdActual = Guid.Empty;
    }

    private async Task VisualizarPDF(Guid solicitudId)
    {
        try
        {
            isLoadingPDF = true;
            errorPDF = null;
            showModalPDF = true;
            solicitudIdActual = solicitudId;
            
            // Buscar la obra para obtener el nombre del archivo
            var obra = solicitudes?.FirstOrDefault(s => s.Id == solicitudId);
            pdfNombreArchivo = obra?.ArchivoNombre ?? "Documento";
            
            StateHasChanged();

            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            if (string.IsNullOrEmpty(token))
            {
                errorPDF = "Token de autenticación no encontrado";
                return;
            }

            // Crear URL para visualización del PDF usando la URL absoluta de la API
            pdfUrl = $"http://localhost:5115/api/obraacademicas/admin/visualizar-archivo/{solicitudId}?token={token}";
            
            // Pequeña pausa para permitir que el iframe se configure
            await Task.Delay(500);
        }
        catch (Exception ex)
        {
            errorPDF = $"Error al cargar PDF: {ex.Message}";
        }
        finally
        {
            isLoadingPDF = false;
            StateHasChanged();
        }
    }

    private async Task AprobarSolicitudes()
    {
        if (solicitudesParaRevisar == null) return;

        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var exitosasCount = 0;
            var erroresCount = 0;

            foreach (var solicitud in solicitudesParaRevisar)
            {
                try
                {
                    var revision = new RevisionSolicitudDto
                    {
                        SolicitudId = solicitud.Id,
                        Accion = "Aprobar",
                        ComentariosRevision = comentariosRevision
                    };

                    var response = await Http.PostAsJsonAsync("api/obraacademicas/admin/revisar", revision);
                    if (response.IsSuccessStatusCode)
                    {
                        exitosasCount++;
                    }
                    else
                    {
                        erroresCount++;
                    }
                }
                catch
                {
                    erroresCount++;
                }
            }

            if (exitosasCount > 0)
            {
                ToastService.ShowSuccess($"{exitosasCount} obra(s) aprobada(s) exitosamente");
            }
            
            if (erroresCount > 0)
            {
                ToastService.ShowError($"Error al aprobar {erroresCount} obra(s)");
            }

            CerrarModales();
            await LoadSolicitudes();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al aprobar solicitudes: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task RechazarSolicitudes()
    {
        if (solicitudesParaRevisar == null || string.IsNullOrWhiteSpace(motivoRechazo)) return;

        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var exitosasCount = 0;
            var erroresCount = 0;

            foreach (var solicitud in solicitudesParaRevisar)
            {
                try
                {
                    var revision = new RevisionSolicitudDto
                    {
                        SolicitudId = solicitud.Id,
                        Accion = "Rechazar",
                        MotivoRechazo = motivoRechazo,
                        ComentariosRevision = comentariosRevision
                    };

                    var response = await Http.PostAsJsonAsync("api/obraacademicas/admin/revisar", revision);
                    if (response.IsSuccessStatusCode)
                    {
                        exitosasCount++;
                    }
                    else
                    {
                        erroresCount++;
                    }
                }
                catch
                {
                    erroresCount++;
                }
            }

            if (exitosasCount > 0)
            {
                ToastService.ShowSuccess($"{exitosasCount} obra(s) rechazada(s) exitosamente");
            }
            
            if (erroresCount > 0)
            {
                ToastService.ShowError($"Error al rechazar {erroresCount} obra(s)");
            }

            CerrarModales();
            await LoadSolicitudes();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al rechazar solicitudes: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DescargarArchivo(Guid solicitudId)
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.GetAsync($"api/obraacademicas/admin/descargar-archivo/{solicitudId}");
            
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = response.Content.Headers.ContentDisposition?.FileName?.Trim('"') ?? 
                              $"obra-academica-{solicitudId}.pdf";
                
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, fileBytes);
                ToastService.ShowSuccess("Archivo descargado correctamente");
            }
            else
            {
                ToastService.ShowError("No se pudo descargar el archivo");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al descargar archivo: {ex.Message}");
        }
    }

    private string GetEstadoColor(string estado)
    {
        return estado switch
        {
            "Pendiente" => "warning",
            "Aprobada" => "success",
            "Rechazada" => "danger",
            _ => "secondary"
        };
    }

    // DTOs necesarios
    public class SolicitudObraAcademicaAdminDto
    {
        public Guid Id { get; set; }
        public Guid SolicitudGrupoId { get; set; }
        public string DocenteCedula { get; set; } = string.Empty;
        public string DocenteNombre { get; set; } = string.Empty;
        public string Titulo { get; set; } = string.Empty;
        public string TipoObra { get; set; } = string.Empty;
        public DateTime FechaPublicacion { get; set; }
        public string? Editorial { get; set; }
        public string? Revista { get; set; }
        public string? ISBN_ISSN { get; set; }
        public string? DOI { get; set; }
        public bool EsIndexada { get; set; }
        public string? IndiceIndexacion { get; set; }
        public string? Autores { get; set; }
        public string? Descripcion { get; set; }
        public string? ArchivoNombre { get; set; }
        public string Estado { get; set; } = string.Empty;
        public string? ComentariosRevision { get; set; }
        public string? MotivoRechazo { get; set; }
        public string? ComentariosSolicitud { get; set; }
        public DateTime FechaCreacion { get; set; }
        public DateTime? FechaRevision { get; set; }
    }

    public class ResponseSolicitudesAdminDto
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; } = string.Empty;
        public List<SolicitudObraAcademicaAdminDto> Solicitudes { get; set; } = new();
    }

    public class RevisionSolicitudDto
    {
        public Guid SolicitudId { get; set; }
        public string Accion { get; set; } = string.Empty;
        public string? ComentariosRevision { get; set; }
        public string? MotivoRechazo { get; set; }
    }
}
