@page "/register"
@using SGA.Web.Models
@using SGA.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IApiService ApiService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card mt-4 mb-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="text-center">Registro de Docente</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success">
                                @successMessage
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="cedula">Cédula:</label>
                                    <div class="input-group">
                                        <InputText id="cedula" class="form-control" @bind-Value="registerModel.Cedula" />
                                        <button type="button" class="btn btn-outline-secondary" @onclick="ValidarCedula">
                                            <i class="bi bi-search"></i> Validar
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => registerModel.Cedula)" />
                                    <div class="form-text">
                                        <small>Ingrese su cédula y presione "Validar" para autocompletar sus datos.</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="email">Correo Electrónico:</label>
                                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                                    <ValidationMessage For="@(() => registerModel.Email)" />
                                    <div class="form-text">
                                        <small>Debe ser un correo institucional (@@uta.edu.ec).</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="nombres">Nombres:</label>
                                    <InputText id="nombres" class="form-control" @bind-Value="registerModel.Nombres" disabled="@datosCargados" />
                                    <ValidationMessage For="@(() => registerModel.Nombres)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="apellidos">Apellidos:</label>
                                    <InputText id="apellidos" class="form-control" @bind-Value="registerModel.Apellidos" disabled="@datosCargados" />
                                    <ValidationMessage For="@(() => registerModel.Apellidos)" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="telefono">Teléfono:</label>
                                    <InputText id="telefono" class="form-control" @bind-Value="registerModel.Telefono" />
                                    <ValidationMessage For="@(() => registerModel.Telefono)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="facultad">Facultad:</label>
                                    <InputText id="facultad" class="form-control" @bind-Value="registerModel.Facultad" disabled="@datosCargados" />
                                    <ValidationMessage For="@(() => registerModel.Facultad)" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="password">Contraseña:</label>
                                    <div class="input-group">
                                        <InputText id="password" class="form-control" type="@passwordType" @bind-Value="registerModel.Password" />
                                        <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                                            <i class="bi bi-@passwordIcon"></i>
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => registerModel.Password)" />
                                    <div class="form-text">
                                        <small>La contraseña debe tener al menos 8 caracteres, una mayúscula, una minúscula, un número y un carácter especial.</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="confirmPassword">Confirmar Contraseña:</label>
                                    <div class="input-group">
                                        <InputText id="confirmPassword" class="form-control" type="@passwordType" @bind-Value="registerModel.ConfirmPassword" />
                                        <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                                            <i class="bi bi-@passwordIcon"></i>
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                                </div>
                            </div>
                        </div>

                        <div class="form-group d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-primary btn-block" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Registrando...</span>
                                }
                                else
                                {
                                    <span>Registrarse</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <p>¿Ya tienes una cuenta? <a href="/login">Inicia sesión aquí</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string? errorMessage = null;
    private string? successMessage = null;
    private bool isLoading = false;
    private bool datosCargados = false;
    private string passwordType = "password";
    private string passwordIcon = "eye";

    protected override async Task OnInitializedAsync()
    {
        // Verificar si el usuario ya está autenticado
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void TogglePasswordVisibility()
    {
        if (passwordType == "password")
        {
            passwordType = "text";
            passwordIcon = "eye-slash";
        }
        else
        {
            passwordType = "password";
            passwordIcon = "eye";
        }
    }

    private async Task ValidarCedula()
    {
        if (string.IsNullOrEmpty(registerModel.Cedula) || registerModel.Cedula.Length != 10 || !int.TryParse(registerModel.Cedula, out _))
        {
            errorMessage = "Ingrese una cédula válida de 10 dígitos.";
            return;
        }

        // Validar estructura de la cédula ecuatoriana
        if (!ValidarCedulaEcuatoriana(registerModel.Cedula))
        {
            errorMessage = "La cédula ingresada no es válida.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            // Verificar si ya existe un usuario con esta cédula
            var verificacionResult = await AuthService.VerificarCedula(registerModel.Cedula);
            if (!verificacionResult.Success)
            {
                errorMessage = verificacionResult.Message;
                isLoading = false;
                return;
            }            // Obtener datos desde la API de TTHH
            var datosPersonales = await ApiService.ObtenerDatosTTHH(registerModel.Cedula);
            if (datosPersonales != null)
            {
                registerModel.Nombres = datosPersonales.Nombres;
                registerModel.Apellidos = datosPersonales.Apellidos;
                registerModel.Facultad = datosPersonales.Facultad;
                
                // Asignar el número de celular al campo Telefono
                if (!string.IsNullOrEmpty(datosPersonales.Celular))
                {
                    registerModel.Telefono = datosPersonales.Celular;
                }
                
                // Sugerir un correo institucional basado en el nombre
                if (string.IsNullOrEmpty(registerModel.Email))
                {
                    string primerNombre = registerModel.Nombres.Split(' ')[0].ToLower();
                    string primerApellido = registerModel.Apellidos.Split(' ')[0].ToLower();
                    registerModel.Email = $"{primerNombre}.{primerApellido}@uta.edu.ec";
                }

                datosCargados = true;
                successMessage = "Datos cargados correctamente desde TTHH.";
            }
            else
            {
                errorMessage = "No se encontraron datos para esta cédula en el sistema de TTHH.";
                datosCargados = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al validar la cédula: {ex.Message}";
            datosCargados = false;
        }
        finally
        {
            isLoading = false;
        }
    }    private bool ValidarCedulaEcuatoriana(string cedula)
    {
        // Validar que sean 10 dígitos y solo contenga números
        if (cedula.Length != 10)
            return false;

        // Verificar que solo contenga números (no letras ni símbolos)
        return cedula.All(char.IsDigit);
    }    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            // Crear un username a partir del correo (quitar @uta.edu.ec)
            string email = registerModel.Email.ToLower();
            
            // Verificar que sea un correo institucional
            if (!email.EndsWith("@uta.edu.ec"))
            {
                errorMessage = "El correo debe ser institucional (@uta.edu.ec)";
                isLoading = false;
                return;
            }

            // Generar username a partir del correo
            string username = email.Replace("@uta.edu.ec", "");
            
            // Si el username está vacío (caso extremo), usar las iniciales del nombre y apellido
            if (string.IsNullOrWhiteSpace(username))
            {
                string inicialNombre = !string.IsNullOrEmpty(registerModel.Nombres) && registerModel.Nombres.Length > 0 
                    ? registerModel.Nombres.Substring(0, 1).ToLower() : "u";
                    
                string inicialApellido = !string.IsNullOrEmpty(registerModel.Apellidos) && registerModel.Apellidos.Length > 0 
                    ? registerModel.Apellidos.Substring(0, 1).ToLower() : "t";
                    
                username = $"user_{inicialNombre}{inicialApellido}{DateTime.Now.Ticks % 1000}";
            }
            
            Console.WriteLine($"Username generado: {username}");
            
            // Verificar si ya existe un usuario con este correo
            var verificacionResult = await AuthService.VerificarEmail(registerModel.Email);
            if (!verificacionResult.Success)
            {
                errorMessage = verificacionResult.Message;
                isLoading = false;
                return;
            }

            // Verificar si ya existe un usuario con este correo
            var verificacionResult = await AuthService.VerificarEmail(registerModel.Email);
            if (!verificacionResult.Success)
            {
                errorMessage = verificacionResult.Message;
                isLoading = false;
                return;
            }

            // Asignar username al modelo
            registerModel.Username = username;

            var result = await AuthService.Register(registerModel);
            
            if (result.Success)
            {
                successMessage = "Registro exitoso. Serás redirigido a la página de inicio de sesión en 3 segundos.";
                registerModel = new RegisterModel();
                await Task.Delay(3000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
