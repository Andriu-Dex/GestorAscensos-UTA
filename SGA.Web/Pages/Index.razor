@page "/"
@attribute [Authorize]
@using SGA.Web.Models
@using System.Text.Json
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container dashboard-container">
    <div class="welcome-section animate__animated animate__fadeInDown">
        <div class="welcome-header">
            <div class="welcome-icon">
                <i class="bi bi-award"></i>
            </div>
            <h2 class="welcome-title">¡Bienvenido al Sistema de Gestión de Ascensos!</h2>
        </div>
        @if (userInfo != null)
        {
            <h4 class="welcome-subtitle animate__animated animate__fadeIn animate__delay-1s">
                Hola, <span class="text-primary fw-bold">@userInfo.Nombres @userInfo.Apellidos</span>
            </h4>
        }
    </div>    @if (isLoading)
    {
        <div class="row justify-content-center mt-5">
            <div class="col-md-6 text-center">
                <div class="loading-container animate__animated animate__fadeIn">
                    <div class="spinner-grow text-primary" role="status"></div>
                    <div class="spinner-grow text-primary" role="status" style="animation-delay: 0.2s"></div>
                    <div class="spinner-grow text-primary" role="status" style="animation-delay: 0.4s"></div>
                </div>
                <p class="mt-4 loading-text animate__animated animate__fadeIn animate__delay-1s">
                    <i class="bi bi-clock-history me-2"></i>Cargando información del usuario...
                </p>
            </div>
        </div>
    }
    else if (userInfo != null)
    {        <div class="row">
            <div class="col-lg-12">
                <div class="user-summary-bar animate__animated animate__fadeInLeft mb-4">
                    <div class="user-avatar">
                        <div class="avatar avatar-md">
                            @if (!string.IsNullOrEmpty(userInfo.FotoPerfilBase64))
                            {
                                <img src="data:image/jpeg;base64,@userInfo.FotoPerfilBase64" alt="Foto de perfil" />
                            }
                            else
                            {
                                <span class="avatar-initial">@GetInitials()</span>
                            }
                        </div>
                    </div>
                    <div class="user-info">
                        <h5 class="mb-0">Titular @userInfo.NivelActual | @(userInfo.FacultadInfo?.Nombre ?? userInfo.Facultad)</h5>
                        <p class="text-muted mb-0"><i class="bi bi-calendar-event me-1"></i> Ingreso: @userInfo.FechaIngresoNivelActual.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="user-actions">
                        <a href="/perfil" class="btn btn-outline-primary">
                            <i class="bi bi-person-fill me-2"></i> Mi Perfil
                        </a>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-12">
                <div class="status-section">
                    <h4 class="section-title">Estado de Requisitos</h4>
                    
                    <div class="alert alert-info mb-3">
                        <i class="bi bi-info-circle me-2"></i>
                        <strong>Proceso de Ascenso:</strong> Ningún proceso de ascenso se inicia automáticamente. 
                        Usted debe hacer clic en el botón "Iniciar Proceso de Ascenso" cuando cumpla todos los requisitos 
                        para enviar formalmente su solicitud al administrador.
                    </div>
                    
                    @if (requisitos != null)
                    {
                        <div class="status-card">
                            <h5 class="status-title">
                                <i class="bi bi-clipboard-check"></i> 
                                Progreso para ascenso a Titular @(userInfo.NivelActual + 1)
                            </h5>
                              <div class="progress-container animate__animated animate__fadeInUp animate__delay-1s">
                                <div class="progress-label">
                                    <span><i class="bi bi-check-circle-fill me-2"></i>Requisitos cumplidos:</span>
                                    <span class="badge bg-primary">@GetRequisitosCompletados() de 5</span>
                                </div>
                                <div class="progress progress-lg">
                                    <div class="progress-bar @GetRequisitosColor()" 
                                         role="progressbar" 
                                         style="width: @(GetRequisitosCompletados() * 20)%;" 
                                         aria-valuenow="@GetRequisitosCompletados()" 
                                         aria-valuemin="0" 
                                         aria-valuemax="5">
                                        <span class="progress-value">@(GetRequisitosCompletados() * 20)%</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="status-badge @GetStatusBadgeClass()">
                                @GetStatusBadgeText()
                            </div>
                            
                            @* Botón para iniciar proceso de ascenso - solo aparece cuando cumple requisitos *@
                            @if (tieneSolicitudActiva)
                            {
                                <div class="alert alert-primary mt-3 mb-3">
                                    <i class="bi bi-clock-history me-2"></i>
                                    <strong>Proceso en curso:</strong> Ya tiene una solicitud de ascenso activa siendo procesada por el administrador.
                                </div>
                                <div class="d-grid gap-2">
                                    <a href="/solicitudes" class="btn btn-primary btn-lg">
                                        <i class="bi bi-list-ul me-2"></i> Ver Mis Solicitudes
                                    </a>
                                    <small class="text-muted text-center">
                                        Consulte el estado de su solicitud de ascenso
                                    </small>
                                </div>
                            }
                            else if (requisitos != null && requisitos.CumpleTiempoRol && requisitos.CumpleObras && 
                                 requisitos.CumpleEvaluacion && requisitos.CumpleCapacitacion && requisitos.CumpleInvestigacion)
                            {
                                <div class="alert alert-success mt-3 mb-3">
                                    <i class="bi bi-check-circle-fill me-2"></i>
                                    <strong>¡Felicidades!</strong> Usted cumple con todos los requisitos para solicitar ascenso a Titular @(userInfo.NivelActual + 1).
                                </div>
                                <div class="d-grid gap-2">
                                    <a href="/solicitudes/nueva" class="btn btn-success btn-lg">
                                        <i class="bi bi-rocket-takeoff me-2"></i> Iniciar Proceso de Ascenso
                                    </a>
                                    <small class="text-muted text-center">
                                        Al hacer clic se iniciará el proceso formal de solicitud de ascenso
                                    </small>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning mt-3 mb-3">
                                    <i class="bi bi-hourglass-split me-2"></i>
                                    Aún no cumple con todos los requisitos para el ascenso. Continúe trabajando en completar los indicadores faltantes.
                                </div>
                                <a href="/perfil" class="btn btn-outline-primary">
                                    <i class="bi bi-info-circle me-2"></i> Ver detalles completos
                                </a>
                            }
                        </div>
                    }
                </div>
                  <div class="indicators-section">
                    <div class="section-header mb-3">
                        <h4 class="section-title"><i class="bi bi-graph-up me-2"></i>Indicadores Académicos</h4>
                        <p class="text-muted">Estos son los indicadores clave para tu proceso de ascenso</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-clock-history indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Tiempo en rol actual</h6>
                                    <div class="indicator-value">
                                        <div class="tiempo-transcurrido">
                                            @if (indicadores != null && !string.IsNullOrEmpty(indicadores.TiempoTranscurridoTexto))
                                            {
                                                <span class="tiempo-actual">@indicadores.TiempoTranscurridoTexto</span>
                                            }
                                            else
                                            {
                                                <span class="tiempo-actual">@(indicadores?.TiempoRol ?? 0) meses</span>
                                            }
                                        </div>
                                        @if (indicadores != null && !string.IsNullOrEmpty(indicadores.TiempoRestanteTexto))
                                        {
                                            <div class="tiempo-restante @(indicadores.CumpleTiempoMinimo ? "text-success" : "text-warning")">
                                                @if (indicadores.CumpleTiempoMinimo)
                                                {
                                                    <i class="bi bi-check-circle-fill me-1"></i>
                                                    <small>¡Tiempo mínimo cumplido!</small>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-hourglass-split me-1"></i>
                                                    <small>Falta: @indicadores.TiempoRestanteTexto</small>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="text-muted">
                                        @if (userInfo != null)
                                        {
                                            <small>Desde: @userInfo.FechaIngresoNivelActual.ToString("dd/MM/yyyy HH:mm")</small>
                                        }
                                    </div>
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar @(indicadores?.CumpleTiempoMinimo == true ? "bg-success" : "")" 
                                             style="width: @GetTiempoPercentage()%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: 4 años (48 meses)</span>
                                        <span>@GetTiempoPercentage()%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(1)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-book indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Obras académicas</h6>
                                    <div class="indicator-value">@(indicadores?.NumeroObras ?? 0)</div>
                                    <div class="text-muted">obras</div>
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar" 
                                             style="width: @GetPercentage((indicadores?.NumeroObras ?? 0), 3)%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: 3 obras</span>
                                        <span>@GetPercentage((indicadores?.NumeroObras ?? 0), 3)%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(2)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-award indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Evaluación docente</h6>
                                    <div class="indicator-value">
                                        <div class="evaluation-score">@string.Format("{0:F2}", indicadores?.PuntajeEvaluacion ?? 0)%</div>
                                        @if (indicadores?.PeriodosEvaluados > 0)
                                        {
                                            <div class="evaluation-detail text-muted">
                                                <small>Promedio de @(indicadores.PeriodosEvaluados) evaluaciones</small>
                                            </div>
                                        }
                                    </div>
                                    @if (indicadores?.CumpleRequisitoEvaluacion == true)
                                    {
                                        <div class="evaluation-status text-success">
                                            <i class="bi bi-check-circle-fill me-1"></i>
                                            <small>Cumple requisito (≥75%)</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="evaluation-status text-warning">
                                            <i class="bi bi-exclamation-triangle-fill me-1"></i>
                                            <small>No cumple requisito (≥75%)</small>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(indicadores?.PeriodoEvaluado))
                                    {
                                        <div class="evaluation-period text-muted mt-1">
                                            <small><i class="bi bi-calendar-range me-1"></i>@indicadores.PeriodoEvaluado</small>
                                        </div>
                                    }
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar @GetEvaluationColorClass(indicadores?.PuntajeEvaluacion ?? 0)" 
                                             style="width: @(indicadores?.PuntajeEvaluacion ?? 0)%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: 75%</span>
                                        <span>@string.Format("{0:F2}", indicadores?.PuntajeEvaluacion ?? 0)%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(3)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-journal-code indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Horas de capacitación</h6>
                                    <div class="indicator-value">@(indicadores?.HorasCapacitacion ?? 0)</div>
                                    <div class="text-muted">horas</div>
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar" 
                                             style="width: @GetPercentage((indicadores?.HorasCapacitacion ?? 0), 120)%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: 120 horas</span>
                                        <span>@GetPercentage((indicadores?.HorasCapacitacion ?? 0), 120)%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(4)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                          <div class="col-md-6 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-search indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Tiempo en investigación</h6>
                                    <div class="indicator-value">@(indicadores?.TiempoInvestigacion ?? 0)</div>
                                    <div class="text-muted">meses</div>
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar" 
                                             style="width: @GetPercentage((indicadores?.TiempoInvestigacion ?? 0), 24)%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: 24 meses</span>
                                        <span>@GetPercentage((indicadores?.TiempoInvestigacion ?? 0), 24)%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(5)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                      <div class="d-grid gap-2 mt-4">
                        <button class="btn btn-primary btn-lg refresh-all-btn animate__animated animate__pulse animate__infinite" @onclick="RefreshIndicadores">
                            <i class="bi bi-arrow-clockwise me-2"></i> Actualizar Todos los Indicadores
                        </button>
                    </div>
                </div>
            </div>
        </div>
          <div class="row mt-5">
            <div class="col-12 text-center">
                <button class="logout-btn animate__animated animate__fadeInUp animate__delay-1s" @onclick="HandleLogout">
                    <i class="bi bi-box-arrow-right me-2"></i> Cerrar Sesión
                </button>
            </div>
            <div class="col-12 text-center mt-3">
                <p class="text-muted small animate__animated animate__fadeIn animate__delay-2s">
                    <i class="bi bi-info-circle-fill me-1"></i> Sistema Académico UTA • @DateTime.Now.ToString("yyyy")
                </p>
            </div>
        </div>
    }
</div>

@code {
    private UserInfoModel? userInfo;
    private IndicadoresModel? indicadores;
    private RequisitosModel? requisitos;
    private bool isLoading = true;
    private bool isImporting = false;
    private bool tieneSolicitudActiva = false;
    private Timer? _timer;
    private DateTime _currentTime = DateTime.Now;    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Configurar el header de autorización
            await AuthService.ConfigureAuthenticationHeader();
            
            // Refrescar información del usuario para asegurar datos actualizados
            userInfo = await AuthService.RefreshUserInfo();
            
            if (userInfo == null)
            {
                await HandleLogout();
                return;
            }
            
            // Si el usuario es administrador, redirigir al panel de administración
            if (userInfo.EsAdmin || (await AuthService.GetUserRole()) == "Administrador")
            {
                NavigationManager.NavigateTo("/admin", true);
                return;
            }
            
            await LoadIndicadores();
            await LoadRequisitos();
            await VerificarSolicitudActiva();
            
            // Calcular tiempo detallado e iniciar timer
            CalcularTiempoDetallado();
            IniciarTimer();
        }
        catch (Exception ex)
        {
            // Si hay un error al obtener la información del usuario, 
            // es posible que el token haya expirado
            Console.WriteLine($"Error en OnInitializedAsync: {ex.Message}");
            await HandleLogout();
        }
        finally
        {
            isLoading = false;
            await Task.Delay(100); // Pequeño retraso para asegurar que el DOM está listo
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLoading)
        {
            await JSRuntime.InvokeVoidAsync("initializeAnimations");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Este método se ejecuta cada vez que se navega a la página
        // Útil para refrescar datos cuando el usuario regresa después de una acción
        if (userInfo != null)
        {
            await RefreshUserData();
        }
    }
    
    /// <summary>
    /// Método público para refrescar los datos del usuario desde componentes externos
    /// </summary>
    public async Task RefreshUserData()
    {
        try
        {
            // Refrescar información del usuario
            userInfo = await AuthService.RefreshUserInfo();
            
            if (userInfo != null)
            {
                await LoadIndicadores();
                await LoadRequisitos();
                await VerificarSolicitudActiva();
                
                // Recalcular tiempo detallado
                CalcularTiempoDetallado();
                
                // Forzar actualización de la UI
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al refrescar datos del usuario: {ex.Message}");
        }
    }
    
    private async Task LoadIndicadores()
    {
        try
        {
            var response = await Http.GetAsync("api/docente/indicadores");
            
            if (response.IsSuccessStatusCode)
            {
                indicadores = await response.Content.ReadFromJsonAsync<IndicadoresModel>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleLogout();
            }
            else
            {
                // Para otros errores, inicializar con valores predeterminados
                indicadores = new IndicadoresModel();
            }
        }
        catch (Exception)
        {
            // En caso de error, inicializar con valores predeterminados
            indicadores = new IndicadoresModel();
        }
    }    private async Task LoadRequisitos()
    {
        try
        {
            if (userInfo != null)
            {
                var response = await Http.GetAsync("api/docente/requisitos");
                
                if (response.IsSuccessStatusCode)
                {
                    requisitos = await response.Content.ReadFromJsonAsync<RequisitosModel>();
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    await HandleLogout();
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    // El endpoint no existe, inicializar con valores predeterminados
                    requisitos = new RequisitosModel();
                }
                else
                {
                    // Para otros errores, inicializar con valores predeterminados
                    requisitos = new RequisitosModel();
                }
            }
        }
        catch (Exception)
        {
            // En caso de error, inicializar con valores predeterminados
            requisitos = new RequisitosModel();
        }
    }
    
    private async Task VerificarSolicitudActiva()
    {
        try
        {
            var response = await Http.GetAsync("api/solicitudascenso/tiene-solicitud-activa");
            
            if (response.IsSuccessStatusCode)
            {
                tieneSolicitudActiva = await response.Content.ReadFromJsonAsync<bool>();
            }
            else
            {
                tieneSolicitudActiva = false;
            }
        }
        catch (Exception)
        {
            tieneSolicitudActiva = false;
        }
    }
    
    private async Task RefreshIndicadores()
    {
        try
        {
            isLoading = true;
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PostAsync("api/docente/actualizar-indicadores", null);
            
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Indicadores actualizados correctamente");
                
                // Refrescar información del usuario para obtener datos actualizados
                userInfo = await AuthService.RefreshUserInfo();
                
                // Cargar indicadores y requisitos actualizados
                await LoadIndicadores();
                await LoadRequisitos();
                
                // Recalcular tiempo detallado para actualizar la barra de progreso
                CalcularTiempoDetallado();
                
                // Verificar si hay solicitud activa
                await VerificarSolicitudActiva();
                
                // Forzar actualización de la UI
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Silenciar errores de actualización de indicadores
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task UpdateIndicador(int tipo)
    {
        if (isImporting)
            return;
            
        try
        {
            isImporting = true;
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            string endpoint = "";
            string mensaje = "";
            
            switch (tipo)
            {
                case 1: // Tiempo en rol - Importar desde TTHH
                    endpoint = "api/docentes/importar-tiempo-rol";
                    mensaje = "Datos de tiempo en rol importados correctamente desde TTHH";
                    break;
                case 2: // Obras
                    endpoint = "api/docentes/importar-obras";
                    mensaje = "Obras académicas importadas correctamente";
                    break;
                case 3: // Evaluación
                    endpoint = "api/docentes/importar-evaluacion";
                    mensaje = "Evaluación docente importada correctamente desde DAC";
                    break;
                case 4: // Capacitación
                    endpoint = "api/docentes/importar-capacitacion";
                    mensaje = "Horas de capacitación importadas correctamente";
                    break;
                case 5: // Investigación
                    endpoint = "api/docentes/importar-investigacion";
                    mensaje = "Tiempo de investigación importado correctamente";
                    break;
            }
            
            if (!string.IsNullOrEmpty(endpoint))
            {
                var response = await Http.PostAsync(endpoint, null);
                
                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("showToast", mensaje);
                    
                    // Para importación de tiempo en rol, actualizar userInfo y recalcular todo
                    if (tipo == 1)
                    {
                        userInfo = await AuthService.RefreshUserInfo();
                        CalcularTiempoDetallado();
                    }
                    
                    // Para todos los tipos de indicadores, actualizar los datos completos
                    await LoadIndicadores();
                    await LoadRequisitos();
                    
                    // Si es tiempo en rol, recalcular tiempo detallado
                    if (tipo == 1)
                    {
                        CalcularTiempoDetallado();
                    }
                    
                    // Forzar actualización de la UI para reflejar cambios en la barra de progreso
                    StateHasChanged();
                }
                else
                {
                    // Manejar respuesta de error
                    var errorContent = await response.Content.ReadAsStringAsync();
                    try 
                    {
                        var errorResponse = System.Text.Json.JsonSerializer.Deserialize<ImportarDatosResponse>(errorContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                        if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Mensaje))
                        {
                            await JSRuntime.InvokeVoidAsync("showToast", errorResponse.Mensaje, "warning");
                        }
                        else
                        {
                            await JSRuntime.InvokeVoidAsync("showToast", "No se pudieron importar los datos solicitados", "error");
                        }
                    }
                    catch
                    {
                        // Si no se puede deserializar la respuesta, mostrar mensaje genérico
                        string tipoImportacion = tipo switch
                        {
                            1 => "tiempo en rol",
                            2 => "obras académicas", 
                            3 => "evaluaciones docentes",
                            4 => "capacitación",
                            5 => "investigación",
                            _ => "datos"
                        };
                        await JSRuntime.InvokeVoidAsync("showToast", $"No se pudieron importar los datos de {tipoImportacion}", "error");
                    }
                }
            }
        }
        catch (Exception)
        {
            // Silenciar errores de importación de indicadores
        }
        finally
        {
            isImporting = false;
        }
    }
    
    private int GetPercentage(int value, int max)
    {
        return max > 0 ? Math.Min(100, (value * 100) / max) : 0;
    }
    
    private string GetInitials()
    {
        if (userInfo == null)
            return "";
            
        if (string.IsNullOrEmpty(userInfo.Nombres) || string.IsNullOrEmpty(userInfo.Apellidos))
            return "";
            
        return userInfo.Nombres[0].ToString().ToUpper() + userInfo.Apellidos[0].ToString().ToUpper();
    }
    
    private string GetEvaluationColorClass(decimal puntaje)
    {
        if (puntaje >= 90)
            return "bg-success";
        else if (puntaje >= 75) // Cambio: 75% es el requisito mínimo
            return "bg-primary";
        else if (puntaje >= 70)
            return "bg-warning";
        else
            return "bg-danger";
    }
    
    private string GetRequisitosColor()
    {
        int completados = GetRequisitosCompletados();
        
        if (completados == 5)
            return "bg-success";
        else if (completados >= 3)
            return "bg-primary";
        else if (completados >= 1)
            return "bg-warning";
        else
            return "bg-danger";
    }
    
    private int GetRequisitosCompletados()
    {
        if (requisitos == null)
            return 0;
            
        int completados = 0;
        
        if (requisitos.CumpleTiempoRol) completados++;
        if (requisitos.CumpleObras) completados++;
        if (requisitos.CumpleEvaluacion) completados++;
        if (requisitos.CumpleCapacitacion) completados++;
        if (requisitos.CumpleInvestigacion) completados++;
        
        return completados;
    }
    
    private string GetStatusBadgeClass()
    {
        int completados = GetRequisitosCompletados();
        
        if (completados == 5)
            return "status-badge-success";
        else if (completados >= 3)
            return "status-badge-info";
        else if (completados >= 1)
            return "status-badge-warning";
        else
            return "status-badge-danger";
    }
    
    private string GetStatusBadgeText()
    {
        int completados = GetRequisitosCompletados();
        
        if (tieneSolicitudActiva)
            return "Solicitud en proceso - Esperando revisión";
        else if (completados == 5)
            return "Requisitos completados - Puede solicitar ascenso";
        else if (completados >= 3)
            return "Avance significativo en requisitos";
        else if (completados >= 1)
            return "Progreso inicial en requisitos";
        else
            return "Requisitos no cumplidos";
    }
    
    private async Task HandleLogout()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/login");
    }
    
    // Métodos para cálculo de tiempo detallado
    private void CalcularTiempoDetallado()
    {
        if (indicadores == null || userInfo == null)
            return;
            
        _currentTime = DateTime.Now;
        var fechaInicio = userInfo.FechaIngresoNivelActual;
        var tiempoTranscurrido = _currentTime - fechaInicio;
        var tiempoMinimoRequerido = TimeSpan.FromDays(4 * 365.25); // 4 años
        
        indicadores.FechaInicioRol = fechaInicio;
        indicadores.TiempoTranscurrido = tiempoTranscurrido;
        indicadores.CumpleTiempoMinimo = tiempoTranscurrido >= tiempoMinimoRequerido;
        
        if (indicadores.CumpleTiempoMinimo)
        {
            indicadores.TiempoRestante = TimeSpan.Zero;
            indicadores.TiempoRestanteTexto = "¡Tiempo cumplido!";
        }
        else
        {
            indicadores.TiempoRestante = tiempoMinimoRequerido - tiempoTranscurrido;
            indicadores.TiempoRestanteTexto = FormatearTiempoRestante(indicadores.TiempoRestante);
        }
        
        indicadores.TiempoTranscurridoTexto = FormatearTiempoTranscurrido(tiempoTranscurrido);
    }
    
    private string FormatearTiempoTranscurrido(TimeSpan tiempo)
    {
        var años = (int)(tiempo.TotalDays / 365.25);
        var meses = (int)((tiempo.TotalDays % 365.25) / 30.44);
        var dias = (int)((tiempo.TotalDays % 365.25) % 30.44);
        var horas = tiempo.Hours;
        var minutos = tiempo.Minutes;
        
        var partes = new List<string>();
        
        if (años > 0)
            partes.Add($"{años} año{(años != 1 ? "s" : "")}");
        if (meses > 0)
            partes.Add($"{meses} mes{(meses != 1 ? "es" : "")}");
        if (dias > 0 && años == 0) // Solo mostrar días si no hay años
            partes.Add($"{dias} día{(dias != 1 ? "s" : "")}");
        if (horas > 0 && años == 0 && meses == 0) // Solo mostrar horas si no hay años ni meses
            partes.Add($"{horas} hora{(horas != 1 ? "s" : "")}");
        if (minutos > 0 && años == 0 && meses == 0 && dias == 0) // Solo mostrar minutos si solo hay horas y minutos
            partes.Add($"{minutos} minuto{(minutos != 1 ? "s" : "")}");
            
        return partes.Count > 0 ? string.Join(", ", partes) : "Menos de 1 minuto";
    }
    
    private string FormatearTiempoRestante(TimeSpan tiempo)
    {
        var años = (int)(tiempo.TotalDays / 365.25);
        var meses = (int)((tiempo.TotalDays % 365.25) / 30.44);
        var dias = (int)((tiempo.TotalDays % 365.25) % 30.44);
        var horas = tiempo.Hours;
        var minutos = tiempo.Minutes;
        
        var partes = new List<string>();
        
        if (años > 0)
            partes.Add($"{años} año{(años != 1 ? "s" : "")}");
        if (meses > 0)
            partes.Add($"{meses} mes{(meses != 1 ? "es" : "")}");
        if (dias > 0 && años < 2) // Mostrar días solo si hay menos de 2 años
            partes.Add($"{dias} día{(dias != 1 ? "s" : "")}");
        if (horas > 0 && años == 0 && meses < 6) // Mostrar horas solo si hay menos de 6 meses
            partes.Add($"{horas} hora{(horas != 1 ? "s" : "")}");
        if (minutos > 0 && años == 0 && meses == 0 && dias < 7) // Mostrar minutos solo en los últimos días
            partes.Add($"{minutos} minuto{(minutos != 1 ? "s" : "")}");
            
        return partes.Count > 0 ? string.Join(", ", partes) : "Menos de 1 minuto";
    }
    
    private int GetTiempoPercentage()
    {
        if (indicadores == null || userInfo == null)
            return 0;
            
        var tiempoTranscurrido = _currentTime - userInfo.FechaIngresoNivelActual;
        var tiempoMinimoEnDias = 4 * 365.25; // 4 años en días
        var porcentaje = (int)Math.Min(100, (tiempoTranscurrido.TotalDays / tiempoMinimoEnDias) * 100);
        
        return porcentaje;
    }
    
    private void IniciarTimer()
    {
        _timer = new Timer(async _ =>
        {
            _currentTime = DateTime.Now;
            CalcularTiempoDetallado();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1)); // Actualizar cada minuto
    }
    
    private void DetenerTimer()
    {
        _timer?.Dispose();
        _timer = null;
    }
    
    public void Dispose()
    {
        DetenerTimer();
    }
}
