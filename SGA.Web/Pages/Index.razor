@page "/"
@attribute [Authorize]
@using SGA.Web.Models
@using SGA.Web.Models.Admin
@using SGA.Web.Models.Enums
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using System.Net.Http.Json
@using SGA.Web.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService ToastService
@implements IDisposable

<link href="css/index-modal.css" rel="stylesheet" />

<script>
window.addKeyboardShortcuts = function(dotNetHelper) {
    console.log("addKeyboardShortcuts llamado con dotNetHelper:", dotNetHelper);
    
    // Remover listener anterior si existe
    if (window.keydownHandler) {
        document.removeEventListener("keydown", window.keydownHandler);
        console.log("Listener anterior removido");
    }
    
    // Crear nueva funci√≥n handler
    window.keydownHandler = function(event) {
        // Log m√°s detallado para debug
        console.log("Evento keydown detectado:", {
            key: event.key,
            code: event.code,
            keyCode: event.keyCode,
            altKey: event.altKey,
            ctrlKey: event.ctrlKey,
            shiftKey: event.shiftKey,
            target: event.target.tagName
        });
        
        // Verificar si se presion√≥ Alt+0 (m√∫ltiples verificaciones para compatibilidad)
        if (event.altKey && (event.key === "0" || event.code === "Digit0" || event.keyCode === 48)) {
            event.preventDefault(); // Prevenir el comportamiento por defecto
            event.stopPropagation(); // Detener la propagaci√≥n del evento
            
            console.log("üéØ Alt+0 detectado! Ejecutando reinicio visual...");
            
            try {
                if (dotNetHelper && typeof dotNetHelper.invokeMethodAsync === 'function') {
                    dotNetHelper.invokeMethodAsync("ReiniciarCardsVisualmente")
                        .then(() => {
                            console.log("‚úÖ M√©todo C# ReiniciarCardsVisualmente ejecutado exitosamente");
                        })
                        .catch((error) => {
                            console.error("‚ùå Error al ejecutar m√©todo C#:", error);
                        });
                } else {
                    console.error("‚ùå dotNetHelper no est√° disponible o no tiene invokeMethodAsync");
                    console.log("dotNetHelper:", dotNetHelper);
                }
            } catch (error) {
                console.error("‚ùå Error al invocar m√©todo C#:", error);
            }
        }
    };
    
    // Agregar el nuevo listener
    document.addEventListener("keydown", window.keydownHandler, { capture: true });
    console.log("‚úÖ Event listener para Alt+0 registrado correctamente");
    
    // Funci√≥n de prueba para verificar que el shortcut funciona
    window.testShortcut = function() {
        console.log("üß™ Probando shortcut manualmente...");
        try {
            if (dotNetHelper && typeof dotNetHelper.invokeMethodAsync === 'function') {
                dotNetHelper.invokeMethodAsync("ReiniciarCardsVisualmente")
                    .then(() => {
                        console.log("‚úÖ M√©todo C# invocado exitosamente desde test");
                    })
                    .catch((error) => {
                        console.error("‚ùå Error al invocar m√©todo C# desde test:", error);
                    });
            } else {
                console.error("‚ùå dotNetHelper no est√° disponible en test");
            }
        } catch (error) {
            console.error("‚ùå Error al invocar m√©todo C# desde test:", error);
        }
    };
    
    // Mensaje de confirmaci√≥n
    console.log("üöÄ Sistema de shortcuts inicializado. Presiona Alt+0 para reiniciar cards o ejecuta window.testShortcut() para probar.");
};
</script>

<div class="container dashboard-container">
    <div class="welcome-section animate__animated animate__fadeInDown">
        <div class="welcome-header">
            <div class="welcome-icon">
                <i class="bi bi-award"></i>
            </div>
            <h2 class="welcome-title">¬°Bienvenido al Sistema de Gesti√≥n de Ascensos!</h2>
        </div>
        @if (userInfo != null)
        {
            <h4 class="welcome-subtitle animate__animated animate__fadeIn animate__delay-1s">
                Hola, <span class="text-primary fw-bold">@userInfo.Nombres @userInfo.Apellidos</span>
            </h4>
        }
    </div>    @if (isLoading)
    {
        <div class="row justify-content-center mt-5">
            <div class="col-md-6 text-center">
                <div class="loading-container animate__animated animate__fadeIn">
                    <div class="spinner-grow text-primary" role="status"></div>
                    <div class="spinner-grow text-primary" role="status" style="animation-delay: 0.2s"></div>
                    <div class="spinner-grow text-primary" role="status" style="animation-delay: 0.4s"></div>
                </div>
                <p class="mt-4 loading-text animate__animated animate__fadeIn animate__delay-1s">
                    <i class="bi bi-clock-history me-2"></i>Cargando informaci√≥n del usuario...
                </p>
            </div>
        </div>
    }
    else if (userInfo != null)
    {        <div class="row">
            <div class="col-lg-12">
                <div class="user-summary-bar animate__animated animate__fadeInLeft mb-4">
                    <div class="user-avatar">
                        <div class="avatar avatar-md">
                            @if (!string.IsNullOrEmpty(userInfo.FotoPerfilBase64))
                            {
                                <img src="data:image/jpeg;base64,@userInfo.FotoPerfilBase64" alt="Foto de perfil" />
                            }
                            else
                            {
                                <span class="avatar-initial">@GetInitials()</span>
                            }
                        </div>
                    </div>
                    <div class="user-info">
                        <h5 class="mb-0">Titular @userInfo.NivelActual | @(userInfo.FacultadInfo?.Nombre ?? userInfo.Facultad)</h5>
                        <p class="text-muted mb-0"><i class="bi bi-calendar-event me-1"></i> Ingreso: @userInfo.FechaIngresoNivelActual.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="user-actions">
                        <a href="/perfil" class="btn btn-outline-primary">
                            <i class="bi bi-person-fill me-2"></i> Mi Perfil
                        </a>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-12">
                <div class="status-section">
                    <h4 class="section-title">Estado de Requisitos</h4>
                    
                    <div class="alert alert-info mb-3">
                        <i class="bi bi-info-circle me-2"></i>
                        <strong>Proceso de Ascenso:</strong> Ning√∫n proceso de ascenso se inicia autom√°ticamente. 
                        Usted debe hacer clic en el bot√≥n "Iniciar Proceso de Ascenso" cuando cumpla todos los requisitos 
                        para enviar formalmente su solicitud al administrador.
                    </div>
                    
                    @if (requisitos != null)
                    {
                        <div class="status-card">
                            <h5 class="status-title">
                                <i class="bi bi-clipboard-check"></i> 
                                Progreso para ascenso a Titular @(userInfo.NivelActual + 1)
                            </h5>
                              <div class="progress-container animate__animated animate__fadeInUp animate__delay-1s">
                                <div class="progress-label">
                                    <span><i class="bi bi-check-circle-fill me-2"></i>Requisitos cumplidos:</span>
                                    <span class="badge bg-primary">@GetRequisitosCompletados() de 5</span>
                                </div>
                                <div class="progress progress-lg">
                                    <div class="progress-bar @GetRequisitosColor()" 
                                         role="progressbar" 
                                         style="width: @(GetRequisitosCompletados() * 20)%;" 
                                         aria-valuenow="@GetRequisitosCompletados()" 
                                         aria-valuemin="0" 
                                         aria-valuemax="5">
                                        <span class="progress-value">@(GetRequisitosCompletados() * 20)%</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="status-badge @GetStatusBadgeClass()">
                                @GetStatusBadgeText()
                            </div>
                            
                            @* Bot√≥n para iniciar proceso de ascenso - solo aparece cuando cumple requisitos *@
                            @if (tieneSolicitudActiva)
                            {
                                <div class="alert alert-primary mt-3 mb-3">
                                    <i class="bi bi-clock-history me-2"></i>
                                    <strong>Proceso en curso:</strong> Ya tiene una solicitud de ascenso activa siendo procesada por el administrador.
                                </div>
                                <div class="d-grid gap-2">
                                    <a href="/solicitudes" class="btn btn-primary btn-lg">
                                        <i class="bi bi-list-ul me-2"></i> Ver Mis Solicitudes
                                    </a>
                                    <small class="text-muted text-center">
                                        Consulte el estado de su solicitud de ascenso
                                    </small>
                                </div>
                            }
                            else if (requisitos != null && requisitos.CumpleTiempoRol && requisitos.CumpleObras && 
                                 requisitos.CumpleEvaluacion && requisitos.CumpleCapacitacion && requisitos.CumpleInvestigacion)
                            {
                                <div class="alert alert-success mt-3 mb-3">
                                    <i class="bi bi-check-circle-fill me-2"></i>
                                    <strong>¬°Felicidades!</strong> Usted cumple con todos los requisitos para solicitar ascenso a Titular @(userInfo.NivelActual + 1).
                                </div>
                                <div class="d-grid gap-2">
                                    <a href="/solicitudes/nueva" class="btn btn-success btn-lg">
                                        <i class="bi bi-rocket-takeoff me-2"></i> Iniciar Proceso de Ascenso
                                    </a>
                                    <small class="text-muted text-center">
                                        Al hacer clic se iniciar√° el proceso formal de solicitud de ascenso
                                    </small>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning mt-3 mb-3">
                                    <i class="bi bi-hourglass-split me-2"></i>
                                    A√∫n no cumple con todos los requisitos para el ascenso. Contin√∫e trabajando en completar los indicadores faltantes.
                                </div>
                                <div class="d-grid gap-2">
                                    <button class="btn btn-detalles-ir" @onclick="AbrirModalRequisitos">
                                        <i class="bi bi-info-circle me-2"></i> Ver detalles completos
                                    </button>
                                    <small class="text-muted text-center">
                                        Revise los requisitos espec√≠ficos para su proceso de ascenso
                                    </small>
                                </div>
                            }
                        </div>
                    }
                </div>
                  <div class="indicators-section">
                    <div class="section-header mb-3">
                        <h4 class="section-title"><i class="bi bi-graph-up me-2"></i>Indicadores Acad√©micos</h4>
                        <p class="text-muted">Estos son los indicadores clave para tu proceso de ascenso</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-clock-history indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Tiempo en rol actual</h6>
                                    <div class="indicator-value">
                                        <div class="tiempo-transcurrido">
                                            @if (indicadores != null && !string.IsNullOrEmpty(indicadores.TiempoTranscurridoTexto))
                                            {
                                                <span class="tiempo-actual">@indicadores.TiempoTranscurridoTexto</span>
                                            }
                                            else
                                            {
                                                <span class="tiempo-actual">@(indicadores?.TiempoRol ?? 0) meses</span>
                                            }
                                        </div>
                                        @if (indicadores != null && !string.IsNullOrEmpty(indicadores.TiempoRestanteTexto))
                                        {
                                            <div class="tiempo-restante @(indicadores.CumpleTiempoMinimo ? "text-success" : "text-warning")">
                                                @if (indicadores.CumpleTiempoMinimo)
                                                {
                                                    <i class="bi bi-check-circle-fill me-1"></i>
                                                    <small>¬°Tiempo m√≠nimo cumplido!</small>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-hourglass-split me-1"></i>
                                                    <small>Falta: @indicadores.TiempoRestanteTexto</small>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="text-muted">
                                        @if (userInfo != null)
                                        {
                                            <small>Desde: @userInfo.FechaIngresoNivelActual.ToString("dd/MM/yyyy HH:mm")</small>
                                        }
                                    </div>
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar @(indicadores?.CumpleTiempoMinimo == true ? "bg-success" : "")" 
                                             style="width: @GetTiempoPercentage()%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: @GetTiempoRequeritoTexto()</span>
                                        <span>@GetTiempoPercentage()%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(1)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-book indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Obras acad√©micas</h6>
                                    <div class="indicator-value">@(reinicioVisual ? 0 : (indicadores?.NumeroObras ?? 0))</div>
                                    <div class="text-muted">obras</div>
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar" 
                                             style="width: @(reinicioVisual ? 0 : GetPercentage((indicadores?.NumeroObras ?? 0), GetObrasRequeridas()))%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: @GetObrasRequeridas() obras</span>
                                        <span>@(reinicioVisual ? 0 : GetPercentage((indicadores?.NumeroObras ?? 0), GetObrasRequeridas()))%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(2)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-award indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Evaluaci√≥n docente</h6>
                                    <div class="indicator-value">
                                        <div class="evaluation-score">@(reinicioVisual ? "0.00" : string.Format("{0:F2}", indicadores?.PuntajeEvaluacion ?? 0))%</div>
                                        @if (indicadores?.PeriodosEvaluados > 0)
                                        {
                                            <div class="evaluation-detail text-muted">
                                                <small>Promedio de @(indicadores.PeriodosEvaluados) evaluaciones</small>
                                            </div>
                                        }
                                    </div>
                                    @if (indicadores?.CumpleRequisitoEvaluacion == true)
                                    {
                                        <div class="evaluation-status text-success">
                                            <i class="bi bi-check-circle-fill me-1"></i>
                                            <small>Cumple requisito (‚â•@GetEvaluacionRequerida()%)</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="evaluation-status text-warning">
                                            <i class="bi bi-exclamation-triangle-fill me-1"></i>
                                            <small>No cumple requisito (‚â•@GetEvaluacionRequerida()%)</small>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(indicadores?.PeriodoEvaluado))
                                    {
                                        <div class="evaluation-period text-muted mt-1">
                                            <small><i class="bi bi-calendar-range me-1"></i>@indicadores.PeriodoEvaluado</small>
                                        </div>
                                    }
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar @(reinicioVisual ? "" : GetEvaluationColorClass(indicadores?.PuntajeEvaluacion ?? 0))" 
                                             style="width: @(reinicioVisual ? 0 : (indicadores?.PuntajeEvaluacion ?? 0))%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: @GetEvaluacionRequerida()%</span>
                                        <span>@(reinicioVisual ? "0.00" : string.Format("{0:F2}", indicadores?.PuntajeEvaluacion ?? 0))%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(3)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-journal-code indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Horas de capacitaci√≥n</h6>
                                    <div class="indicator-value">@(reinicioVisual ? 0 : (indicadores?.HorasCapacitacion ?? 0))</div>
                                    <div class="text-muted">horas</div>
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar" 
                                             style="width: @(reinicioVisual ? 0 : GetPercentage((indicadores?.HorasCapacitacion ?? 0), GetCapacitacionRequerida()))%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: @GetCapacitacionRequerida() horas</span>
                                        <span>@(reinicioVisual ? 0 : GetPercentage((indicadores?.HorasCapacitacion ?? 0), GetCapacitacionRequerida()))%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(4)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                          <div class="col-md-6 mb-4">
                            <div class="indicator-card">
                                <div class="card-header-mini">
                                    <i class="bi bi-search indicator-icon"></i>
                                </div>
                                <div class="card-body">
                                    <h6 class="indicator-title">Tiempo en investigaci√≥n</h6>
                                    <div class="indicator-value">@(reinicioVisual ? 0 : (indicadores?.TiempoInvestigacion ?? 0))</div>
                                    <div class="text-muted">meses</div>
                                    <div class="indicator-progress">
                                        <div class="indicator-progress-bar" 
                                             style="width: @(reinicioVisual ? 0 : GetPercentage((indicadores?.TiempoInvestigacion ?? 0), GetInvestigacionRequerida()))%;"></div>
                                    </div>
                                    <div class="indicator-meta">
                                        <span>Meta: @GetInvestigacionRequerida() meses</span>
                                        <span>@(reinicioVisual ? 0 : GetPercentage((indicadores?.TiempoInvestigacion ?? 0), GetInvestigacionRequerida()))%</span>
                                    </div>
                                    <button class="btn action-btn import-btn mt-3" @onclick="() => UpdateIndicador(5)">
                                        <i class="bi bi-arrow-repeat"></i> Importar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                      <div class="d-grid gap-2 mt-4">
                        <button class="btn btn-primary btn-lg refresh-all-btn animate__animated animate__pulse animate__infinite" @onclick="RefreshIndicadores">
                            <i class="bi bi-arrow-clockwise me-2"></i> Actualizar Todos los Indicadores
                        </button>
                    </div>
                </div>
            </div>
        </div>
          <div class="row mt-5">
            <div class="col-12 text-center">
                <button class="logout-btn animate__animated animate__fadeInUp animate__delay-1s" @onclick="HandleLogout">
                    <i class="bi bi-box-arrow-right me-2"></i> Cerrar Sesi√≥n
                </button>
            </div>
            <div class="col-12 text-center mt-3">
                <p class="text-muted small animate__animated animate__fadeIn animate__delay-2s">
                    <i class="bi bi-info-circle-fill me-1"></i> Sistema Acad√©mico UTA ‚Ä¢ @DateTime.Now.ToString("yyyy")
                </p>
            </div>
        </div>
    }
</div>

<!-- Modal de Requisitos para Ascenso -->
@if (mostrarModalRequisitos)
{
    <div class="modal-backdrop-ir fade show"></div>
    <div class="modal-ir modal-lg fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog-ir">
            <div class="modal-content-ir">
                <div class="modal-header-ir">
                    <h5 class="modal-title-ir">
                        <i class="bi bi-clipboard-check me-2"></i>
                        Requisitos para Ascenso a Titular @(userInfo?.NivelActual + 1 ?? 0)
                    </h5>
                    <button type="button" class="btn-close-ir" @onclick="CerrarModalRequisitos" aria-label="Cerrar">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="modal-body-ir">
                    @if (cargandoRequisitosModal)
                    {
                        <div class="loading-container-ir text-center py-5">
                            <div class="spinner-border-ir text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-3 text-muted">Cargando configuraci√≥n de requisitos...</p>
                        </div>
                    }
                    else if (configuracionRequisitos != null)
                    {
                        @if (userInfo?.EsAdmin == true)
                        {
                            <!-- Modo Edici√≥n para Admin -->
                            <div class="alert alert-info-ir mb-4">
                                <i class="bi bi-shield-check me-2"></i>
                                <strong>Modo Administrador:</strong> Puede editar los requisitos en tiempo real.
                            </div>
                            
                            <form @onsubmit="GuardarCambiosRequisitos" @onsubmit:preventDefault="true">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label-ir fw-bold">
                                            <i class="bi bi-clock-history me-1"></i>
                                            Tiempo M√≠nimo (meses)
                                        </label>
                                        <input type="number" class="form-control-ir" 
                                               @bind="configuracionRequisitos.TiempoMinimoMeses" 
                                               min="1" max="120" required />
                                        <div class="form-text-ir">
                                            Actualmente: @(configuracionRequisitos.TiempoMinimoMeses / 12) a√±os 
                                            @(configuracionRequisitos.TiempoMinimoMeses % 12) meses
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label-ir fw-bold">
                                            <i class="bi bi-book me-1"></i>
                                            Obras M√≠nimas
                                        </label>
                                        <input type="number" class="form-control-ir" 
                                               @bind="configuracionRequisitos.ObrasMinimas" 
                                               min="0" max="50" required />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label-ir fw-bold">
                                            <i class="bi bi-award me-1"></i>
                                            Evaluaci√≥n M√≠nima (%)
                                        </label>
                                        <input type="number" class="form-control-ir" 
                                               @bind="configuracionRequisitos.PuntajeEvaluacionMinimo" 
                                               min="0" max="100" step="0.01" required />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label-ir fw-bold">
                                            <i class="bi bi-journal-code me-1"></i>
                                            Horas de Capacitaci√≥n
                                        </label>
                                        <input type="number" class="form-control-ir" 
                                               @bind="configuracionRequisitos.HorasCapacitacionMinimas" 
                                               min="0" max="500" required />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label-ir fw-bold">
                                            <i class="bi bi-search me-1"></i>
                                            Tiempo de Investigaci√≥n (meses)
                                        </label>
                                        <input type="number" class="form-control-ir" 
                                               @bind="configuracionRequisitos.TiempoInvestigacionMinimo" 
                                               min="0" max="120" required />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label-ir fw-bold">
                                            <i class="bi bi-toggle-on me-1"></i>
                                            Estado
                                        </label>
                                        <select class="form-select-ir" @bind="configuracionRequisitos.EstaActivo">
                                            <option value="true">Activo</option>
                                            <option value="false">Inactivo</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label-ir fw-bold">
                                        <i class="bi bi-file-text me-1"></i>
                                        Descripci√≥n (Opcional)
                                    </label>
                                    <textarea class="form-control-ir" rows="3" 
                                              @bind="configuracionRequisitos.Descripcion"
                                              placeholder="Descripci√≥n adicional sobre estos requisitos..."></textarea>
                                </div>
                                
                                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                    <button type="button" class="btn btn-secondary-ir" @onclick="CerrarModalRequisitos">
                                        <i class="bi bi-x-circle me-2"></i>Cancelar
                                    </button>
                                    <button type="submit" class="btn btn-primary-ir" disabled="@guardandoCambios">
                                        @if (guardandoCambios)
                                        {
                                            <span class="spinner-border-ir spinner-border-sm me-2" role="status"></span>
                                            <span>Guardando...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-check-circle me-2"></i>
                                            <span>Guardar Cambios</span>
                                        }
                                    </button>
                                </div>
                            </form>
                        }
                        else
                        {
                            <!-- Modo Solo Lectura para Usuarios -->
                            <div class="requisitos-readonly-ir">
                                <div class="alert alert-primary-ir mb-4">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Estos son los requisitos actuales para ascender al siguiente nivel.
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-6 mb-4">
                                        <div class="requisito-card-ir">
                                            <div class="requisito-header-ir">
                                                <i class="bi bi-clock-history text-primary"></i>
                                                <span class="requisito-title-ir">Tiempo en Nivel</span>
                                            </div>
                                            <div class="requisito-value-ir">
                                                @(configuracionRequisitos.TiempoMinimoMeses / 12) a√±os 
                                                @(configuracionRequisitos.TiempoMinimoMeses % 12) meses
                                            </div>
                                            <div class="requisito-status-ir">
                                                @if (requisitos?.CumpleTiempoRol == true)
                                                {
                                                    <span class="badge bg-success-ir">
                                                        <i class="bi bi-check-circle me-1"></i>Cumplido
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning-ir">
                                                        <i class="bi bi-clock me-1"></i>En progreso
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6 mb-4">
                                        <div class="requisito-card-ir">
                                            <div class="requisito-header-ir">
                                                <i class="bi bi-book text-info"></i>
                                                <span class="requisito-title-ir">Obras Acad√©micas</span>
                                            </div>
                                            <div class="requisito-value-ir">
                                                M√≠nimo @configuracionRequisitos.ObrasMinimas obras
                                            </div>
                                            <div class="requisito-status-ir">
                                                @if (requisitos?.CumpleObras == true)
                                                {
                                                    <span class="badge bg-success-ir">
                                                        <i class="bi bi-check-circle me-1"></i>Cumplido
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning-ir">
                                                        <i class="bi bi-clock me-1"></i>Pendiente
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6 mb-4">
                                        <div class="requisito-card-ir">
                                            <div class="requisito-header-ir">
                                                <i class="bi bi-award text-warning"></i>
                                                <span class="requisito-title-ir">Evaluaci√≥n Docente</span>
                                            </div>
                                            <div class="requisito-value-ir">
                                                M√≠nimo @configuracionRequisitos.PuntajeEvaluacionMinimo%
                                            </div>
                                            <div class="requisito-status-ir">
                                                @if (requisitos?.CumpleEvaluacion == true)
                                                {
                                                    <span class="badge bg-success-ir">
                                                        <i class="bi bi-check-circle me-1"></i>Cumplido
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger-ir">
                                                        <i class="bi bi-x-circle me-1"></i>No cumplido
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6 mb-4">
                                        <div class="requisito-card-ir">
                                            <div class="requisito-header-ir">
                                                <i class="bi bi-journal-code text-success"></i>
                                                <span class="requisito-title-ir">Capacitaci√≥n</span>
                                            </div>
                                            <div class="requisito-value-ir">
                                                M√≠nimo @configuracionRequisitos.HorasCapacitacionMinimas horas
                                            </div>
                                            <div class="requisito-status-ir">
                                                @if (requisitos?.CumpleCapacitacion == true)
                                                {
                                                    <span class="badge bg-success-ir">
                                                        <i class="bi bi-check-circle me-1"></i>Cumplido
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning-ir">
                                                        <i class="bi bi-clock me-1"></i>Pendiente
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6 mb-4">
                                        <div class="requisito-card-ir">
                                            <div class="requisito-header-ir">
                                                <i class="bi bi-search text-secondary"></i>
                                                <span class="requisito-title-ir">Investigaci√≥n</span>
                                            </div>
                                            <div class="requisito-value-ir">
                                                M√≠nimo @configuracionRequisitos.TiempoInvestigacionMinimo meses
                                            </div>
                                            <div class="requisito-status-ir">
                                                @if (requisitos?.CumpleInvestigacion == true)
                                                {
                                                    <span class="badge bg-success-ir">
                                                        <i class="bi bi-check-circle me-1"></i>Cumplido
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning-ir">
                                                        <i class="bi bi-clock me-1"></i>Pendiente
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(configuracionRequisitos.Descripcion))
                                {
                                    <div class="alert alert-light-ir mt-4">
                                        <h6 class="fw-bold mb-2">
                                            <i class="bi bi-info-circle me-2"></i>Informaci√≥n Adicional
                                        </h6>
                                        <p class="mb-0">@configuracionRequisitos.Descripcion</p>
                                    </div>
                                }
                                
                                <div class="d-grid gap-2 mt-4">
                                    <button type="button" class="btn btn-outline-primary-ir" @onclick="CerrarModalRequisitos">
                                        <i class="bi bi-arrow-left me-2"></i>Volver al Dashboard
                                    </button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning-ir">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <strong>No se encontr√≥ configuraci√≥n:</strong> 
                            No hay requisitos configurados para el ascenso al siguiente nivel.
                        </div>
                        <div class="d-grid">
                            <button type="button" class="btn btn-secondary-ir" @onclick="CerrarModalRequisitos">
                                <i class="bi bi-arrow-left me-2"></i>Cerrar
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserInfoModel? userInfo;
    private IndicadoresModel? indicadores;
    private RequisitosModel? requisitos;
    private bool isLoading = true;
    private bool isImporting = false;
    private bool tieneSolicitudActiva = false;
    private Timer? _timer;
    private DateTime _currentTime = DateTime.Now;
    
    // Variables para el modal de requisitos
    private bool mostrarModalRequisitos = false;
    private bool cargandoRequisitosModal = false;
    private bool guardandoCambios = false;
    private ConfiguracionRequisitoDto? configuracionRequisitos = null;
    
    // Variables para el reinicio visual de las cards
    private bool reinicioVisual = false;    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Configurar el header de autorizaci√≥n
            await AuthService.ConfigureAuthenticationHeader();
            
            // Refrescar informaci√≥n del usuario para asegurar datos actualizados
            userInfo = await AuthService.RefreshUserInfo();
            
            if (userInfo == null)
            {
                await HandleLogout();
                return;
            }
            
            // Si el usuario es administrador, redirigir al panel de administraci√≥n
            if (userInfo.EsAdmin || (await AuthService.GetUserRole()) == "Administrador")
            {
                NavigationManager.NavigateTo("/admin", true);
                return;
            }
            
            await LoadIndicadores();
            await LoadRequisitos();
            await CargarConfiguracionRequisitos(); // ‚úÖ AGREGAR: Cargar configuraci√≥n al inicio
            await VerificarSolicitudActiva();
            
            // Calcular tiempo detallado e iniciar timer
            CalcularTiempoDetallado();
            IniciarTimer();
        }
        catch (Exception ex)
        {
            // Si hay un error al obtener la informaci√≥n del usuario, 
            // es posible que el token haya expirado
            Console.WriteLine($"Error en OnInitializedAsync: {ex.Message}");
            await HandleLogout();
        }
        finally
        {
            isLoading = false;
            await Task.Delay(100); // Peque√±o retraso para asegurar que el DOM est√° listo
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Esperar un poco para que el DOM est√© completamente cargado
                await Task.Delay(100);
                
                await JSRuntime.InvokeVoidAsync("initializeAnimations");
                await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts", DotNetObjectReference.Create(this));
                Console.WriteLine("Shortcuts de teclado inicializados correctamente");
                
                // Verificar que el shortcut funciona
                await JSRuntime.InvokeVoidAsync("eval", "console.log('Verificando shortcut: presiona Alt+0 para probar')");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al inicializar shortcuts: {ex.Message}");
                
                // Intentar nuevamente despu√©s de un delay m√°s largo
                await Task.Delay(1000);
                try
                {
                    await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts", DotNetObjectReference.Create(this));
                    Console.WriteLine("Shortcuts de teclado inicializados en segundo intento");
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"Error en segundo intento: {ex2.Message}");
                }
            }
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Este m√©todo se ejecuta cada vez que se navega a la p√°gina
        // √ötil para refrescar datos cuando el usuario regresa despu√©s de una acci√≥n
        if (userInfo != null)
        {
            await RefreshUserData();
        }
    }
    
    /// <summary>
    /// M√©todo p√∫blico para refrescar los datos del usuario desde componentes externos
    /// </summary>
    public async Task RefreshUserData()
    {
        try
        {
            // Refrescar informaci√≥n del usuario
            userInfo = await AuthService.RefreshUserInfo();
            
            if (userInfo != null)
            {
                await LoadIndicadores();
                await LoadRequisitos();
                await VerificarSolicitudActiva();
                
                // Recalcular tiempo detallado
                CalcularTiempoDetallado();
                
                // Forzar actualizaci√≥n de la UI
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al refrescar datos del usuario: {ex.Message}");
        }
    }
    
    private async Task LoadIndicadores()
    {
        try
        {
            var response = await Http.GetAsync("api/docente/indicadores");
            
            if (response.IsSuccessStatusCode)
            {
                indicadores = await response.Content.ReadFromJsonAsync<IndicadoresModel>();
                // Resetear el reinicio visual cuando se cargan nuevos datos
                reinicioVisual = false;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await HandleLogout();
            }
            else
            {
                // Para otros errores, inicializar con valores predeterminados
                indicadores = new IndicadoresModel();
            }
        }
        catch (Exception)
        {
            // En caso de error, inicializar con valores predeterminados
            indicadores = new IndicadoresModel();
        }
    }    private async Task LoadRequisitos()
    {
        try
        {
            if (userInfo != null)
            {
                var response = await Http.GetAsync("api/docente/requisitos");
                
                if (response.IsSuccessStatusCode)
                {
                    requisitos = await response.Content.ReadFromJsonAsync<RequisitosModel>();
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    await HandleLogout();
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    // El endpoint no existe, inicializar con valores predeterminados
                    requisitos = new RequisitosModel();
                }
                else
                {
                    // Para otros errores, inicializar con valores predeterminados
                    requisitos = new RequisitosModel();
                }
            }
        }
        catch (Exception)
        {
            // En caso de error, inicializar con valores predeterminados
            requisitos = new RequisitosModel();
        }
    }
    
    private async Task VerificarSolicitudActiva()
    {
        try
        {
            var response = await Http.GetAsync("api/solicitudascenso/tiene-solicitud-activa");
            
            if (response.IsSuccessStatusCode)
            {
                tieneSolicitudActiva = await response.Content.ReadFromJsonAsync<bool>();
            }
            else
            {
                tieneSolicitudActiva = false;
            }
        }
        catch (Exception)
        {
            tieneSolicitudActiva = false;
        }
    }
    
    private async Task RefreshIndicadores()
    {
        try
        {
            isLoading = true;
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PostAsync("api/docente/actualizar-indicadores", null);
            
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Indicadores actualizados correctamente");
                
                // Refrescar informaci√≥n del usuario para obtener datos actualizados
                userInfo = await AuthService.RefreshUserInfo();
                
                // Cargar indicadores y requisitos actualizados
                await LoadIndicadores();
                await LoadRequisitos();
                
                // Resetear el reinicio visual cuando se actualizan los datos
                reinicioVisual = false;
                
                // Recalcular tiempo detallado para actualizar la barra de progreso
                CalcularTiempoDetallado();
                
                // Verificar si hay solicitud activa
                await VerificarSolicitudActiva();
                
                // Forzar actualizaci√≥n de la UI
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Silenciar errores de actualizaci√≥n de indicadores
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task UpdateIndicador(int tipo)
    {
        if (isImporting)
            return;
            
        try
        {
            isImporting = true;
            
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            string endpoint = "";
            string mensaje = "";
            
            switch (tipo)
            {
                case 1: // Tiempo en rol - Importar desde TTHH
                    endpoint = "api/docentes/importar-tiempo-rol";
                    mensaje = "Datos de tiempo en rol importados correctamente desde TTHH";
                    break;
                case 2: // Obras
                    endpoint = "api/docentes/importar-obras";
                    mensaje = "Obras acad√©micas importadas correctamente";
                    break;
                case 3: // Evaluaci√≥n
                    endpoint = "api/docentes/importar-evaluacion";
                    mensaje = "Evaluaci√≥n docente importada correctamente desde DAC";
                    break;
                case 4: // Capacitaci√≥n
                    endpoint = "api/docentes/importar-capacitacion";
                    mensaje = "Horas de capacitaci√≥n importadas correctamente";
                    break;
                case 5: // Investigaci√≥n
                    endpoint = "api/docentes/importar-investigacion";
                    mensaje = "Tiempo de investigaci√≥n importado correctamente";
                    break;
            }
            
            if (!string.IsNullOrEmpty(endpoint))
            {
                var response = await Http.PostAsync(endpoint, null);
                
                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("showToast", mensaje);
                    
                    // Para importaci√≥n de tiempo en rol, actualizar userInfo y recalcular todo
                    if (tipo == 1)
                    {
                        userInfo = await AuthService.RefreshUserInfo();
                        CalcularTiempoDetallado();
                    }
                    
                    // Para todos los tipos de indicadores, actualizar los datos completos
                    await LoadIndicadores();
                    await LoadRequisitos();
                    
                    // Resetear el reinicio visual cuando se importan nuevos datos
                    reinicioVisual = false;
                    
                    // Si es tiempo en rol, recalcular tiempo detallado
                    if (tipo == 1)
                    {
                        CalcularTiempoDetallado();
                    }
                    
                    // Forzar actualizaci√≥n de la UI para reflejar cambios en la barra de progreso
                    StateHasChanged();
                }
                else
                {
                    // Manejar respuesta de error
                    var errorContent = await response.Content.ReadAsStringAsync();
                    try 
                    {
                        var errorResponse = System.Text.Json.JsonSerializer.Deserialize<ImportarDatosResponse>(errorContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                        if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Mensaje))
                        {
                            await JSRuntime.InvokeVoidAsync("showToast", errorResponse.Mensaje, "warning");
                        }
                        else
                        {
                            await JSRuntime.InvokeVoidAsync("showToast", "No se pudieron importar los datos solicitados", "error");
                        }
                    }
                    catch
                    {
                        // Si no se puede deserializar la respuesta, mostrar mensaje gen√©rico
                        string tipoImportacion = tipo switch
                        {
                            1 => "tiempo en rol",
                            2 => "obras acad√©micas", 
                            3 => "evaluaciones docentes",
                            4 => "capacitaci√≥n",
                            5 => "investigaci√≥n",
                            _ => "datos"
                        };
                        await JSRuntime.InvokeVoidAsync("showToast", $"No se pudieron importar los datos de {tipoImportacion}", "error");
                    }
                }
            }
        }
        catch (Exception)
        {
            // Silenciar errores de importaci√≥n de indicadores
        }
        finally
        {
            isImporting = false;
        }
    }
    
    private int GetPercentage(int value, int max)
    {
        return max > 0 ? Math.Min(100, (value * 100) / max) : 0;
    }
    
    // ‚úÖ NUEVOS M√âTODOS: Obtener valores din√°micos de configuraci√≥n
    private int GetTiempoRequeritoMeses()
    {
        return configuracionRequisitos?.TiempoMinimoMeses ?? 48; // Fallback a 48 meses
    }
    
    private int GetObrasRequeridas()
    {
        return configuracionRequisitos?.ObrasMinimas ?? 3; // Fallback a 3 obras
    }
    
    private decimal GetEvaluacionRequerida()
    {
        return configuracionRequisitos?.PuntajeEvaluacionMinimo ?? 75; // Fallback a 75%
    }
    
    private int GetCapacitacionRequerida()
    {
        return configuracionRequisitos?.HorasCapacitacionMinimas ?? 120; // Fallback a 120h
    }
    
    private int GetInvestigacionRequerida()
    {
        return configuracionRequisitos?.TiempoInvestigacionMinimo ?? 24; // Fallback a 24 meses
    }
    
    private string GetTiempoRequeritoTexto()
    {
        var meses = GetTiempoRequeritoMeses();
        var a√±os = meses / 12;
        var mesesRestantes = meses % 12;
        
        if (a√±os > 0 && mesesRestantes > 0)
            return $"{a√±os} a√±o{(a√±os > 1 ? "s" : "")} {mesesRestantes} mes{(mesesRestantes > 1 ? "es" : "")} ({meses} meses)";
        else if (a√±os > 0)
            return $"{a√±os} a√±o{(a√±os > 1 ? "s" : "")} ({meses} meses)";
        else
            return $"{meses} mes{(meses > 1 ? "es" : "")}";
    }
    
    private string GetInitials()
    {
        if (userInfo == null)
            return "";
            
        if (string.IsNullOrEmpty(userInfo.Nombres) || string.IsNullOrEmpty(userInfo.Apellidos))
            return "";
            
        return userInfo.Nombres[0].ToString().ToUpper() + userInfo.Apellidos[0].ToString().ToUpper();
    }
    
    private string GetEvaluationColorClass(decimal puntaje)
    {
        if (puntaje >= 90)
            return "bg-success";
        else if (puntaje >= 75) // Cambio: 75% es el requisito m√≠nimo
            return "bg-primary";
        else if (puntaje >= 70)
            return "bg-warning";
        else
            return "bg-danger";
    }
    
    private string GetRequisitosColor()
    {
        int completados = GetRequisitosCompletados();
        
        if (completados == 5)
            return "bg-success";
        else if (completados >= 3)
            return "bg-primary";
        else if (completados >= 1)
            return "bg-warning";
        else
            return "bg-danger";
    }
    
    private int GetRequisitosCompletados()
    {
        if (requisitos == null)
            return 0;
            
        int completados = 0;
        
        if (requisitos.CumpleTiempoRol) completados++;
        if (requisitos.CumpleObras) completados++;
        if (requisitos.CumpleEvaluacion) completados++;
        if (requisitos.CumpleCapacitacion) completados++;
        if (requisitos.CumpleInvestigacion) completados++;
        
        return completados;
    }
    
    private string GetStatusBadgeClass()
    {
        int completados = GetRequisitosCompletados();
        
        if (completados == 5)
            return "status-badge-success";
        else if (completados >= 3)
            return "status-badge-info";
        else if (completados >= 1)
            return "status-badge-warning";
        else
            return "status-badge-danger";
    }
    
    private string GetStatusBadgeText()
    {
        int completados = GetRequisitosCompletados();
        
        if (tieneSolicitudActiva)
            return "Solicitud en proceso - Esperando revisi√≥n";
        else if (completados == 5)
            return "Requisitos completados - Puede solicitar ascenso";
        else if (completados >= 3)
            return "Avance significativo en requisitos";
        else if (completados >= 1)
            return "Progreso inicial en requisitos";
        else
            return "Requisitos no cumplidos";
    }
    
    private async Task HandleLogout()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/login");
    }
    
    // M√©todos para c√°lculo de tiempo detallado
    private void CalcularTiempoDetallado()
    {
        if (indicadores == null || userInfo == null)
            return;
            
        _currentTime = DateTime.Now;
        var fechaInicio = userInfo.FechaIngresoNivelActual;
        var tiempoTranscurrido = _currentTime - fechaInicio;
        var tiempoMinimoRequerido = TimeSpan.FromDays(4 * 365.25); // 4 a√±os
        
        indicadores.FechaInicioRol = fechaInicio;
        indicadores.TiempoTranscurrido = tiempoTranscurrido;
        indicadores.CumpleTiempoMinimo = tiempoTranscurrido >= tiempoMinimoRequerido;
        
        if (indicadores.CumpleTiempoMinimo)
        {
            indicadores.TiempoRestante = TimeSpan.Zero;
            indicadores.TiempoRestanteTexto = "¬°Tiempo cumplido!";
        }
        else
        {
            indicadores.TiempoRestante = tiempoMinimoRequerido - tiempoTranscurrido;
            indicadores.TiempoRestanteTexto = FormatearTiempoRestante(indicadores.TiempoRestante);
        }
        
        indicadores.TiempoTranscurridoTexto = FormatearTiempoTranscurrido(tiempoTranscurrido);
    }
    
    private string FormatearTiempoTranscurrido(TimeSpan tiempo)
    {
        var a√±os = (int)(tiempo.TotalDays / 365.25);
        var meses = (int)((tiempo.TotalDays % 365.25) / 30.44);
        var dias = (int)((tiempo.TotalDays % 365.25) % 30.44);
        var horas = tiempo.Hours;
        var minutos = tiempo.Minutes;
        
        var partes = new List<string>();
        
        if (a√±os > 0)
            partes.Add($"{a√±os} a√±o{(a√±os != 1 ? "s" : "")}");
        if (meses > 0)
            partes.Add($"{meses} mes{(meses != 1 ? "es" : "")}");
        if (dias > 0 && a√±os == 0) // Solo mostrar d√≠as si no hay a√±os
            partes.Add($"{dias} d√≠a{(dias != 1 ? "s" : "")}");
        if (horas > 0 && a√±os == 0 && meses == 0) // Solo mostrar horas si no hay a√±os ni meses
            partes.Add($"{horas} hora{(horas != 1 ? "s" : "")}");
        if (minutos > 0 && a√±os == 0 && meses == 0 && dias == 0) // Solo mostrar minutos si solo hay horas y minutos
            partes.Add($"{minutos} minuto{(minutos != 1 ? "s" : "")}");
            
        return partes.Count > 0 ? string.Join(", ", partes) : "Menos de 1 minuto";
    }
    
    private string FormatearTiempoRestante(TimeSpan tiempo)
    {
        var a√±os = (int)(tiempo.TotalDays / 365.25);
        var meses = (int)((tiempo.TotalDays % 365.25) / 30.44);
        var dias = (int)((tiempo.TotalDays % 365.25) % 30.44);
        var horas = tiempo.Hours;
        var minutos = tiempo.Minutes;
        
        var partes = new List<string>();
        
        if (a√±os > 0)
            partes.Add($"{a√±os} a√±o{(a√±os != 1 ? "s" : "")}");
        if (meses > 0)
            partes.Add($"{meses} mes{(meses != 1 ? "es" : "")}");
        if (dias > 0 && a√±os < 2) // Mostrar d√≠as solo si hay menos de 2 a√±os
            partes.Add($"{dias} d√≠a{(dias != 1 ? "s" : "")}");
        if (horas > 0 && a√±os == 0 && meses < 6) // Mostrar horas solo si hay menos de 6 meses
            partes.Add($"{horas} hora{(horas != 1 ? "s" : "")}");
        if (minutos > 0 && a√±os == 0 && meses == 0 && dias < 7) // Mostrar minutos solo en los √∫ltimos d√≠as
            partes.Add($"{minutos} minuto{(minutos != 1 ? "s" : "")}");
            
        return partes.Count > 0 ? string.Join(", ", partes) : "Menos de 1 minuto";
    }
    
    private int GetTiempoPercentage()
    {
        if (indicadores == null || userInfo == null)
            return 0;
            
        var tiempoTranscurrido = _currentTime - userInfo.FechaIngresoNivelActual;
        var tiempoRequeridoMeses = GetTiempoRequeritoMeses(); // ‚úÖ Usar valor din√°mico
        var tiempoMinimoEnDias = (tiempoRequeridoMeses / 12.0) * 365.25; // Convertir meses a d√≠as
        var porcentaje = (int)Math.Min(100, (tiempoTranscurrido.TotalDays / tiempoMinimoEnDias) * 100);
        
        return porcentaje;
    }
    
    private void IniciarTimer()
    {
        _timer = new Timer(async _ =>
        {
            _currentTime = DateTime.Now;
            CalcularTiempoDetallado();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1)); // Actualizar cada minuto
    }
    
    private void DetenerTimer()
    {
        _timer?.Dispose();
        _timer = null;
    }
    
    // M√©todos para el modal de requisitos
    private async Task AbrirModalRequisitos()
    {
        mostrarModalRequisitos = true;
        await CargarConfiguracionRequisitos();
    }
    
    private void CerrarModalRequisitos()
    {
        mostrarModalRequisitos = false;
        configuracionRequisitos = null;
    }
    
    private async Task CargarConfiguracionRequisitos()
    {
        if (userInfo == null) return;
        
        try
        {
            cargandoRequisitosModal = true;
            StateHasChanged();
            
            // Obtener la configuraci√≥n de requisitos desde el nuevo endpoint
            var response = await Http.GetAsync("api/docente/configuracion-requisitos");
            
            if (response.IsSuccessStatusCode)
            {
                configuracionRequisitos = await response.Content.ReadFromJsonAsync<ConfiguracionRequisitoDto>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                // Si no hay configuraci√≥n espec√≠fica, crear una por defecto basada en los valores actuales
                var nivelSiguiente = userInfo.NivelActual + 1;
                configuracionRequisitos = new ConfiguracionRequisitoDto
                {
                    TiempoMinimoMeses = 48, // 4 a√±os por defecto
                    ObrasMinimas = 3,
                    PuntajeEvaluacionMinimo = 75,
                    HorasCapacitacionMinimas = 120,
                    TiempoInvestigacionMinimo = 24,
                    EstaActivo = true,
                    NivelActual = (NivelTitular)userInfo.NivelActual,
                    NivelSolicitado = (NivelTitular)nivelSiguiente,
                    NivelActualNombre = $"Titular {userInfo.NivelActual}",
                    NivelSolicitadoNombre = $"Titular {nivelSiguiente}",
                    Descripcion = "Configuraci√≥n de requisitos por defecto"
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar configuraci√≥n de requisitos: {ex.Message}");
            ToastService.ShowError("Error al cargar la configuraci√≥n de requisitos");
        }
        finally
        {
            cargandoRequisitosModal = false;
            StateHasChanged();
        }
    }
    
    private async Task GuardarCambiosRequisitos()
    {
        if (configuracionRequisitos == null || userInfo == null) return;
        
        try
        {
            guardandoCambios = true;
            StateHasChanged();
            
            // Preparar el DTO para actualizaci√≥n
            var updateDto = new CrearActualizarConfiguracionRequisitoDto
            {
                NivelActual = configuracionRequisitos.NivelActual,
                NivelSolicitado = configuracionRequisitos.NivelSolicitado,
                TituloActualId = configuracionRequisitos.TituloActualId,
                TituloSolicitadoId = configuracionRequisitos.TituloSolicitadoId,
                TiempoMinimoMeses = configuracionRequisitos.TiempoMinimoMeses,
                ObrasMinimas = configuracionRequisitos.ObrasMinimas,
                PuntajeEvaluacionMinimo = configuracionRequisitos.PuntajeEvaluacionMinimo,
                HorasCapacitacionMinimas = configuracionRequisitos.HorasCapacitacionMinimas,
                TiempoInvestigacionMinimo = configuracionRequisitos.TiempoInvestigacionMinimo,
                EstaActivo = configuracionRequisitos.EstaActivo,
                Descripcion = configuracionRequisitos.Descripcion
            };
            
            HttpResponseMessage response;
            
            if (configuracionRequisitos.Id == Guid.Empty)
            {
                // Crear nueva configuraci√≥n
                response = await Http.PostAsJsonAsync("api/docente/configuracion-requisitos", updateDto);
            }
            else
            {
                // Actualizar configuraci√≥n existente
                response = await Http.PutAsJsonAsync("api/docente/configuracion-requisitos", updateDto);
            }
            
            if (response.IsSuccessStatusCode)
            {
                // Actualizar la configuraci√≥n con la respuesta del servidor
                var nuevaConfiguracion = await response.Content.ReadFromJsonAsync<ConfiguracionRequisitoDto>();
                if (nuevaConfiguracion != null)
                {
                    configuracionRequisitos = nuevaConfiguracion;
                }
                
                // Recargar los requisitos del usuario para reflejar los cambios
                await LoadRequisitos();
                
                // Forzar actualizaci√≥n de la UI principal
                StateHasChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Error al guardar los cambios: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar cambios de requisitos: {ex.Message}");
            ToastService.ShowError("Error al guardar los cambios en los requisitos");
        }
        finally
        {
            guardandoCambios = false;
            StateHasChanged();
        }
    }
    
    public void Dispose()
    {
        DetenerTimer();
    }
    
    /// <summary>
    /// M√©todo p√∫blico para reiniciar visualmente las cards a 0 mediante el atajo Alt+0
    /// Establece todas las cards en cero visualmente
    /// </summary>
    [JSInvokable]
    public void ReiniciarCardsVisualmente()
    {
        Console.WriteLine("ReiniciarCardsVisualmente ejecutado - estableciendo reinicioVisual = true");
        reinicioVisual = true;
        StateHasChanged();
    }
}
