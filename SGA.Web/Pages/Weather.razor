@page "/weather"
@using SGA.Web.Services
@inject IApiService ApiService
@inject HttpClient Http

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else if (isError)
{
    <div class="alert alert-warning">
        <p>No se pudieron cargar los datos desde la API. Se están mostrando datos de muestra.</p>
        <button class="btn btn-primary" @onclick="RetryLoadData">Reintentar</button>
    </div>
    
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Intenta obtener los datos desde la API
            forecasts = await ApiService.GetAsync<WeatherForecast[]>("weatherforecast");
            isError = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al obtener datos de la API: {ex.Message}");
            
            try
            {
                // Si falla, usa los datos de muestra como respaldo
                forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
                isError = true;
            }
            catch (Exception innerEx)
            {
                Console.Error.WriteLine($"Error al obtener datos de respaldo: {innerEx.Message}");
            }
        }
    }

    private async Task RetryLoadData()
    {
        forecasts = null;
        await LoadData();
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
