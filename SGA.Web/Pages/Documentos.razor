@page "/documentos"
@attribute [Authorize]
@using SGA.Web.Models
@using SGA.Web.Pages.Components
@inject DocumentosService DocumentosService
@inject DocumentVisualizationService DocumentVisualizationService
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h3>Gestión de Documentos</h3>
    
    <!-- Componente de Obras Académicas -->
    <ObrasAcademicasComponent 
        solicitudesPendientes="todasSolicitudesObras"
        isLoadingObras="isLoadingObras"
        OnShowObrasModal="ShowObrasModal"
        OnVisualizarDocumento="VisualizarDocumento"
        OnDescargarDocumento="DescargarDocumento"
        OnEditarMetadatos="MostrarEditarMetadatos"
        OnReemplazarArchivo="MostrarReemplazarArchivo"
        OnMostrarMotivoRechazo="MostrarMotivoRechazo"
        OnAgregarComentario="MostrarAgregarComentario"
        OnReenviarSolicitud="ReenviarSolicitud"
        OnEliminarSolicitud="EliminarSolicitud" />

    <!-- Componente de Certificados de Capacitación -->
    <CertificadosCapacitacionComponent 
        solicitudesCertificados="todasSolicitudesCertificados"
        isLoadingCertificados="isLoadingCertificados"
        OnShowCertificadosModal="ShowCertificadosModal"
        OnVisualizarCertificado="VisualizarCertificado"
        OnDescargarCertificado="DescargarCertificado"
        OnEditarCertificado="EditarCertificado"
        OnReemplazarArchivoCertificado="ReemplazarArchivoCertificado"
        OnVerMotivoRechazoCertificado="VerMotivoRechazoCertificado"
        OnEliminarCertificado="EliminarCertificado" />

    <!-- Componente de Evidencias de Investigación -->
    <EvidenciasInvestigacionComponent 
        ShowComponent="true"
        OnEvidenciasChanged="@(async () => await InvokeAsync(StateHasChanged))" />
</div>

<!-- Modales -->
<ObrasAcademicasModal 
    IsVisible="showObrasModal"
    IsEnviando="isEnviandoObras"
    OnClose="CloseObrasModal"
    OnEnviarSolicitud="EnviarSolicitudObras"
    @ref="obrasModal" />

<CertificadosCapacitacionModal 
    IsVisible="showCertificadosModal"
    IsEnviando="isEnviandoObras"
    OnClose="CerrarCertificadosModal"
    OnEnviarSolicitud="GuardarCertificados"
    @ref="certificadosModal" />

<!-- Modales adicionales -->

<!-- Modal para Ver Motivo de Rechazo -->
@if (showMotivoRechazoModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Motivo de Rechazo</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showMotivoRechazoModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <strong>Motivo del rechazo:</strong>
                        <p class="mt-2">@solicitudSeleccionada.MotivoRechazo</p>
                    </div>
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.ComentariosRevision))
                    {
                        <div class="alert alert-info">
                            <strong>Comentarios adicionales:</strong>
                            <p class="mt-2">@solicitudSeleccionada.ComentariosRevision</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showMotivoRechazoModal = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Editar Metadatos -->
@if (showEditarMetadatosModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Editar Metadatos</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showEditarMetadatosModal = false"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="metadatosEdicion">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Título *</label>
                                    <InputText class="form-control" @bind-Value="metadatosEdicion.Titulo" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Tipo de Obra *</label>
                                    <InputSelect class="form-select" @bind-Value="metadatosEdicion.TipoObra">
                                        <option value="">Seleccione...</option>
                                        <option value="Libro">Libro</option>
                                        <option value="Artículo">Artículo</option>
                                        <option value="Capítulo">Capítulo</option>
                                        <option value="Ponencia">Ponencia</option>
                                        <option value="Otro">Otro</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Fecha de Publicación</label>
                                    <InputDate class="form-control" @bind-Value="metadatosEdicion.FechaPublicacion" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Editorial</label>
                                    <InputText class="form-control" @bind-Value="metadatosEdicion.Editorial" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Revista</label>
                                    <InputText class="form-control" @bind-Value="metadatosEdicion.Revista" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">ISBN/ISSN</label>
                                    <InputText class="form-control" @bind-Value="metadatosEdicion.ISBN_ISSN" />
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Autores</label>
                            <InputText class="form-control" @bind-Value="metadatosEdicion.Autores" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="metadatosEdicion.Descripcion" />
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showEditarMetadatosModal = false">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarMetadatos" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Reemplazar Archivo -->
@if (showReemplazarArchivoModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Reemplazar Archivo</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showReemplazarArchivoModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Seleccionar nuevo archivo (PDF, máximo 10MB)</label>
                        <InputFile class="form-control" @ref="inputFileReemplazo" OnChange="OnFileChangeReemplazo" accept=".pdf" />
                    </div>
                    @if (!string.IsNullOrEmpty(archivoReemplazoNombre))
                    {
                        <div class="alert alert-info">
                            <strong>Archivo seleccionado:</strong> @archivoReemplazoNombre
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showReemplazarArchivoModal = false">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="ReemplazarArchivo" 
                            disabled="@(isProcessing || string.IsNullOrEmpty(archivoReemplazoContenido))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Reemplazar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Agregar Comentario -->
@if (showAgregarComentarioModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Agregar Comentario</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showAgregarComentarioModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Comentario</label>
                        <textarea class="form-control" rows="4" @bind="nuevoComentario" 
                                placeholder="Escriba su comentario aquí..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showAgregarComentarioModal = false">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarComentario" 
                            disabled="@(isProcessing || string.IsNullOrWhiteSpace(nuevoComentario))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Visualizar PDF -->
@if (showVisualizarPDFModal && !string.IsNullOrEmpty(pdfUrl))
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">@pdfNombreArchivo</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarVisualizarPDF"></button>
                </div>
                <div class="modal-body p-0">
                    @if (isLoadingPDF)
                    {
                        <div class="text-center p-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Cargando documento...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorPDF))
                    {
                        <div class="alert alert-danger m-3">
                            @errorPDF
                        </div>
                    }
                    else
                    {
                        <iframe src="@pdfUrl" style="width: 100%; height: 600px; border: none;"></iframe>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarVisualizarPDF">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Visualizar Certificado -->
@if (showVisualizarCertificadoModal && !string.IsNullOrEmpty(pdfUrl))
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">@pdfNombreArchivo</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarVisualizarCertificadoModal"></button>
                </div>
                <div class="modal-body p-0">
                    @if (isLoadingPDF)
                    {
                        <div class="text-center p-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Cargando certificado...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorPDF))
                    {
                        <div class="alert alert-danger m-3">
                            @errorPDF
                        </div>
                    }
                    else
                    {
                        <iframe src="@pdfUrl" style="width: 100%; height: 600px; border: none;"></iframe>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarVisualizarCertificadoModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Motivo de Rechazo de Certificado -->
@if (showMotivoRechazoCertificadoModal && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Motivo de Rechazo - Certificado</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showMotivoRechazoCertificadoModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <strong>Motivo del rechazo:</strong>
                        <p class="mt-2">@certificadoSeleccionado.MotivoRechazo</p>
                    </div>
                    @if (!string.IsNullOrEmpty(certificadoSeleccionado.ComentariosRevision))
                    {
                        <div class="alert alert-info">
                            <strong>Comentarios adicionales:</strong>
                            <p class="mt-2">@certificadoSeleccionado.ComentariosRevision</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showMotivoRechazoCertificadoModal = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Editar Certificado -->
@if (showEditarCertificadoModal && editarCertificadoDto != null && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Editar Certificado</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarEditarCertificadoModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editarCertificadoDto">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Nombre del Curso *</label>
                                    <InputText class="form-control" @bind-Value="editarCertificadoDto.NombreCurso" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Institución Oferente *</label>
                                    <InputText class="form-control" @bind-Value="editarCertificadoDto.InstitucionOfertante" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Tipo de Capacitación</label>
                                    <InputSelect class="form-select" @bind-Value="editarCertificadoDto.TipoCapacitacion">
                                        <option value="">Seleccione...</option>
                                        <option value="Curso">Curso</option>
                                        <option value="Diplomado">Diplomado</option>
                                        <option value="Seminario">Seminario</option>
                                        <option value="Taller">Taller</option>
                                        <option value="Conferencia">Conferencia</option>
                                        <option value="Otro">Otro</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Modalidad</label>
                                    <InputSelect class="form-select" @bind-Value="editarCertificadoDto.Modalidad">
                                        <option value="">Seleccione...</option>
                                        <option value="Presencial">Presencial</option>
                                        <option value="Virtual">Virtual</option>
                                        <option value="Híbrida">Híbrida</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Fecha Inicio</label>
                                    <InputDate class="form-control" @bind-Value="editarCertificadoDto.FechaInicio" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Fecha Fin</label>
                                    <InputDate class="form-control" @bind-Value="editarCertificadoDto.FechaFin" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Horas de Duración</label>
                                    <InputNumber class="form-control" @bind-Value="editarCertificadoDto.HorasDuracion" />
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="editarCertificadoDto.Descripcion" />
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarEditarCertificadoModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarEdicionCertificado" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Reemplazar Archivo de Certificado -->
@if (showReemplazarArchivoCertificadoModal && reemplazarArchivoCertificadoDto != null && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Reemplazar Archivo - Certificado</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarReemplazarArchivoCertificadoModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Seleccionar nuevo archivo (PDF, máximo 10MB)</label>
                        <InputFile class="form-control" OnChange="OnFileSelectedReemplazoCertificado" accept=".pdf" />
                    </div>
                    @if (!string.IsNullOrEmpty(reemplazarArchivoCertificadoDto.ArchivoNombre))
                    {
                        <div class="alert alert-info">
                            <strong>Archivo seleccionado:</strong> @reemplazarArchivoCertificadoDto.ArchivoNombre
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarReemplazarArchivoCertificadoModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarReemplazoArchivoCertificado" 
                            disabled="@(isProcessing || string.IsNullOrEmpty(reemplazarArchivoCertificadoDto.ArchivoContenido))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Reemplazar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // Referencias a los componentes modales
    private ObrasAcademicasModal? obrasModal;
    private CertificadosCapacitacionModal? certificadosModal;

    // Variables para obras académicas (solo solicitudes)
    private List<ObraAcademicaDetalleDto>? todasSolicitudesObras;
    private bool isLoadingObras = true;
    private bool showObrasModal = false;
    private bool isEnviandoObras = false;
    
    // Variables para certificados de capacitación
    private List<CertificadoCapacitacionDetalleDto> todasSolicitudesCertificados = new();
    private bool isLoadingCertificados = false;
    private bool showCertificadosModal = false;
    
    private CertificadoCapacitacionDetalleDto? certificadoSeleccionado = null;
    private List<CrearCertificadoCapacitacionDto> nuevosCertificados = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAllData();
    }

    private async Task LoadAllData()
    {
        await Task.WhenAll(
            LoadTodasSolicitudesObras(),
            LoadTodasSolicitudesCertificados()
        );
    }

    // Métodos para Obras Académicas (solo solicitudes)
    private async Task LoadTodasSolicitudesObras()
    {
        try
        {
            isLoadingObras = true;
            todasSolicitudesObras = await DocumentosService.LoadTodasSolicitudesObrasAsync();
        }
        finally
        {
            isLoadingObras = false;
        }
    }

    private void ShowObrasModal()
    {
        showObrasModal = true;
        StateHasChanged();
    }

    private void CloseObrasModal()
    {
        showObrasModal = false;
        StateHasChanged();
    }

    private async Task EnviarSolicitudObras()
    {
        if (obrasModal == null) return;

        var nuevasObras = obrasModal.GetNuevasObras();
        var comentarios = obrasModal.GetComentarios();

        if (!nuevasObras.Any() || !nuevasObras.All(o => 
            !string.IsNullOrWhiteSpace(o.Titulo) && 
            !string.IsNullOrWhiteSpace(o.TipoObra) && 
            o.FechaPublicacion != default))
        {
            ToastService.ShowWarning("Por favor complete todos los campos obligatorios.");
            return;
        }

        try
        {
            isEnviandoObras = true;
            StateHasChanged();

            var solicitud = new SolicitudObrasAcademicasDto
            {
                Obras = nuevasObras,
                Comentarios = comentarios
            };

            var success = await DocumentosService.EnviarSolicitudObrasAsync(solicitud);
            
            if (success)
            {
                CloseObrasModal();
                await LoadTodasSolicitudesObras();
            }
        }
        finally
        {
            isEnviandoObras = false;
            StateHasChanged();
        }
    }

    // Métodos para Certificados
    private async Task LoadTodasSolicitudesCertificados()
    {
        try
        {
            isLoadingCertificados = true;
            todasSolicitudesCertificados = await DocumentosService.LoadTodasSolicitudesCertificadosAsync() ?? new List<CertificadoCapacitacionDetalleDto>();
        }
        finally
        {
            isLoadingCertificados = false;
        }
    }

    // Variables adicionales para modales y gestión
    private ObraAcademicaDetalleDto? solicitudSeleccionada;
    private bool showMotivoRechazoModal = false;
    private bool showEditarMetadatosModal = false;
    private bool showReemplazarArchivoModal = false;
    private bool showAgregarComentarioModal = false;
    private bool showVisualizarPDFModal = false;
    private bool isProcessing = false;
    
    // Variables para editar metadatos
    private EditarMetadatosSolicitudDto metadatosEdicion = new();
    
    // Variables para reemplazar archivo
    private InputFile? inputFileReemplazo;
    private string archivoReemplazoNombre = string.Empty;
    private string archivoReemplazoContenido = string.Empty;
    
    // Variables para comentarios
    private string nuevoComentario = string.Empty;
    
    // Variables para visualizar PDF
    private string? pdfUrl;
    private string? pdfNombreArchivo;
    private bool isLoadingPDF = false;
    private string? errorPDF;

    // Variables adicionales para certificados
    private bool showEditarCertificadoModal = false;
    private bool showReemplazarArchivoCertificadoModal = false;
    private bool showVisualizarCertificadoModal = false;
    private bool showMotivoRechazoCertificadoModal = false;
    private Guid certificadoSeleccionadoParaPDF = Guid.Empty;
    private EditarMetadatosCertificadoDto? editarCertificadoDto = null;
    private ReemplazarArchivoCertificadoDto? reemplazarArchivoCertificadoDto = null;

    private void ShowCertificadosModal()
    {
        nuevosCertificados = new List<CrearCertificadoCapacitacionDto>
        {
            new CrearCertificadoCapacitacionDto()
        };
        showCertificadosModal = true;
    }

    private void CerrarCertificadosModal()
    {
        showCertificadosModal = false;
        nuevosCertificados.Clear();
        if (certificadosModal != null)
        {
            certificadosModal.LimpiarFormulario();
        }
    }

    private async Task GuardarCertificados()
    {
        if (certificadosModal == null) return;

        var certificados = certificadosModal.GetNuevosCertificados();
        
        if (!certificados.Any() || !certificados.All(c => 
            !string.IsNullOrWhiteSpace(c.NombreCurso) && 
            !string.IsNullOrWhiteSpace(c.InstitucionOfertante) &&
            !string.IsNullOrWhiteSpace(c.TipoCapacitacion) &&
            !string.IsNullOrWhiteSpace(c.Modalidad) &&
            c.HorasDuracion > 0 &&
            c.FechaInicio != default &&
            c.FechaFin != default &&
            !string.IsNullOrEmpty(c.ArchivoContenido)))
        {
            ToastService.ShowWarning("Por favor complete todos los campos obligatorios.");
            return;
        }

        try
        {
            isEnviandoObras = true; // Reutilizar flag de loading
            
            var solicitud = new SolicitarCertificadosCapacitacionDto
            {
                Certificados = certificados
            };

            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PostAsJsonAsync("api/certificados-capacitacion/solicitar", solicitud);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Certificados enviados correctamente");
                CerrarCertificadosModal();
                await LoadTodasSolicitudesCertificados();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Error al enviar certificados: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isEnviandoObras = false;
        }
    }

    // Event handlers para los componentes
    private async Task VisualizarDocumento(Guid solicitudId)
    {
        try
        {
            isLoadingPDF = true;
            errorPDF = null;
            
            var result = await DocumentVisualizationService.VisualizarObraAcademica(solicitudId);
            
            if (result.Success)
            {
                pdfUrl = result.PdfUrl;
                pdfNombreArchivo = result.FileName;
                showVisualizarPDFModal = true;
            }
            else
            {
                errorPDF = result.ErrorMessage;
            }
        }
        finally
        {
            isLoadingPDF = false;
        }
    }

    private async Task DescargarDocumento(Guid solicitudId)
    {
        await DocumentVisualizationService.DescargarObraAcademica(solicitudId);
    }

    private void MostrarEditarMetadatos(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        metadatosEdicion = new EditarMetadatosSolicitudDto
        {
            Titulo = solicitud.Titulo,
            Descripcion = solicitud.Descripcion,
            TipoObra = solicitud.TipoObra,
            FechaPublicacion = solicitud.FechaPublicacion,
            Editorial = solicitud.Editorial,
            Revista = solicitud.Revista,
            ISBN_ISSN = solicitud.ISBN_ISSN,
            DOI = solicitud.DOI,
            EsIndexada = solicitud.EsIndexada,
            IndiceIndexacion = solicitud.IndiceIndexacion,
            Autores = solicitud.Autores
        };
        showEditarMetadatosModal = true;
    }

    private void MostrarReemplazarArchivo(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        archivoReemplazoNombre = string.Empty;
        archivoReemplazoContenido = string.Empty;
        showReemplazarArchivoModal = true;
    }

    private void MostrarMotivoRechazo(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        showMotivoRechazoModal = true;
    }

    private void MostrarAgregarComentario(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        nuevoComentario = string.Empty;
        showAgregarComentarioModal = true;
    }

    private async Task ReenviarSolicitud(Guid solicitudId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea reenviar esta solicitud para revisión?"))
            return;
        
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsync($"api/obraacademicas/reenviar/{solicitudId}", null);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Solicitud reenviada correctamente");
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al reenviar la solicitud");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
    }

    private async Task EliminarSolicitud(Guid solicitudId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar esta solicitud? Esta acción no se puede deshacer."))
            return;
        
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.DeleteAsync($"api/obraacademicas/eliminar/{solicitudId}");
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Solicitud eliminada correctamente");
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al eliminar la solicitud");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
    }

    // Event handlers para certificados
    private async Task VisualizarCertificado(Guid certificadoId)
    {
        try
        {
            isLoadingPDF = true;
            errorPDF = null;
            certificadoSeleccionadoParaPDF = certificadoId;
            
            var result = await DocumentVisualizationService.VisualizarCertificado(certificadoId);
            
            if (result.Success)
            {
                pdfUrl = result.PdfUrl;
                pdfNombreArchivo = result.FileName;
                showVisualizarCertificadoModal = true;
            }
            else
            {
                errorPDF = result.ErrorMessage;
            }
        }
        finally
        {
            isLoadingPDF = false;
        }
    }

    private async Task DescargarCertificado(Guid certificadoId)
    {
        await DocumentVisualizationService.DescargarCertificado(certificadoId);
    }

    private void EditarCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        editarCertificadoDto = new EditarMetadatosCertificadoDto
        {
            NombreCurso = certificado.NombreCurso,
            InstitucionOfertante = certificado.InstitucionOfertante,
            TipoCapacitacion = certificado.TipoCapacitacion,
            FechaInicio = certificado.FechaInicio,
            FechaFin = certificado.FechaFin,
            HorasDuracion = certificado.HorasDuracion,
            Modalidad = certificado.Modalidad,
            NumeroRegistro = certificado.NumeroRegistro,
            AreaTematica = certificado.AreaTematica,
            Descripcion = certificado.Descripcion
        };
        showEditarCertificadoModal = true;
    }

    private void ReemplazarArchivoCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        reemplazarArchivoCertificadoDto = new ReemplazarArchivoCertificadoDto();
        showReemplazarArchivoCertificadoModal = true;
    }

    private void VerMotivoRechazoCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        showMotivoRechazoCertificadoModal = true;
    }

    private async Task EliminarCertificado(Guid certificadoId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de que desea eliminar este certificado?"))
        {
            try
            {
                var token = await LocalStorage.GetItemAsync<string>("authToken");
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                
                var response = await Http.DeleteAsync($"api/certificados-capacitacion/eliminar/{certificadoId}");
                
                if (response.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Certificado eliminado correctamente");
                    await LoadTodasSolicitudesCertificados();
                }
                else
                {
                    ToastService.ShowError("Error al eliminar el certificado");
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error: {ex.Message}");
            }
        }
    }

    // Métodos auxiliares para modales y operaciones
    private void CerrarVisualizarPDF()
    {
        showVisualizarPDFModal = false;
        pdfUrl = null;
        pdfNombreArchivo = null;
        errorPDF = null;
    }
    
    private async Task GuardarMetadatos()
    {
        if (solicitudSeleccionada?.SolicitudId == null) return;
        
        try
        {
            isProcessing = true;
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/obraacademicas/editar-metadatos/{solicitudSeleccionada.SolicitudId}", metadatosEdicion);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Metadatos actualizados correctamente");
                showEditarMetadatosModal = false;
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al actualizar los metadatos");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private async Task OnFileChangeReemplazo(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.Size <= 10 * 1024 * 1024) // 10MB max
        {
            try
            {
                archivoReemplazoNombre = file.Name;
                using var stream = file.OpenReadStream(10 * 1024 * 1024);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                archivoReemplazoContenido = Convert.ToBase64String(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error al leer el archivo: {ex.Message}");
                archivoReemplazoNombre = string.Empty;
                archivoReemplazoContenido = string.Empty;
            }
        }
        else
        {
            ToastService.ShowError("El archivo debe ser menor a 10MB");
        }
    }
    
    private async Task ReemplazarArchivo()
    {
        if (solicitudSeleccionada?.SolicitudId == null || string.IsNullOrEmpty(archivoReemplazoContenido)) return;
        
        try
        {
            isProcessing = true;
            
            var reemplazarDto = new ReemplazarArchivoDto
            {
                ArchivoNombre = archivoReemplazoNombre,
                ArchivoContenido = archivoReemplazoContenido,
                ArchivoTipo = "application/pdf"
            };
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/obraacademicas/reemplazar-archivo/{solicitudSeleccionada.SolicitudId}", reemplazarDto);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Archivo reemplazado correctamente");
                showReemplazarArchivoModal = false;
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al reemplazar el archivo");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private async Task GuardarComentario()
    {
        if (solicitudSeleccionada?.SolicitudId == null || string.IsNullOrWhiteSpace(nuevoComentario)) return;
        
        try
        {
            isProcessing = true;
            
            var comentarioDto = new { Comentario = nuevoComentario };
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PostAsJsonAsync($"api/obraacademicas/agregar-comentario/{solicitudSeleccionada.SolicitudId}", comentarioDto);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Comentario agregado correctamente");
                showAgregarComentarioModal = false;
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al agregar el comentario");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Métodos para certificados
    private void CerrarVisualizarCertificadoModal()
    {
        showVisualizarCertificadoModal = false;
        pdfUrl = null;
        pdfNombreArchivo = null;
        errorPDF = null;
        isLoadingPDF = false;
        certificadoSeleccionadoParaPDF = Guid.Empty;
    }

    private void CerrarEditarCertificadoModal()
    {
        showEditarCertificadoModal = false;
        editarCertificadoDto = null;
        certificadoSeleccionado = null;
    }

    private async Task GuardarEdicionCertificado()
    {
        if (editarCertificadoDto == null || certificadoSeleccionado == null) return;

        try
        {
            isProcessing = true;
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/certificados-capacitacion/editar-metadatos/{certificadoSeleccionado.Id}", editarCertificadoDto);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Certificado actualizado correctamente");
                CerrarEditarCertificadoModal();
                await LoadTodasSolicitudesCertificados();
            }
            else
            {
                ToastService.ShowError("Error al actualizar el certificado");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void CerrarReemplazarArchivoCertificadoModal()
    {
        showReemplazarArchivoCertificadoModal = false;
        reemplazarArchivoCertificadoDto = null;
        certificadoSeleccionado = null;
    }

    private async Task OnFileSelectedReemplazoCertificado(InputFileChangeEventArgs e)
    {
        if (reemplazarArchivoCertificadoDto == null) return;

        var file = e.File;
        if (file != null)
        {
            if (file.Size <= 10 * 1024 * 1024) // 10MB max
            {
                try
                {
                    reemplazarArchivoCertificadoDto.ArchivoNombre = file.Name;
                    using var stream = file.OpenReadStream(10 * 1024 * 1024);
                    using var memoryStream = new MemoryStream();
                    await stream.CopyToAsync(memoryStream);
                    reemplazarArchivoCertificadoDto.ArchivoContenido = Convert.ToBase64String(memoryStream.ToArray());
                }
                catch (Exception ex)
                {
                    ToastService.ShowError($"Error al leer el archivo: {ex.Message}");
                    reemplazarArchivoCertificadoDto.ArchivoNombre = string.Empty;
                    reemplazarArchivoCertificadoDto.ArchivoContenido = string.Empty;
                }
            }
            else
            {
                ToastService.ShowError("El archivo debe ser menor a 10MB");
            }
        }
    }

    private async Task GuardarReemplazoArchivoCertificado()
    {
        if (reemplazarArchivoCertificadoDto == null || certificadoSeleccionado == null) return;

        try
        {
            isProcessing = true;
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/certificados-capacitacion/reemplazar-archivo/{certificadoSeleccionado.Id}", reemplazarArchivoCertificadoDto);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Archivo del certificado reemplazado correctamente");
                CerrarReemplazarArchivoCertificadoModal();
                await LoadTodasSolicitudesCertificados();
            }
            else
            {
                ToastService.ShowError("Error al reemplazar el archivo del certificado");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}
