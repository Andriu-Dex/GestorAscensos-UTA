@page "/documentos"
@page "/documentos/{archivoId:guid?}"
@attribute [Authorize]
@using SGA.Web.Models
@using SGA.Web.Pages.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using System.Web
@inject DocumentosService DocumentosService
@inject DocumentVisualizationService DocumentVisualizationService
@inject ArchivosImportadosService ArchivosImportadosService
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    @if (!string.IsNullOrEmpty(archivoIdParam))
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i>
            <strong>Archivo precargado desde Archivos Importados</strong>
            <p class="mb-0">Complete los datos del formulario para enviar el documento para validación.</p>
        </div>
    }
    
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Gestión de Documentos</h3>
        <div>
            <button class="btn btn-success me-2" @onclick="MostrarModalImportacion">
                <i class="bi bi-download"></i> Importar Documentos Existentes
            </button>
        </div>
    </div>
    
    <!-- Componente Acordeón de Documentos -->
    <SGA.Web.Pages.Components.DocumentosAccordion 
        SolicitudesObras="todasSolicitudesObras"
        IsLoadingObras="isLoadingObras"
        SolicitudesCertificados="todasSolicitudesCertificados"
        IsLoadingCertificados="isLoadingCertificados"
        SolicitudesEvidencias="todasSolicitudesEvidencias"
        IsLoadingEvidencias="isLoadingEvidencias"
        OnShowObrasModal="ShowObrasModal"
        OnVisualizarDocumento="VisualizarDocumento"
        OnDescargarDocumento="DescargarDocumento"
        OnEditarMetadatos="MostrarEditarMetadatos"
        OnReemplazarArchivo="MostrarReemplazarArchivo"
        OnMostrarMotivoRechazo="MostrarMotivoRechazo"
        OnAgregarComentario="MostrarAgregarComentario"
        OnReenviarSolicitud="MostrarConfirmarReenvio"
        OnEliminarSolicitud="MostrarConfirmarEliminarSolicitud"
        OnShowCertificadosModal="ShowCertificadosModal"
        OnVisualizarCertificado="VisualizarCertificado"
        OnDescargarCertificado="DescargarCertificado"
        OnEditarCertificado="EditarCertificado"
        OnReemplazarArchivoCertificado="ReemplazarArchivoCertificado"
        OnVerMotivoRechazoCertificado="VerMotivoRechazoCertificado"
        OnEliminarCertificado="MostrarConfirmarEliminarCertificado"
        OnReenviarCertificado="MostrarConfirmarReenvioCertificado"
        OnEvidenciasChanged="@(async () => await InvokeAsync(StateHasChanged))"
        OnEliminarEvidencia="MostrarConfirmarEliminarEvidencia"
        OnReenviarEvidencia="MostrarConfirmarReenvioEvidencia"
        OnActualizarObras="ActualizarObras"
        OnActualizarCertificados="ActualizarCertificados"
        OnActualizarEvidencias="ActualizarEvidencias" />
</div>

<!-- Modales principales -->
<ObrasAcademicasModal 
    IsVisible="showObrasModal"
    IsEnviando="isEnviandoObras"
    OnClose="CloseObrasModal"
    OnEnviarSolicitud="EnviarSolicitudObras"
    @ref="obrasModal" />

<CertificadosCapacitacionModal 
    IsVisible="showCertificadosModal"
    IsEnviando="isEnviandoObras"
    OnClose="CerrarCertificadosModal"
    OnEnviarSolicitud="GuardarCertificados"
    @ref="certificadosModal" />

<!-- Modal para Ver Motivo de Rechazo -->
@if (showMotivoRechazoModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Motivo de Rechazo</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showMotivoRechazoModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <strong>Motivo del rechazo:</strong>
                        <p class="mt-2">@solicitudSeleccionada.MotivoRechazo</p>
                    </div>
                    @if (!string.IsNullOrEmpty(solicitudSeleccionada.ComentariosRevision))
                    {
                        <div class="alert alert-info">
                            <strong>Comentarios adicionales:</strong>
                            <p class="mt-2">@solicitudSeleccionada.ComentariosRevision</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showMotivoRechazoModal = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Editar Metadatos -->
@if (showEditarMetadatosModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Editar Metadatos</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showEditarMetadatosModal = false"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="metadatosEdicion">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Título *</label>
                                    <InputText class="form-control" @bind-Value="metadatosEdicion.Titulo" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Tipo de Obra *</label>
                                    <InputSelect class="form-select" @bind-Value="metadatosEdicion.TipoObra">
                                        <option value="">Seleccione...</option>
                                        <option value="Libro">Libro</option>
                                        <option value="Artículo">Artículo</option>
                                        <option value="Capítulo">Capítulo</option>
                                        <option value="Ponencia">Ponencia</option>
                                        <option value="Otro">Otro</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Fecha de Publicación</label>
                                    <InputDate class="form-control" @bind-Value="metadatosEdicion.FechaPublicacion" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Editorial</label>
                                    <InputText class="form-control" @bind-Value="metadatosEdicion.Editorial" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Revista</label>
                                    <InputText class="form-control" @bind-Value="metadatosEdicion.Revista" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">ISBN/ISSN</label>
                                    <InputText class="form-control" @bind-Value="metadatosEdicion.ISBN_ISSN" />
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Autores</label>
                            <InputText class="form-control" @bind-Value="metadatosEdicion.Autores" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="metadatosEdicion.Descripcion" />
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showEditarMetadatosModal = false">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarMetadatos" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Reemplazar Archivo -->
@if (showReemplazarArchivoModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Reemplazar Archivo</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showReemplazarArchivoModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Seleccionar nuevo archivo (PDF, máximo 10MB)</label>
                        <InputFile class="form-control" @ref="inputFileReemplazo" OnChange="OnFileChangeReemplazo" accept=".pdf" />
                    </div>
                    @if (!string.IsNullOrEmpty(archivoReemplazoNombre))
                    {
                        <div class="alert alert-info">
                            <strong>Archivo seleccionado:</strong> @archivoReemplazoNombre
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showReemplazarArchivoModal = false">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="ReemplazarArchivo" 
                            disabled="@(isProcessing || string.IsNullOrEmpty(archivoReemplazoContenido))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Reemplazar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Agregar Comentario -->
@if (showAgregarComentarioModal && solicitudSeleccionada != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Agregar Comentario</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showAgregarComentarioModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Comentario</label>
                        <textarea class="form-control" rows="4" @bind="nuevoComentario" 
                                placeholder="Escriba su comentario aquí..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showAgregarComentarioModal = false">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarComentario" 
                            disabled="@(isProcessing || string.IsNullOrWhiteSpace(nuevoComentario))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Visualizar PDF -->
@if (showVisualizarPDFModal && !string.IsNullOrEmpty(pdfUrl))
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">@pdfNombreArchivo</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarVisualizarPDF"></button>
                </div>
                <div class="modal-body p-0">
                    @if (isLoadingPDF)
                    {
                        <div class="text-center p-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Cargando documento...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorPDF))
                    {
                        <div class="alert alert-danger m-3">
                            @errorPDF
                        </div>
                    }
                    else
                    {
                        <iframe src="@pdfUrl" style="width: 100%; height: 460px; border: none;"></iframe>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarVisualizarPDF">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Editar Certificado -->
@if (showEditarCertificadoModal && editarCertificadoDto != null && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Editar Certificado</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarEditarCertificadoModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editarCertificadoDto">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Nombre del Curso *</label>
                                    <InputText class="form-control" @bind-Value="editarCertificadoDto.NombreCurso" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Institución Oferente *</label>
                                    <InputText class="form-control" @bind-Value="editarCertificadoDto.InstitucionOfertante" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Tipo de Capacitación</label>
                                    <InputSelect class="form-select" @bind-Value="editarCertificadoDto.TipoCapacitacion">
                                        <option value="">Seleccione...</option>
                                        <option value="Curso">Curso</option>
                                        <option value="Diplomado">Diplomado</option>
                                        <option value="Seminario">Seminario</option>
                                        <option value="Taller">Taller</option>
                                        <option value="Conferencia">Conferencia</option>
                                        <option value="Otro">Otro</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Modalidad</label>
                                    <InputSelect class="form-select" @bind-Value="editarCertificadoDto.Modalidad">
                                        <option value="">Seleccione...</option>
                                        <option value="Presencial">Presencial</option>
                                        <option value="Virtual">Virtual</option>
                                        <option value="Híbrida">Híbrida</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Fecha Inicio</label>
                                    <InputDate class="form-control" @bind-Value="editarCertificadoDto.FechaInicio" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Fecha Fin</label>
                                    <InputDate class="form-control" @bind-Value="editarCertificadoDto.FechaFin" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Horas de Duración</label>
                                    <InputNumber class="form-control" @bind-Value="editarCertificadoDto.HorasDuracion" />
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descripción</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="editarCertificadoDto.Descripcion" />
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarEditarCertificadoModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarEdicionCertificado" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Confirmación para Reenviar Solicitud -->
@if (showConfirmarReenvioModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-arrow-repeat"></i> Confirmar Reenvío
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelarReenvio"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>¿Está seguro que desea reenviar esta solicitud para revisión?</strong>
                    </div>
                    <p class="mb-0">Esta acción enviará la solicitud nuevamente al administrador para su revisión.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarReenvio">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmarReenvio" 
                            disabled="@isProcessing" style="background-color: #8a1538; border-color: #8a1538;">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-repeat"></i>
                        }
                        Reenviar Solicitud
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Confirmación para Reenviar Certificado -->
@if (showConfirmarReenvioCertificadoModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-arrow-repeat"></i> Confirmar Reenvío de Certificado
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelarReenvioCertificado"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>¿Está seguro que desea reenviar este certificado para revisión?</strong>
                    </div>
                    <p class="mb-0">Esta acción enviará el certificado nuevamente al administrador para su revisión.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarReenvioCertificado">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmarReenvioCertificado" 
                            disabled="@isProcessing" style="background-color: #8a1538; border-color: #8a1538;">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-repeat"></i>
                        }
                        Reenviar Certificado
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Confirmación para Reenviar Evidencia -->
@if (showConfirmarReenvioEvidenciaModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-arrow-repeat"></i> Confirmar Reenvío de Evidencia
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelarReenvioEvidencia"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>¿Está seguro que desea reenviar esta evidencia de investigación para revisión?</strong>
                    </div>
                    <p class="mb-0">Esta acción enviará la evidencia nuevamente al administrador para su revisión.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarReenvioEvidencia">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmarReenvioEvidencia" 
                            disabled="@isProcessing" style="background-color: #8a1538; border-color: #8a1538;">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-repeat"></i>
                        }
                        Reenviar Evidencia
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Confirmación para Eliminar Solicitud -->
@if (showConfirmarEliminarSolicitudModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-trash"></i> Confirmar Eliminación
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelarEliminarSolicitud"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>¿Está seguro que desea eliminar esta solicitud?</strong>
                    </div>
                    <div class="alert alert-warning">
                        <strong>⚠️ Advertencia:</strong> Esta acción no se puede deshacer. La solicitud será eliminada permanentemente.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEliminarSolicitud">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminarSolicitud" 
                            disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-trash"></i>
                        }
                        Eliminar Solicitud
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Confirmación para Eliminar Certificado -->
@if (showConfirmarEliminarCertificadoModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-trash"></i> Confirmar Eliminación
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelarEliminarCertificado"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>¿Está seguro de que desea eliminar este certificado?</strong>
                    </div>
                    <div class="alert alert-warning">
                        <strong>⚠️ Advertencia:</strong> Esta acción no se puede deshacer. El certificado será eliminado permanentemente.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEliminarCertificado">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminarCertificado" 
                            disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-trash"></i>
                        }
                        Eliminar Certificado
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Confirmación para Eliminar Evidencia -->
@if (showConfirmarEliminarEvidenciaModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-trash"></i> Confirmar Eliminación
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelarEliminarEvidencia"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>¿Está seguro de que desea eliminar esta evidencia de investigación?</strong>
                    </div>
                    <div class="alert alert-warning">
                        <strong>⚠️ Advertencia:</strong> Esta acción no se puede deshacer. La evidencia será eliminada permanentemente.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEliminarEvidencia">
                        <i class="bi bi-x-lg"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminarEvidencia" 
                            disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-trash"></i>
                        }
                        Eliminar Evidencia
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Reemplazar Archivo de Certificado -->
@if (showReemplazarArchivoCertificadoModal && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Reemplazar Archivo del Certificado</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showReemplazarArchivoCertificadoModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Seleccionar nuevo archivo (PDF, máximo 10MB)</label>
                        <InputFile class="form-control" @ref="inputFileReemplazoCertificado" OnChange="OnFileChangeReemplazoCertificado" accept=".pdf" />
                    </div>
                    @if (!string.IsNullOrEmpty(archivoReemplazoCertificadoNombre))
                    {
                        <div class="alert alert-info">
                            <strong>Archivo seleccionado:</strong> @archivoReemplazoCertificadoNombre
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showReemplazarArchivoCertificadoModal = false">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="EjecutarReemplazarArchivoCertificado" 
                            disabled="@(isProcessing || string.IsNullOrEmpty(archivoReemplazoCertificadoContenido))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Reemplazar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para Ver Motivo de Rechazo de Certificados -->
@if (showMotivoRechazoCertificadoModal && certificadoSeleccionado != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">Motivo de Rechazo - Certificado</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showMotivoRechazoCertificadoModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger">
                        <strong>Motivo del rechazo:</strong>
                        <p class="mt-2">@GetMotivoRechazo(certificadoSeleccionado.MotivoRechazo)</p>
                    </div>
                    @if (!string.IsNullOrEmpty(GetComentariosAdicionales(certificadoSeleccionado.MotivoRechazo, certificadoSeleccionado.ComentariosRevision)))
                    {
                        <div class="alert alert-info">
                            <strong>Comentarios adicionales:</strong>
                            <p class="mt-2">@GetComentariosAdicionales(certificadoSeleccionado.MotivoRechazo, certificadoSeleccionado.ComentariosRevision)</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showMotivoRechazoCertificadoModal = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de Importación de Documentos -->
@if (showImportacionModal)
{
    <SGA.Web.Components.DocumentoImportacionModal 
        OnCerrar="CerrarModalImportacion" 
        OnDocumentosImportados="OnDocumentosImportados" />
}

@code {
    // Referencias a los componentes modales
    private ObrasAcademicasModal? obrasModal;
    private CertificadosCapacitacionModal? certificadosModal;

    // Variables para obras académicas
    private List<ObraAcademicaDetalleDto>? todasSolicitudesObras;
    private bool isLoadingObras = true;
    private bool showObrasModal = false;
    private bool isEnviandoObras = false;
    
    // Variables para certificados de capacitación
    private List<CertificadoCapacitacionDetalleDto> todasSolicitudesCertificados = new();
    private bool isLoadingCertificados = false;
    private bool showCertificadosModal = false;
    
    // Variables para importación de documentos
    private bool showImportacionModal = false;

    // Variables para evidencias de investigación
    private List<EvidenciaInvestigacionViewModel>? todasSolicitudesEvidencias;
    private bool isLoadingEvidencias = true;
    
    // Variables para gestión de documentos
    private ObraAcademicaDetalleDto? solicitudSeleccionada;
    private CertificadoCapacitacionDetalleDto? certificadoSeleccionado = null;
    private bool showMotivoRechazoModal = false;
    private bool showMotivoRechazoCertificadoModal = false;
    private bool showEditarMetadatosModal = false;
    private bool showReemplazarArchivoModal = false;
    private bool showAgregarComentarioModal = false;
    private bool showVisualizarPDFModal = false;
    private bool isProcessing = false;
    
    // Variables para editar metadatos
    private EditarMetadatosSolicitudDto metadatosEdicion = new();
    
    // Variables para reemplazar archivo
    private InputFile? inputFileReemplazo;
    private string archivoReemplazoNombre = string.Empty;
    private string archivoReemplazoContenido = string.Empty;
    
    // Variables para comentarios
    private string nuevoComentario = string.Empty;
    
    // Variables para visualizar PDF
    private string? pdfUrl;
    private string? pdfNombreArchivo;
    private bool isLoadingPDF = false;
    private string? errorPDF;

    // Variables adicionales para certificados
    private bool showEditarCertificadoModal = false;
    private EditarMetadatosCertificadoDto? editarCertificadoDto = null;
    private bool showReemplazarArchivoCertificadoModal = false;
    private InputFile? inputFileReemplazoCertificado;
    private string archivoReemplazoCertificadoNombre = string.Empty;
    private string archivoReemplazoCertificadoContenido = string.Empty;

    // Variables para modales de confirmación (reemplazar alerts)
    private bool showConfirmarReenvioModal = false;
    private bool showConfirmarReenvioCertificadoModal = false;
    private bool showConfirmarReenvioEvidenciaModal = false;
    private bool showConfirmarEliminarSolicitudModal = false;
    private bool showConfirmarEliminarCertificadoModal = false;
    private bool showConfirmarEliminarEvidenciaModal = false;
    private Guid solicitudIdParaAccion = Guid.Empty;
    private Guid certificadoIdParaReenvio = Guid.Empty;
    private Guid evidenciaIdParaReenvio = Guid.Empty;
    private Guid certificadoIdParaEliminar = Guid.Empty;
    private Guid evidenciaIdParaEliminar = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllData();
    }

    private async Task LoadAllData()
    {
        await Task.WhenAll(
            LoadTodasSolicitudesObras(),
            LoadTodasSolicitudesCertificados(),
            LoadTodasSolicitudesEvidencias()
        );
    }

    // Métodos para Obras Académicas
    private async Task LoadTodasSolicitudesObras()
    {
        try
        {
            isLoadingObras = true;
            todasSolicitudesObras = await DocumentosService.LoadTodasSolicitudesObrasAsync();
        }
        finally
        {
            isLoadingObras = false;
        }
    }

    private void ShowObrasModal()
    {
        showObrasModal = true;
        StateHasChanged();
    }

    private void CloseObrasModal()
    {
        showObrasModal = false;
        StateHasChanged();
    }

    private async Task EnviarSolicitudObras()
    {
        if (obrasModal == null) return;

        var nuevasObras = obrasModal.GetNuevasObras();
        var comentarios = obrasModal.GetComentarios();

        if (!nuevasObras.Any() || !nuevasObras.All(o => 
            !string.IsNullOrWhiteSpace(o.Titulo) && 
            !string.IsNullOrWhiteSpace(o.TipoObra) && 
            o.FechaPublicacion != default))
        {
            ToastService.ShowWarning("Por favor complete todos los campos obligatorios.");
            return;
        }

        try
        {
            isEnviandoObras = true;
            StateHasChanged();

            var solicitud = new SolicitudObrasAcademicasDto
            {
                Obras = nuevasObras,
                Comentarios = comentarios
            };

            var success = await DocumentosService.EnviarSolicitudObrasAsync(solicitud);
            
            if (success)
            {
                CloseObrasModal();
                await LoadTodasSolicitudesObras();
            }
        }
        finally
        {
            isEnviandoObras = false;
            StateHasChanged();
        }
    }

    // Métodos para Certificados
    private async Task LoadTodasSolicitudesCertificados()
    {
        try
        {
            isLoadingCertificados = true;
            todasSolicitudesCertificados = await DocumentosService.LoadTodasSolicitudesCertificadosAsync() ?? new List<CertificadoCapacitacionDetalleDto>();
        }
        finally
        {
            isLoadingCertificados = false;
        }
    }

    private void ShowCertificadosModal()
    {
        showCertificadosModal = true;
    }

    private void CerrarCertificadosModal()
    {
        showCertificadosModal = false;
        if (certificadosModal != null)
        {
            certificadosModal.LimpiarFormulario();
        }
    }

    private async Task GuardarCertificados()
    {
        if (certificadosModal == null) return;

        var certificados = certificadosModal.GetNuevosCertificados();
        
        if (!certificados.Any() || !certificados.All(c => 
            !string.IsNullOrWhiteSpace(c.NombreCurso) && 
            !string.IsNullOrWhiteSpace(c.InstitucionOfertante) &&
            !string.IsNullOrWhiteSpace(c.TipoCapacitacion) &&
            !string.IsNullOrWhiteSpace(c.Modalidad) &&
            c.HorasDuracion > 0 &&
            c.FechaInicio != default &&
            c.FechaFin != default &&
            !string.IsNullOrEmpty(c.ArchivoContenido)))
        {
            ToastService.ShowWarning("Por favor complete todos los campos obligatorios.");
            return;
        }

        try
        {
            isEnviandoObras = true;
            
            var solicitud = new SolicitarCertificadosCapacitacionDto
            {
                Certificados = certificados
            };

            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PostAsJsonAsync("api/certificados-capacitacion/solicitar", solicitud);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Certificados enviados correctamente");
                CerrarCertificadosModal();
                await LoadTodasSolicitudesCertificados();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Error al enviar certificados: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isEnviandoObras = false;
        }
    }

    // Métodos para Evidencias de Investigación
    private async Task LoadTodasSolicitudesEvidencias()
    {
        try
        {
            isLoadingEvidencias = true;
            todasSolicitudesEvidencias = await DocumentosService.LoadTodasSolicitudesEvidenciasAsync();
        }
        finally
        {
            isLoadingEvidencias = false;
        }
    }

    // Event handlers para los componentes
    private async Task VisualizarDocumento(Guid solicitudId)
    {
        try
        {
            isLoadingPDF = true;
            errorPDF = null;
            
            var result = await DocumentVisualizationService.VisualizarObraAcademica(solicitudId);
            
            if (result.Success)
            {
                pdfUrl = result.PdfUrl;
                showVisualizarPDFModal = true;
            }
            else
            {
                errorPDF = result.ErrorMessage;
                ToastService.ShowError($"Error al visualizar: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            errorPDF = $"Error inesperado: {ex.Message}";
            ToastService.ShowError($"Error inesperado: {ex.Message}");
        }
        finally
        {
            isLoadingPDF = false;
        }
    }

    private async Task DescargarDocumento(Guid solicitudId)
    {
        await DocumentVisualizationService.DescargarObraAcademica(solicitudId);
    }

    private void MostrarEditarMetadatos(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        metadatosEdicion = new EditarMetadatosSolicitudDto
        {
            Titulo = solicitud.Titulo,
            Descripcion = solicitud.Descripcion,
            TipoObra = solicitud.TipoObra,
            FechaPublicacion = solicitud.FechaPublicacion,
            Editorial = solicitud.Editorial,
            Revista = solicitud.Revista,
            ISBN_ISSN = solicitud.ISBN_ISSN,
            DOI = solicitud.DOI,
            EsIndexada = solicitud.EsIndexada,
            IndiceIndexacion = solicitud.IndiceIndexacion,
            Autores = solicitud.Autores
        };
        showEditarMetadatosModal = true;
        StateHasChanged();
    }

    private void MostrarReemplazarArchivo(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        archivoReemplazoNombre = string.Empty;
        archivoReemplazoContenido = string.Empty;
        showReemplazarArchivoModal = true;
        StateHasChanged();
    }

    private void MostrarMotivoRechazo(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        showMotivoRechazoModal = true;
        StateHasChanged();
    }

    private void MostrarAgregarComentario(ObraAcademicaDetalleDto solicitud)
    {
        solicitudSeleccionada = solicitud;
        nuevoComentario = string.Empty;
        showAgregarComentarioModal = true;
        StateHasChanged();
    }

    // ✅ MÉTODOS CORREGIDOS - YA NO USAN ALERTS, USAN MODALES
    
    private void MostrarConfirmarReenvio(Guid solicitudId)
    {
        solicitudIdParaAccion = solicitudId;
        showConfirmarReenvioModal = true;
        StateHasChanged();
    }

    private void CancelarReenvio()
    {
        showConfirmarReenvioModal = false;
        solicitudIdParaAccion = Guid.Empty;
        StateHasChanged();
    }

    private async Task ConfirmarReenvio()
    {
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsync($"api/obraacademicas/reenviar/{solicitudIdParaAccion}", null);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Solicitud reenviada correctamente");
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al reenviar la solicitud");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            CancelarReenvio();
        }
    }

    private void MostrarConfirmarEliminarSolicitud(Guid solicitudId)
    {
        solicitudIdParaAccion = solicitudId;
        showConfirmarEliminarSolicitudModal = true;
        StateHasChanged();
    }

    private void CancelarEliminarSolicitud()
    {
        showConfirmarEliminarSolicitudModal = false;
        solicitudIdParaAccion = Guid.Empty;
        StateHasChanged();
    }

    private async Task ConfirmarEliminarSolicitud()
    {
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.DeleteAsync($"api/obraacademicas/eliminar/{solicitudIdParaAccion}");
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Solicitud eliminada correctamente");
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al eliminar la solicitud");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            CancelarEliminarSolicitud();
        }
    }

    // Métodos para reenvío de certificados
    private void MostrarConfirmarReenvioCertificado(Guid certificadoId)
    {
        certificadoIdParaReenvio = certificadoId;
        showConfirmarReenvioCertificadoModal = true;
        StateHasChanged();
    }

    private void CancelarReenvioCertificado()
    {
        showConfirmarReenvioCertificadoModal = false;
        certificadoIdParaReenvio = Guid.Empty;
        StateHasChanged();
    }

    private async Task ConfirmarReenvioCertificado()
    {
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsync($"api/certificados-capacitacion/reenviar/{certificadoIdParaReenvio}", null);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Certificado reenviado correctamente");
                await LoadTodasSolicitudesCertificados();
            }
            else
            {
                ToastService.ShowError("Error al reenviar el certificado");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            CancelarReenvioCertificado();
        }
    }

    // Métodos para reenvío de evidencias
    private void MostrarConfirmarReenvioEvidencia(Guid evidenciaId)
    {
        evidenciaIdParaReenvio = evidenciaId;
        showConfirmarReenvioEvidenciaModal = true;
        StateHasChanged();
    }

    private void CancelarReenvioEvidencia()
    {
        showConfirmarReenvioEvidenciaModal = false;
        evidenciaIdParaReenvio = Guid.Empty;
        StateHasChanged();
    }

    private async Task ConfirmarReenvioEvidencia()
    {
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsync($"api/evidencias-investigacion/reenviar/{evidenciaIdParaReenvio}", null);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Evidencia reenviada correctamente");
                await LoadTodasSolicitudesEvidencias();
            }
            else
            {
                ToastService.ShowError("Error al reenviar la evidencia");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            CancelarReenvioEvidencia();
        }
    }

    // Event handlers para certificados
    private async Task VisualizarCertificado(Guid certificadoId)
    {
        try
        {
            isLoadingPDF = true;
            errorPDF = null;
            
            var result = await DocumentVisualizationService.VisualizarCertificado(certificadoId);
            
            if (result.Success)
            {
                pdfUrl = result.PdfUrl;
                pdfNombreArchivo = result.FileName;
                showVisualizarPDFModal = true;
            }
            else
            {
                errorPDF = result.ErrorMessage;
            }
        }
        finally
        {
            isLoadingPDF = false;
        }
    }

    private async Task DescargarCertificado(Guid certificadoId)
    {
        await DocumentVisualizationService.DescargarCertificado(certificadoId);
    }

    private void EditarCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        editarCertificadoDto = new EditarMetadatosCertificadoDto
        {
            NombreCurso = certificado.NombreCurso,
            InstitucionOfertante = certificado.InstitucionOfertante,
            TipoCapacitacion = certificado.TipoCapacitacion,
            FechaInicio = certificado.FechaInicio,
            FechaFin = certificado.FechaFin,
            HorasDuracion = certificado.HorasDuracion,
            Modalidad = certificado.Modalidad,
            NumeroRegistro = certificado.NumeroRegistro,
            AreaTematica = certificado.AreaTematica,
            Descripcion = certificado.Descripcion
        };
        showEditarCertificadoModal = true;
    }

    private void ReemplazarArchivoCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        archivoReemplazoCertificadoNombre = string.Empty;
        archivoReemplazoCertificadoContenido = string.Empty;
        showReemplazarArchivoCertificadoModal = true;
        StateHasChanged();
    }

    private void VerMotivoRechazoCertificado(CertificadoCapacitacionDetalleDto certificado)
    {
        certificadoSeleccionado = certificado;
        showMotivoRechazoCertificadoModal = true;
        StateHasChanged();
    }

    private void MostrarConfirmarEliminarCertificado(Guid certificadoId)
    {
        certificadoIdParaEliminar = certificadoId;
        showConfirmarEliminarCertificadoModal = true;
    }

    private void CancelarEliminarCertificado()
    {
        showConfirmarEliminarCertificadoModal = false;
        certificadoIdParaEliminar = Guid.Empty;
    }

    private async Task ConfirmarEliminarCertificado()
    {
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.DeleteAsync($"api/certificados-capacitacion/eliminar/{certificadoIdParaEliminar}");
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Certificado eliminado correctamente");
                await LoadTodasSolicitudesCertificados();
            }
            else
            {
                ToastService.ShowError("Error al eliminar el certificado");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            CancelarEliminarCertificado();
        }
    }

    // Métodos para Eliminar Evidencias de Investigación
    private void MostrarConfirmarEliminarEvidencia(Guid evidenciaId)
    {
        evidenciaIdParaEliminar = evidenciaId;
        showConfirmarEliminarEvidenciaModal = true;
        StateHasChanged();
    }

    private void CancelarEliminarEvidencia()
    {
        showConfirmarEliminarEvidenciaModal = false;
        evidenciaIdParaEliminar = Guid.Empty;
    }

    private async Task ConfirmarEliminarEvidencia()
    {
        try
        {
            isProcessing = true;
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.DeleteAsync($"api/evidencias-investigacion/eliminar/{evidenciaIdParaEliminar}");
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Evidencia eliminada correctamente");
                await LoadTodasSolicitudesEvidencias();
            }
            else
            {
                ToastService.ShowError("Error al eliminar la evidencia");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            CancelarEliminarEvidencia();
        }
    }

    // Métodos auxiliares para modales y operaciones
    private void CerrarVisualizarPDF()
    {
        showVisualizarPDFModal = false;
        pdfUrl = null;
        pdfNombreArchivo = null;
        errorPDF = null;
    }

    private async Task GuardarMetadatos()
    {
        if (solicitudSeleccionada?.SolicitudId == null) return;
        
        try
        {
            isProcessing = true;
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/obraacademicas/editar-metadatos/{solicitudSeleccionada.SolicitudId}", metadatosEdicion);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Metadatos actualizados correctamente");
                showEditarMetadatosModal = false;
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al actualizar los metadatos");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task OnFileChangeReemplazo(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.Size <= 10 * 1024 * 1024) // 10MB max
        {
            try
            {
                archivoReemplazoNombre = file.Name;
                using var stream = file.OpenReadStream(10 * 1024 * 1024);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                archivoReemplazoContenido = Convert.ToBase64String(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error al leer el archivo: {ex.Message}");
                archivoReemplazoNombre = string.Empty;
                archivoReemplazoContenido = string.Empty;
            }
        }
        else
        {
            ToastService.ShowError("El archivo debe ser menor a 10MB");
        }
    }
    
    private async Task ReemplazarArchivo()
    {
        if (solicitudSeleccionada?.SolicitudId == null || string.IsNullOrEmpty(archivoReemplazoContenido)) return;
        
        try
        {
            isProcessing = true;
            
            var reemplazarDto = new ReemplazarArchivoDto
            {
                ArchivoNombre = archivoReemplazoNombre,
                ArchivoContenido = archivoReemplazoContenido,
                ArchivoTipo = "application/pdf"
            };
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/obraacademicas/reemplazar-archivo/{solicitudSeleccionada.SolicitudId}", reemplazarDto);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Archivo reemplazado correctamente");
                showReemplazarArchivoModal = false;
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al reemplazar el archivo");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private async Task GuardarComentario()
    {
        if (solicitudSeleccionada?.SolicitudId == null || string.IsNullOrWhiteSpace(nuevoComentario)) return;
        
        try
        {
            isProcessing = true;
            
            var comentarioDto = new { Comentario = nuevoComentario };
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PostAsJsonAsync($"api/obraacademicas/agregar-comentario/{solicitudSeleccionada.SolicitudId}", comentarioDto);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Comentario agregado correctamente");
                showAgregarComentarioModal = false;
                await LoadTodasSolicitudesObras();
            }
            else
            {
                ToastService.ShowError("Error al agregar el comentario");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Métodos para certificados
    private void CerrarEditarCertificadoModal()
    {
        showEditarCertificadoModal = false;
        editarCertificadoDto = null;
        certificadoSeleccionado = null;
    }

    private async Task GuardarEdicionCertificado()
    {
        if (editarCertificadoDto == null || certificadoSeleccionado == null) return;
        
        try
        {
            isProcessing = true;
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/certificados-capacitacion/editar-metadatos/{certificadoSeleccionado.Id}", editarCertificadoDto);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Certificado actualizado correctamente");
                CerrarEditarCertificadoModal();
                await LoadTodasSolicitudesCertificados();
            }
            else
            {
                ToastService.ShowError("Error al actualizar el certificado");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Métodos para reemplazar archivo de certificados
    private async Task OnFileChangeReemplazoCertificado(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.Size <= 10 * 1024 * 1024) // 10MB max
        {
            try
            {
                archivoReemplazoCertificadoNombre = file.Name;
                using var stream = file.OpenReadStream(10 * 1024 * 1024);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                archivoReemplazoCertificadoContenido = Convert.ToBase64String(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Error al leer el archivo: {ex.Message}");
                archivoReemplazoCertificadoNombre = string.Empty;
                archivoReemplazoCertificadoContenido = string.Empty;
            }
        }
        else
        {
            ToastService.ShowError("El archivo debe ser menor a 10MB");
        }
    }
    
    private async Task EjecutarReemplazarArchivoCertificado()
    {
        if (certificadoSeleccionado == null || string.IsNullOrEmpty(archivoReemplazoCertificadoContenido)) return;
        
        try
        {
            isProcessing = true;
            
            var reemplazarDto = new ReemplazarArchivoDto
            {
                ArchivoNombre = archivoReemplazoCertificadoNombre,
                ArchivoContenido = archivoReemplazoCertificadoContenido,
                ArchivoTipo = "application/pdf"
            };
            
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            var response = await Http.PutAsJsonAsync($"api/certificados-capacitacion/reemplazar-archivo/{certificadoSeleccionado.Id}", reemplazarDto);
            
            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Archivo de certificado reemplazado correctamente");
                showReemplazarArchivoCertificadoModal = false;
                await LoadTodasSolicitudesCertificados();
            }
            else
            {
                ToastService.ShowError("Error al reemplazar el archivo del certificado");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Métodos auxiliares para procesar motivo de rechazo y comentarios
    private string GetMotivoRechazo(string? motivoRechazoCompleto)
    {
        if (string.IsNullOrEmpty(motivoRechazoCompleto))
            return "No especificado";

        // Si el texto contiene "Comentarios adicionales:", separar solo el motivo
        if (motivoRechazoCompleto.Contains("\n\nComentarios adicionales:"))
        {
            var partes = motivoRechazoCompleto.Split(new[] { "\n\nComentarios adicionales:" }, StringSplitOptions.None);
            if (partes.Length >= 1)
            {
                return partes[0].Trim();
            }
        }

        return motivoRechazoCompleto;
    }

    private string GetComentariosAdicionales(string? motivoRechazoCompleto, string? comentariosRevision)
    {
        // Primero verificar si está en el formato concatenado
        if (!string.IsNullOrEmpty(motivoRechazoCompleto) && motivoRechazoCompleto.Contains("\n\nComentarios adicionales:"))
        {
            var partes = motivoRechazoCompleto.Split(new[] { "\n\nComentarios adicionales:" }, StringSplitOptions.None);
            if (partes.Length == 2)
            {
                return partes[1].Trim();
            }
        }

        // Si no está en formato concatenado, usar comentariosRevision directamente
        // pero solo si no contiene el texto "Comentarios adicionales:" para evitar duplicación
        if (!string.IsNullOrEmpty(comentariosRevision) && !comentariosRevision.Contains("Comentarios adicionales:"))
        {
            return comentariosRevision;
        }

        return string.Empty;
    }

    private async Task ActualizarObras()
    {
        await LoadTodasSolicitudesObras();
    }

    private async Task ActualizarCertificados()
    {
        await LoadTodasSolicitudesCertificados();
    }

    private async Task ActualizarEvidencias()
    {
        await LoadTodasSolicitudesEvidencias();
    }

    // Métodos para modal de importación de documentos
    private void MostrarModalImportacion()
    {
        showImportacionModal = true;
        StateHasChanged();
    }

    private async Task CerrarModalImportacion()
    {
        showImportacionModal = false;
        StateHasChanged();
    }

    private async Task OnDocumentosImportados(List<Guid> documentosImportados)
    {
        // Recargar todas las secciones de documentos
        await Task.WhenAll(
            LoadTodasSolicitudesObras(),
            LoadTodasSolicitudesCertificados(),
            LoadTodasSolicitudesEvidencias()
        );
        
        ToastService.ShowSuccess($"Se importaron {documentosImportados.Count} documentos exitosamente");
        showImportacionModal = false;
        StateHasChanged();
    }

    // Variables para manejo de parámetros de URL (archivos importados)
    [Parameter] public Guid? ArchivoId { get; set; }
    private string? archivoIdParam;
    private string? tipoParam;
    private string? accionParam;

    protected override async Task OnParametersSetAsync()
    {
        // Obtener parámetros de la URL
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        // Priorizar el parámetro de ruta sobre el query parameter
        archivoIdParam = ArchivoId?.ToString() ?? query["archivo"];
        tipoParam = query["tipo"];
        accionParam = query["accion"];

        // Si hay parámetros, mostrar el acordeón correspondiente y precargar el archivo
        if (!string.IsNullOrEmpty(archivoIdParam) && !string.IsNullOrEmpty(tipoParam) && accionParam == "validar")
        {
            await Task.Delay(500); // Dar tiempo para que se carguen los datos
            await PrecargarArchivoEnFormulario();
        }

        await base.OnParametersSetAsync();
    }

    private async Task PrecargarArchivoEnFormulario()
    {
        if (string.IsNullOrEmpty(archivoIdParam) || string.IsNullOrEmpty(tipoParam))
            return;

        try
        {
            // Obtener información del archivo importado
            if (!Guid.TryParse(archivoIdParam, out var archivoId))
            {
                ToastService.ShowError("ID de archivo inválido");
                return;
            }

            // Obtener los archivos importados del usuario para encontrar el archivo específico
            var archivosImportados = await ArchivosImportadosService.GetArchivosImportadosAsync();
            var archivo = archivosImportados?.FirstOrDefault(a => a.Id == archivoId);

            if (archivo == null)
            {
                ToastService.ShowError("Archivo no encontrado");
                return;
            }

            // Abrir el modal correspondiente según el tipo y precargar el archivo
            await Task.Delay(1000); // Dar tiempo para que se carguen los modales

            switch (tipoParam.ToLower())
            {
                case "obra":
                case "obras":
                    ShowObrasModal();
                    if (obrasModal != null)
                    {
                        await obrasModal.PrecargarArchivo(archivo);
                    }
                    break;
                
                case "certificado":
                case "capacitacion":
                    ShowCertificadosModal();
                    if (certificadosModal != null)
                    {
                        await certificadosModal.PrecargarArchivo(archivo);
                    }
                    break;
                
                case "evidencia":
                case "investigacion":
                    // ShowEvidenciasModal(); // Si existe el modal de evidencias
                    ToastService.ShowInfo("Modal de evidencias de investigación no implementado aún");
                    break;
                
                default:
                    ToastService.ShowWarning($"Tipo de documento no reconocido: {tipoParam}");
                    break;
            }

            ToastService.ShowSuccess($"Archivo '{archivo.NombreArchivo}' precargado correctamente");

            // Limpiar los parámetros de la URL para evitar que se ejecute múltiples veces
            Navigation.NavigateTo("/documentos", false);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error al precargar archivo: {ex.Message}");
        }
    }
}
