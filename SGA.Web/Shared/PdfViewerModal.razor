@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8a1538; color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-file-pdf"></i>
                        @if (!string.IsNullOrEmpty(FileName))
                        {
                            @FileName
                        }
                        else
                        {
                            <span>Visualizar Documento</span>
                        }
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="OnClose" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body p-0" style="height: 80vh;">
                    @if (IsLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Cargando documento...</span>
                                </div>
                                <p class="mt-2">Cargando documento...</p>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="text-center">
                                <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                                <h5 class="mt-3">Error al cargar el documento</h5>
                                <p class="text-muted">@ErrorMessage</p>
                                <button class="btn btn-primary" @onclick="OnRetry" style="background-color: #8a1538; border-color: #8a1538;">
                                    <i class="bi bi-arrow-clockwise"></i> Reintentar
                                </button>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(PdfUrl))
                    {
                        <iframe src="@PdfUrl" 
                                style="width: 100%; height: 100%; border: none;"
                                title="Visualizador de PDF">
                        </iframe>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="text-center">
                                <i class="bi bi-file-pdf text-secondary" style="font-size: 3rem;"></i>
                                <h5 class="mt-3">No hay documento para mostrar</h5>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    @if (!string.IsNullOrEmpty(PdfUrl) && !IsLoading)
                    {
                        <button type="button" class="btn btn-outline-primary" @onclick="OnDownload">
                            <i class="bi bi-download"></i> Descargar
                        </button>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="OnClose">
                        <i class="bi bi-x-lg"></i> Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string? PdfUrl { get; set; }
    [Parameter] public string? FileName { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public string? ErrorMessage { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnDownload { get; set; }
    [Parameter] public EventCallback OnRetry { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsVisible)
        {
            // Prevenir scroll del body cuando el modal est√° abierto
            await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = 'hidden'");
        }
        else if (!IsVisible)
        {
            // Restaurar scroll del body cuando el modal se cierra
            await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = 'auto'");
        }
    }

    private async Task HandleClose()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = 'auto'");
        await OnClose.InvokeAsync();
    }

    public void Dispose()
    {
        // Asegurar que el scroll se restaure si el componente se destruye
        JSRuntime.InvokeVoidAsync("eval", "document.body.style.overflow = 'auto'");
    }
}
