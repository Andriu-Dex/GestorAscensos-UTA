@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="modal fade @(mostrar ? "show" : "")" id="modalReporteDocente" tabindex="-1" aria-labelledby="modalReporteDocenteLabel" aria-hidden="@(!mostrar)" style="display: @(mostrar ? "block" : "none");">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalReporteDocenteLabel">
                    <i class="bi bi-file-earmark-pdf"></i>
                    Reporte del Docente
                </h5>
                <button type="button" class="btn-close" @onclick="Cerrar" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                @if (cargando)
                {
                    <div class="d-flex justify-content-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Generando reporte...</span>
                        </div>
                    </div>
                }
                else if (bytesReporte.Length > 0)
                {
                    <div class="reporte-container">
                        <div class="reporte-header mb-4">
                            <div class="row">
                                <div class="col-md-8">
                                    <h4>Reporte del Docente</h4>
                                    <p class="text-muted">Reporte PDF generado exitosamente</p>
                                </div>
                                <div class="col-md-4 text-end">
                                    <button class="btn btn-primary" @onclick="DescargarReporte">
                                        <i class="bi bi-download"></i> Descargar PDF
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="reporte-content">
                            <div class="pdf-viewer-container mb-3">
                                @if (pdfCargando)
                                {
                                    <div class="pdf-loading">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Cargando PDF...</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <iframe src="@GetPdfDataUrl()" 
                                            width="100%" 
                                            height="400px" 
                                            style="border: 1px solid #ddd; border-radius: 8px;"
                                            @onload="OnPdfLoaded">
                                    </iframe>
                                }
                            </div>
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle"></i>
                                Vista previa del reporte PDF. Use el botón "Descargar PDF" para guardar el archivo.
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-warning" role="alert">
                        <i class="bi bi-exclamation-triangle"></i>
                        No se pudo cargar el reporte. Por favor, inténtelo de nuevo.
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cerrar">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@if (mostrar)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool mostrar { get; set; } = false;
    [Parameter] public Guid? docenteId { get; set; }
    [Parameter] public EventCallback OnCerrar { get; set; }

    private bool cargando = false;
    private bool pdfCargando = false;
    private string contenidoReporte = "";
    private byte[] bytesReporte = Array.Empty<byte>();

    protected override async Task OnParametersSetAsync()
    {
        if (mostrar && docenteId.HasValue && bytesReporte.Length == 0)
        {
            await CargarReporte();
        }
    }

    private async Task CargarReporte()
    {
        try
        {
            cargando = true;
            pdfCargando = true;
            StateHasChanged();

            var response = await Http.GetAsync($"api/admin/docentes/{docenteId}/reporte");
            
            if (response.IsSuccessStatusCode)
            {
                bytesReporte = await response.Content.ReadAsByteArrayAsync();
                pdfCargando = false;
            }
            else
            {
                bytesReporte = Array.Empty<byte>();
                pdfCargando = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar reporte: {ex.Message}");
            bytesReporte = Array.Empty<byte>();
            pdfCargando = false;
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private void OnPdfLoaded()
    {
        pdfCargando = false;
        StateHasChanged();
    }

    private async Task DescargarReporte()
    {
        if (bytesReporte.Length > 0)
        {
            var fileName = $"reporte-docente-{docenteId}.pdf";
            var base64String = Convert.ToBase64String(bytesReporte);
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64String, "application/pdf");
        }
    }

    private string GetPdfDataUrl()
    {
        if (bytesReporte.Length > 0)
        {
            var base64String = Convert.ToBase64String(bytesReporte);
            return $"data:application/pdf;base64,{base64String}";
        }
        return "";
    }

    private async Task Cerrar()
    {
        mostrar = false;
        cargando = false;
        pdfCargando = false;
        contenidoReporte = "";
        bytesReporte = Array.Empty<byte>();
        await OnCerrar.InvokeAsync();
    }
}
