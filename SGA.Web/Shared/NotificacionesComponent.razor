@using Microsoft.AspNetCore.Components.Authorization
@using SGA.Web.Services
@inject NotificacionesService NotificacionesService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="notifications-container">
    <button class="btn notification-bell" @onclick="ToggleNotifications" title="Notificaciones">
        <i class="bi bi-bell-fill notification-icon-bell"></i>
        @if (_contadorNoLeidas > 0)
        {
            <span class="notification-badge animate-pulse">
                @(_contadorNoLeidas > 99 ? "99+" : _contadorNoLeidas.ToString())
            </span>
        }
    </button>

    @if (_mostrarNotificaciones)
    {
        <div class="notifications-overlay" @onclick="CerrarNotificaciones"></div>
        <div class="notifications-dropdown animate-fadeIn">
            <div class="notifications-header">
                <div class="header-content">
                    <div class="header-title">
                        <i class="bi bi-bell-fill me-2"></i>
                        <span>Notificaciones</span>
                    </div>
                    <div class="header-actions">
                        @if (_notificaciones.Any(n => !n.Leida))
                        {
                            <button class="btn btn-sm btn-link mark-all-btn" 
                                    @onclick="MarcarTodasComoLeidas" 
                                    title="Marcar todas como leídas">
                                <i class="bi bi-check2-all me-1"></i>
                                <span class="d-none d-md-inline">Marcar todas</span>
                            </button>
                        }
                        <button class="btn btn-sm btn-link close-btn" 
                                @onclick="CerrarNotificaciones" 
                                title="Cerrar">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </div>
                @if (_contadorNoLeidas > 0)
                {
                    <div class="notifications-counter">
                        <small class="text-muted-nc">
                            @_contadorNoLeidas notificación@(_contadorNoLeidas != 1 ? "es" : "") sin leer
                        </small>
                    </div>
                }
            </div>
            
            <div class="notifications-body">
                @if (_notificaciones.Any())
                {
                    @foreach (var notificacion in _notificaciones.Take(8))
                    {
                        <div class="notification-item @(notificacion.Leida ? "read" : "unread") @GetEstadoClase(notificacion)" 
                             @onclick="() => MarcarComoLeida(notificacion.Id)"
                             @onclick:stopPropagation="true">
                            
                            <div class="notification-indicator @(notificacion.Leida ? "" : "active")"></div>
                            
                            <div class="notification-icon-container">
                                <div class="notification-icon @GetColorTipo(notificacion.Tipo ?? "Info")">
                                    <i class="bi @GetIconoTipo(notificacion.Tipo ?? "Info")"></i>
                                </div>
                            </div>
                            
                            <div class="notification-content">
                                <div class="notification-header-item">
                                    <h6 class="notification-title">@notificacion.Titulo</h6>
                                    <span class="notification-time" title="@notificacion.FechaCreacion.ToString("dd/MM/yyyy HH:mm:ss")">
                                        @FormatearTiempo(notificacion.FechaCreacion)
                                    </span>
                                </div>
                                <p class="notification-message">@notificacion.Mensaje</p>
                                <div class="notification-metadata">
                                    <span class="notification-type-badge @GetColorTipo(notificacion.Tipo ?? "Info")">
                                        @FormatearTipo(notificacion.Tipo ?? "Info")
                                    </span>
                                    @if (!string.IsNullOrEmpty(notificacion.UrlAccion))
                                    {
                                        <i class="bi bi-arrow-right-circle ms-auto notification-action-icon"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="notification-empty">
                        <div class="empty-icon">
                            <i class="bi bi-bell-slash"></i>
                        </div>
                        <h6 class="empty-title">¡Todo al día!</h6>
                        <p class="empty-message">No tienes notificaciones pendientes</p>
                    </div>
                }
            </div>
            
            @if (_notificaciones.Count > 8)
            {
                <div class="notifications-footer">
                    <button class="btn btn-primary btn-sm w-100 view-all-btn" @onclick="VerTodasNotificaciones">
                        <i class="bi bi-list-ul me-2"></i>
                        Ver todas las notificaciones (@_notificaciones.Count)
                    </button>
                </div>
            }
        </div>
    }
</div>

<!-- Modal completo de notificaciones -->
<NotificationsModal IsVisible="_mostrarModal" 
                   IsVisibleChanged="OnModalVisibilityChanged"
                   OnNotificationRead="OnNotificationReadFromModal" />

@code {
    private List<SGA.Web.Services.NotificacionDto> _notificaciones = new();
    private bool _mostrarNotificaciones = false;
    private bool _mostrarModal = false;
    private int _contadorNoLeidas = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User?.Identity?.IsAuthenticated == true)
        {
            // Inicializar servicio de notificaciones
            await NotificacionesService.InicializarAsync();
            
            // Cargar notificaciones existentes
            await CargarNotificaciones();
            
            // Suscribirse a eventos
            NotificacionesService.NotificacionRecibida += OnNotificacionRecibida;
            NotificacionesService.ContadorActualizado += OnContadorActualizado;
        }
    }

    private async Task CargarNotificaciones()
    {
        try
        {
            _notificaciones = await NotificacionesService.ObtenerNotificacionesAsync();
            ActualizarContador();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar notificaciones: {ex.Message}");
        }
    }

    private void OnNotificacionRecibida(SGA.Web.Services.NotificacionDto notificacion)
    {
        // Agregar nueva notificación al inicio de la lista
        _notificaciones.Insert(0, notificacion);
        ActualizarContador();
        
        // Mostrar toast de notificación
        _ = Task.Run(async () =>
        {
            await Task.Delay(100);
            await InvokeAsync(async () =>
            {
                await JSRuntime.InvokeVoidAsync("showToast", 
                    notificacion.Titulo, 
                    notificacion.Mensaje, 
                    GetColorTipo(notificacion.Tipo ?? "Info"));
                StateHasChanged();
            });
        });
        
        InvokeAsync(StateHasChanged);
    }

    private void OnContadorActualizado(int contador)
    {
        _contadorNoLeidas = contador;
        InvokeAsync(StateHasChanged);
    }

    private void ActualizarContador()
    {
        _contadorNoLeidas = _notificaciones.Count(n => !n.Leida);
    }

    private void ToggleNotifications()
    {
        _mostrarNotificaciones = !_mostrarNotificaciones;
    }

    private void CerrarNotificaciones()
    {
        _mostrarNotificaciones = false;
    }

    private async Task MarcarComoLeida(Guid notificacionId)
    {
        try
        {
            await NotificacionesService.MarcarComoLeidaAsync(notificacionId);
            
            var notificacion = _notificaciones.FirstOrDefault(n => n.Id == notificacionId);
            if (notificacion != null)
            {
                notificacion.Leida = true;
                ActualizarContador();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al marcar notificación como leída: {ex.Message}");
        }
    }

    private async Task MarcarTodasComoLeidas()
    {
        try
        {
            await NotificacionesService.MarcarTodasComoLeidasAsync();
            
            foreach (var notificacion in _notificaciones)
            {
                notificacion.Leida = true;
            }
            
            ActualizarContador();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al marcar todas las notificaciones como leídas: {ex.Message}");
        }
    }

    private void VerTodasNotificaciones()
    {
        _mostrarModal = true;
        CerrarNotificaciones();
    }

    private async Task OnModalVisibilityChanged(bool isVisible)
    {
        _mostrarModal = isVisible;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnNotificationReadFromModal()
    {
        // Recargar notificaciones cuando se lean desde el modal
        await CargarNotificaciones();
    }

    private string GetEstadoClase(SGA.Web.Services.NotificacionDto notificacion)
    {
        var clases = new List<string>();
        
        if (!notificacion.Leida)
        {
            clases.Add("nueva");
        }
        
        clases.Add($"tipo-{GetColorTipo(notificacion.Tipo ?? "Info")}");
        
        return string.Join(" ", clases);
    }

    private string GetIconoTipo(string tipo)
    {
        return tipo switch
        {
            "SolicitudAprobada" or "AscensoAprobado" or "CertificadoAprobado" or "ObraAprobada" or "EvidenciaAprobada" => "bi-check-circle-fill",
            "SolicitudRechazada" or "AscensoRechazado" or "CertificadoRechazado" or "ObraRechazada" or "EvidenciaRechazada" => "bi-x-circle-fill",
            "NuevaSolicitud" => "bi-file-earmark-plus-fill",
            "Advertencia" => "bi-exclamation-triangle-fill",
            "Error" => "bi-exclamation-circle-fill",
            "Exito" => "bi-check-circle-fill",
            "Info" => "bi-info-circle-fill",
            _ => "bi-bell-fill"
        };
    }

    private string GetColorTipo(string tipo)
    {
        return tipo switch
        {
            "SolicitudAprobada" or "AscensoAprobado" or "CertificadoAprobado" or "ObraAprobada" or "EvidenciaAprobada" or "Exito" => "success",
            "SolicitudRechazada" or "AscensoRechazado" or "CertificadoRechazado" or "ObraRechazada" or "EvidenciaRechazada" or "Error" => "danger",
            "NuevaSolicitud" => "primary",
            "Advertencia" => "warning",
            "Info" => "info",
            _ => "secondary"
        };
    }

    private string FormatearTipo(string tipo)
    {
        return tipo switch
        {
            "SolicitudAprobada" => "Aprobada",
            "SolicitudRechazada" => "Rechazada",
            "NuevaSolicitud" => "Nueva",
            "AscensoAprobado" => "Ascenso Aprobado",
            "AscensoRechazado" => "Ascenso Rechazado",
            "CertificadoAprobado" => "Certificado Aprobado",
            "CertificadoRechazado" => "Certificado Rechazado",
            "ObraAprobada" => "Obra Aprobada",
            "ObraRechazada" => "Obra Rechazada",
            "EvidenciaAprobada" => "Evidencia Aprobada",
            "EvidenciaRechazada" => "Evidencia Rechazada",
            "Advertencia" => "Advertencia",
            "Error" => "Error",
            "Exito" => "Éxito",
            "Info" => "Información",
            _ => "Sistema"
        };
    }

    private string FormatearTiempo(DateTime fecha)
    {
        var diferencia = DateTime.Now - fecha;
        
        if (diferencia.TotalMinutes < 1)
            return "Ahora";
        else if (diferencia.TotalMinutes < 60)
            return $"{(int)diferencia.TotalMinutes}m";
        else if (diferencia.TotalHours < 24)
            return $"{(int)diferencia.TotalHours}h";
        else if (diferencia.TotalDays < 7)
            return $"{(int)diferencia.TotalDays}d";
        else
            return fecha.ToString("dd/MM");
    }

    public async ValueTask DisposeAsync()
    {
        if (NotificacionesService != null)
        {
            NotificacionesService.NotificacionRecibida -= OnNotificacionRecibida;
            NotificacionesService.ContadorActualizado -= OnContadorActualizado;
            await NotificacionesService.DisposeAsync();
        }
    }
}
