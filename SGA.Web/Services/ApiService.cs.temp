using System.Net.Http.Json;
using SGA.Web.Models;

namespace SGA.Web.Services
{
    public interface IApiService
    {
        Task<T?> GetAsync<T>(string endpoint);
        Task<HttpResponseMessage> PostAsync<T>(string endpoint, T data);
        Task<HttpResponseMessage> PutAsync<T>(string endpoint, T data);
        Task<HttpResponseMessage> DeleteAsync(string endpoint);
        Task<DatosTTHH?> ObtenerDatosTTHH(string cedula);
        Task<bool> ValidarCorreoUnico(string email);
        Task<bool> ValidarCedulaUnica(string cedula);
        Task<bool> ValidarCedulaEcuatoriana(string cedula);
    }

    public class ApiService : IApiService
    {
        private readonly HttpClient _httpClient;

        public ApiService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<T?> GetAsync<T>(string endpoint)
        {
            try
            {
                return await _httpClient.GetFromJsonAsync<T>(endpoint);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error en solicitud GET a {endpoint}: {ex.Message}");
                throw;
            }
        }

        public async Task<HttpResponseMessage> PostAsync<T>(string endpoint, T data)
        {
            try
            {
                return await _httpClient.PostAsJsonAsync(endpoint, data);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error en solicitud POST a {endpoint}: {ex.Message}");
                throw;
            }
        }

        public async Task<HttpResponseMessage> PutAsync<T>(string endpoint, T data)
        {
            try
            {
                return await _httpClient.PutAsJsonAsync(endpoint, data);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error en solicitud PUT a {endpoint}: {ex.Message}");
                throw;
            }
        }

        public async Task<HttpResponseMessage> DeleteAsync(string endpoint)
        {
            try
            {
                return await _httpClient.DeleteAsync(endpoint);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error en solicitud DELETE a {endpoint}: {ex.Message}");
                throw;
            }
        }

        public async Task<DatosTTHH?> ObtenerDatosTTHH(string cedula)
        {
            try
            {
                // En un entorno real, esta llamada se realizaría a un endpoint real de TTHH
                // Por ahora, vamos a simular una respuesta
                
                // Para una implementación real, descomentar la siguiente línea:
                // return await _httpClient.GetFromJsonAsync<DatosTTHH>($"api/tthh/datos/{cedula}");
                
                // Simulación para desarrollo
                await Task.Delay(1000); // Simular latencia de red
                
                // Datos de prueba
                if (cedula == "1804567890")
                {
                    return new DatosTTHH
                    {
                        Cedula = cedula,
                        Nombres = "Juan Carlos",
                        Apellidos = "Pérez López",
                        Facultad = "FISEI"
                    };
                }
                
                // Datos aleatorios para cualquier otra cédula válida
                return new DatosTTHH
                {
                    Cedula = cedula,
                    Nombres = "Docente " + cedula.Substring(5, 3),
                    Apellidos = "Apellido " + cedula.Substring(7, 3),
                    Facultad = "Facultad de Ciencias"
                };
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error al obtener datos de TTHH para cédula {cedula}: {ex.Message}");
                return null;
            }
        }

        public async Task<bool> ValidarCorreoUnico(string email)
        {
            try
            {
                // En producción, esto debería llamar a una API
                // var response = await _httpClient.GetAsync($"api/auth/verificar-email/{email}");
                // return response.IsSuccessStatusCode;
                
                // Simulación para desarrollo
                await Task.Delay(500);
                
                // Ejemplo: correo juan.perez@uta.edu.ec ya está registrado
                return !email.ToLower().Equals("juan.perez@uta.edu.ec");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error al validar correo {email}: {ex.Message}");
                return false;
            }
        }

        public async Task<bool> ValidarCedulaUnica(string cedula)
        {
            try
            {
                // En producción, esto debería llamar a una API
                // var response = await _httpClient.GetAsync($"api/auth/verificar-cedula/{cedula}");
                // return response.IsSuccessStatusCode;
                
                // Simulación para desarrollo
                await Task.Delay(500);
                
                // Ejemplo: cédula 1804567891 ya está registrada
                return cedula != "1804567891";
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error al validar cédula {cedula}: {ex.Message}");
                return false;
            }
        }

        public async Task<bool> ValidarCedulaEcuatoriana(string cedula)
        {
            // Este método simula una validación asíncrona, pero la lógica es síncrona
            await Task.Delay(100);
            
            // Validar que tenga 10 dígitos
            if (cedula.Length != 10 || !long.TryParse(cedula, out _))
                return false;

            // Validar provincia (códigos del 01 al 24)
            int provincia = int.Parse(cedula.Substring(0, 2));
            if (provincia < 1 || provincia > 24)
                return false;

            // Validar tercer dígito (menor a 6 para personas naturales)
            int tercerDigito = int.Parse(cedula.Substring(2, 1));
            if (tercerDigito > 6)
                return false;

            // Algoritmo de validación del último dígito
            int[] coeficientes = { 2, 1, 2, 1, 2, 1, 2, 1, 2 };
            int verificador = int.Parse(cedula.Substring(9, 1));
            int suma = 0;

            for (int i = 0; i < 9; i++)
            {
                int valor = int.Parse(cedula.Substring(i, 1)) * coeficientes[i];
                suma += (valor >= 10) ? valor - 9 : valor;
            }

            int digitoVerificador = (suma % 10 != 0) ? 10 - (suma % 10) : 0;
            return verificador == digitoVerificador;
        }
    }
}
