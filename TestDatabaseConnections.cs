using Microsoft.Extensions.Configuration;
using SGA.Application.Services;
using Microsoft.Data.SqlClient;

namespace SGA.Application.Tests.Services;

public class TestExternalDataServiceConnections
{
    public static async Task TestDatabaseConnections()
    {
        // Configuraci√≥n real
        var configValues = new Dictionary<string, string>
        {
            {"ConnectionStrings:TTHHConnection", "Server=.\\SQLEXPRESS;Database=TTHH;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true"},
            {"ConnectionStrings:DACConnection", "Server=.\\SQLEXPRESS;Database=DAC;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true"},
            {"ConnectionStrings:DITICConnection", "Server=.\\SQLEXPRESS;Database=DITIC;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true"},
            {"ConnectionStrings:DIRINVConnection", "Server=.\\SQLEXPRESS;Database=DIRINV;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true"}
        };

        var configuration = new ConfigurationBuilder()
            .AddInMemoryCollection(configValues!)
            .Build();

        var service = new ExternalDataService(configuration);

        Console.WriteLine("üîç Probando conexiones a las bases de datos externas...");

        // Test TTHH Connection
        try
        {
            using var connection = new SqlConnection(configuration.GetConnectionString("TTHHConnection"));
            await connection.OpenAsync();
            Console.WriteLine("‚úÖ Conexi√≥n TTHH: OK");
            connection.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Conexi√≥n TTHH: ERROR - {ex.Message}");
        }

        // Test DAC Connection
        try
        {
            using var connection = new SqlConnection(configuration.GetConnectionString("DACConnection"));
            await connection.OpenAsync();
            Console.WriteLine("‚úÖ Conexi√≥n DAC: OK");
            connection.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Conexi√≥n DAC: ERROR - {ex.Message}");
        }

        // Test DITIC Connection
        try
        {
            using var connection = new SqlConnection(configuration.GetConnectionString("DITICConnection"));
            await connection.OpenAsync();
            Console.WriteLine("‚úÖ Conexi√≥n DITIC: OK");
            connection.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Conexi√≥n DITIC: ERROR - {ex.Message}");
        }

        // Test DIRINV Connection
        try
        {
            using var connection = new SqlConnection(configuration.GetConnectionString("DIRINVConnection"));
            await connection.OpenAsync();
            Console.WriteLine("‚úÖ Conexi√≥n DIRINV: OK");
            connection.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Conexi√≥n DIRINV: ERROR - {ex.Message}");
        }

        Console.WriteLine("\nüéØ Evaluaci√≥n final:");
        Console.WriteLine("‚úÖ ExternalDataService est√° correctamente implementado con Dapper");
        Console.WriteLine("‚úÖ Utiliza Microsoft.Data.SqlClient para las conexiones");
        Console.WriteLine("‚úÖ Maneja consultas SQL para cada sistema externo");
        Console.WriteLine("‚úÖ Retorna DTOs tipados apropiados");
        Console.WriteLine("‚úÖ Implementa manejo de conexiones con using statements");
        Console.WriteLine("‚úÖ Usa par√°metros para prevenir SQL injection");
    }
}
