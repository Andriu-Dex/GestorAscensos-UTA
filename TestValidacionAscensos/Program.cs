using Microsoft.Extensions.Configuration;
using SGA.Application.Services;
using SGA.Domain.Enums;

namespace TestValidacionAscensos;

public class Program
{
    public static async Task Main()
    {
        Console.WriteLine("\nüß™ PRUEBA DE VALIDACI√ìN DE REQUISITOS DE ASCENSO");
        Console.WriteLine("================================================");

        // Configuraci√≥n
        var configValues = new Dictionary<string, string>
        {
            {"ConnectionStrings:DACConnection", "Server=.\\SQLEXPRESS;Database=DAC;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true"},
            {"ConnectionStrings:TTHHConnection", "Server=.\\SQLEXPRESS;Database=TTHH;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true"},
            {"ConnectionStrings:DITICConnection", "Server=.\\SQLEXPRESS;Database=DITIC;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true"},
            {"ConnectionStrings:DIRINVConnection", "Server=.\\SQLEXPRESS;Database=DIRINV;Trusted_Connection=true;MultipleActiveResultSets=true;TrustServerCertificate=true"}
        };

        var configuration = new ConfigurationBuilder()
            .AddInMemoryCollection(configValues!)
            .Build();

        var externalDataService = new ExternalDataService(configuration);
        var validacionService = new ValidacionAscensoService(externalDataService);

        // Casos de prueba espec√≠ficos usando c√©dulas reales
        var casosPrueba = new[]
        {
            new { Cedula = "1805123456", Descripcion = "Steven Alexander Paredes - Docente Titular 2" },
            new { Cedula = "1801000000", Descripcion = "Andriu Dex - Docente Titular" },
            new { Cedula = "1805012341", Descripcion = "Erick Aguilar - Docente Titular" },
        };

        foreach (var caso in casosPrueba)
        {
            try
            {
                Console.WriteLine($"\nüîç CASO: {caso.Descripcion}");
                Console.WriteLine($"   C√©dula: {caso.Cedula}");
                Console.WriteLine("   " + new string('‚îÄ', 50));

                var resultado = await validacionService.ValidarRequisitosConDatosExternosAsync(caso.Cedula);

                Console.WriteLine($"   üéØ RESULTADO GENERAL: {(resultado.PuedeAscender ? "‚úÖ PUEDE ASCENDER" : "‚ùå NO PUEDE ASCENDER")}");
                Console.WriteLine($"   üìä Nivel actual: {resultado.NivelActual} ‚Üí {resultado.NivelDestino}");
                Console.WriteLine();

                // Detallar cada requisito
                Console.WriteLine("   üìã DETALLE DE REQUISITOS:");
                Console.WriteLine($"      ‚è∞ Antig√ºedad: {(resultado.CumpleAntiguedad ? "‚úÖ" : "‚ùå")} ({resultado.A√±osActuales} de {resultado.A√±osRequeridos} a√±os)");
                Console.WriteLine($"      üìö Obras acad√©micas: {(resultado.CumpleObras ? "‚úÖ" : "‚ùå")} ({resultado.ObrasActuales} de {resultado.ObrasRequeridas} obras)");
                Console.WriteLine($"      üìä Evaluaci√≥n docente: {(resultado.CumpleEvaluacion ? "‚úÖ" : "‚ùå")} ({resultado.PromedioActual:F1}% de {resultado.PromedioRequerido}% requerido)");
                Console.WriteLine($"      üéì Capacitaci√≥n: {(resultado.CumpleCapacitacion ? "‚úÖ" : "‚ùå")} ({resultado.HorasActuales} de {resultado.HorasRequeridas} horas)");
                
                if (resultado.MesesRequeridos > 0)
                {
                    Console.WriteLine($"      üî¨ Investigaci√≥n: {(resultado.CumpleInvestigacion ? "‚úÖ" : "‚ùå")} ({resultado.MesesActuales} de {resultado.MesesRequeridos} meses)");
                }

                // Mostrar observaciones si las hay
                if (!string.IsNullOrEmpty(resultado.Observaciones))
                {
                    Console.WriteLine($"   üìù Observaciones: {resultado.Observaciones}");
                }

                // Mostrar requisitos faltantes
                if (resultado.RequisitosFaltantes.Any())
                {
                    Console.WriteLine($"   ‚ö†Ô∏è  REQUISITOS FALTANTES:");
                    foreach (var faltante in resultado.RequisitosFaltantes)
                    {
                        Console.WriteLine($"      ‚Ä¢ {faltante}");
                    }
                }

                // AN√ÅLISIS CR√çTICO - Identificar problemas de validaci√≥n
                if (resultado.PuedeAscender)
                {
                    Console.WriteLine($"   ‚úÖ Este docente puede ascender seg√∫n el sistema");
                }
                else
                {
                    Console.WriteLine($"   ‚ùå Este docente NO puede ascender - Validaci√≥n correcta");
                }
                
                // Verificar si hay inconsistencias
                if (!resultado.CumpleEvaluacion && resultado.PuedeAscender)
                {
                    Console.WriteLine($"   üö® ¬°PROBLEMA DETECTADO! El docente NO cumple evaluaci√≥n pero puede ascender");
                }
                
                if (!resultado.CumpleAntiguedad && resultado.PuedeAscender)
                {
                    Console.WriteLine($"   üö® ¬°PROBLEMA DETECTADO! El docente NO cumple antig√ºedad pero puede ascender");
                }
                
                if (!resultado.CumpleObras && resultado.PuedeAscender)
                {
                    Console.WriteLine($"   üö® ¬°PROBLEMA DETECTADO! El docente NO cumple obras pero puede ascender");
                }
                
                if (!resultado.CumpleCapacitacion && resultado.PuedeAscender)
                {
                    Console.WriteLine($"   üö® ¬°PROBLEMA DETECTADO! El docente NO cumple capacitaci√≥n pero puede ascender");
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"   ‚ùå ERROR: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"      Inner: {ex.InnerException.Message}");
                }
            }

            Console.WriteLine();
        }

        Console.WriteLine("\nüîö FIN DE PRUEBAS DE VALIDACI√ìN");
        Console.WriteLine("Presiona cualquier tecla para continuar...");
        Console.ReadKey();
    }
}
