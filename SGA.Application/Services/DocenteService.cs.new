using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using SGA.Domain.Constants;
using SGA.Domain.Entities;
using SGA.Infrastructure.Repositories;

namespace SGA.Application.Services
{
    public interface IDocenteService
    {
        Task<Docente> GetDocenteByIdAsync(int id);
        Task<Docente> GetDocenteByCedulaAsync(string cedula);
        Task<Docente> GetDocenteByUsernameAsync(string username);
        Task<bool> ValidarRequisitosAscensoAsync(int docenteId);
        Task<Dictionary<string, bool>> ObtenerEstadoRequisitosAsync(int docenteId);
        Task ActualizarIndicadoresAsync(int docenteId, int tiempoRol, int numeroObras, decimal puntajeEvaluacion, int horasCapacitacion, int tiempoInvestigacion);
        Task UpdateDocenteAsync(Docente docente);
        Task CreateDocenteAsync(Docente docente);
    }

    public class DocenteService : IDocenteService
    {
        private readonly IDocenteRepository _docenteRepository;

        public DocenteService(IDocenteRepository docenteRepository)
        {
            _docenteRepository = docenteRepository;
        }

        public async Task<Docente> GetDocenteByIdAsync(int id)
        {
            return await _docenteRepository.GetByIdAsync(id);
        }

        public async Task<Docente> GetDocenteByCedulaAsync(string cedula)
        {
            return await _docenteRepository.GetByCedulaAsync(cedula);
        }

        public async Task<Docente> GetDocenteByUsernameAsync(string username)
        {
            return await _docenteRepository.GetByUsernameAsync(username);
        }

        public async Task<bool> ValidarRequisitosAscensoAsync(int docenteId)
        {
            var docente = await _docenteRepository.GetByIdAsync(docenteId);
            if (docente == null)
                return false;

            if (docente.NivelActual >= 5) // Ya está en nivel máximo
                return false;

            var requisito = ObtenerRequisitoParaNivel(docente.NivelActual);
            if (requisito == null)
                return false;

            return docente.TiempoEnRolActual >= requisito.TiempoMinimo &&
                   docente.NumeroObras >= requisito.ObrasMinimas &&
                   docente.PuntajeEvaluacion >= requisito.PuntajeEvaluacionMinimo &&
                   docente.HorasCapacitacion >= requisito.HorasCapacitacionMinimas &&
                   docente.TiempoInvestigacion >= requisito.TiempoInvestigacionMinimo;
        }

        public async Task<Dictionary<string, bool>> ObtenerEstadoRequisitosAsync(int docenteId)
        {
            var docente = await _docenteRepository.GetByIdAsync(docenteId);
            if (docente == null)
                return new Dictionary<string, bool>();

            var requisito = ObtenerRequisitoParaNivel(docente.NivelActual);
            if (requisito == null)
                return new Dictionary<string, bool>();

            return new Dictionary<string, bool>
            {
                { "TiempoEnRol", docente.TiempoEnRolActual >= requisito.TiempoMinimo },
                { "NumeroObras", docente.NumeroObras >= requisito.ObrasMinimas },
                { "PuntajeEvaluacion", docente.PuntajeEvaluacion >= requisito.PuntajeEvaluacionMinimo },
                { "HorasCapacitacion", docente.HorasCapacitacion >= requisito.HorasCapacitacionMinimas },
                { "TiempoInvestigacion", docente.TiempoInvestigacion >= requisito.TiempoInvestigacionMinimo }
            };
        }

        public async Task ActualizarIndicadoresAsync(int docenteId, int tiempoRol, int numeroObras, decimal puntajeEvaluacion, int horasCapacitacion, int tiempoInvestigacion)
        {
            var docente = await _docenteRepository.GetByIdAsync(docenteId);
            if (docente == null)
                throw new Exception("Docente no encontrado");

            docente.TiempoEnRolActual = tiempoRol;
            docente.NumeroObras = numeroObras;
            docente.PuntajeEvaluacion = puntajeEvaluacion;
            docente.HorasCapacitacion = horasCapacitacion;
            docente.TiempoInvestigacion = tiempoInvestigacion;

            await _docenteRepository.UpdateAsync(docente);
        }

        public async Task UpdateDocenteAsync(Docente docente)
        {
            var existingDocente = await _docenteRepository.GetByIdAsync(docente.Id);
            if (existingDocente == null)
                throw new Exception("Docente no encontrado");

            existingDocente.Cedula = docente.Cedula;
            existingDocente.Nombres = docente.Nombres;
            existingDocente.Apellidos = docente.Apellidos;
            existingDocente.Email = docente.Email;
            existingDocente.TelefonoContacto = docente.TelefonoContacto;
            existingDocente.Facultad = docente.Facultad;
            existingDocente.Departamento = docente.Departamento;
            existingDocente.NivelActual = docente.NivelActual;
            existingDocente.TiempoEnRolActual = docente.TiempoEnRolActual;
            existingDocente.NumeroObras = docente.NumeroObras;
            existingDocente.PuntajeEvaluacion = docente.PuntajeEvaluacion;
            existingDocente.HorasCapacitacion = docente.HorasCapacitacion;
            existingDocente.TiempoInvestigacion = docente.TiempoInvestigacion;
            existingDocente.NombreUsuario = docente.NombreUsuario;
            existingDocente.PasswordHash = docente.PasswordHash;
            existingDocente.IntentosFallidos = docente.IntentosFallidos;
            existingDocente.Bloqueado = docente.Bloqueado;
            existingDocente.FechaBloqueo = docente.FechaBloqueo;
            existingDocente.EsAdministrador = docente.EsAdministrador;

            await _docenteRepository.UpdateAsync(existingDocente);
        }

        public async Task CreateDocenteAsync(Docente docente)
        {
            // Verificar si ya existe un docente con el mismo nombre de usuario o cédula
            var existingByUsername = await _docenteRepository.GetByUsernameAsync(docente.NombreUsuario);
            if (existingByUsername != null)
            {
                throw new Exception("Ya existe un docente con este nombre de usuario");
            }

            var existingByCedula = await _docenteRepository.GetByCedulaAsync(docente.Cedula);
            if (existingByCedula != null)
            {
                throw new Exception("Ya existe un docente con esta cédula");
            }

            await _docenteRepository.AddAsync(docente);
        }

        private RequisitoAscenso? ObtenerRequisitoParaNivel(int nivelActual)
        {
            return Array.Find(ReglasAscenso.Requisitos, r => r.NivelActual == nivelActual);
        }
    }
}
