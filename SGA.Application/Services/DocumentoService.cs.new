using SGA.Application.DTOs.Documentos;
using SGA.Application.Interfaces;
using SGA.Application.Interfaces.Repositories;
using SGA.Domain.Entities;
using SGA.Domain.Enums;

namespace SGA.Application.Services;

public class DocumentoService : IDocumentoService
{
    private readonly IDocumentoRepository _documentoRepository;

    public DocumentoService(IDocumentoRepository documentoRepository)
    {
        _documentoRepository = documentoRepository;
    }

    public async Task<Guid> SubirDocumentoAsync(Guid solicitudId, SubirDocumentoRequestDto documento)
    {
        if (!await ValidarDocumentoAsync(documento))
            throw new ArgumentException("Documento inválido");

        var contenidoComprimido = await ComprimirPDFAsync(documento.Contenido);

        var doc = new Documento
        {
            SolicitudAscensoId = solicitudId,
            NombreArchivo = documento.Nombre,
            TamanoArchivo = contenidoComprimido.Length,
            TipoDocumento = documento.Tipo,
            ContenidoArchivo = contenidoComprimido,
            ContentType = documento.TipoContenido,
            RutaArchivo = $"/documentos/{solicitudId}/{documento.Nombre}"
        };

        doc = await _documentoRepository.CreateAsync(doc);
        return doc.Id;
    }

    public async Task<byte[]?> DescargarDocumentoAsync(Guid documentoId)
    {
        var documento = await _documentoRepository.GetByIdAsync(documentoId);
        return documento?.ContenidoArchivo;
    }

    public async Task<bool> EliminarDocumentoAsync(Guid documentoId)
    {
        return await _documentoRepository.DeleteAsync(documentoId);
    }

    public async Task<bool> ValidarDocumentoAsync(SubirDocumentoRequestDto documento)
    {
        await Task.CompletedTask; // Para evitar warning de async sin await
        
        // Validar que sea PDF
        if (!documento.TipoContenido.Equals("application/pdf", StringComparison.OrdinalIgnoreCase))
            return false;

        // Validar tamaño máximo (10MB)
        if (documento.Contenido.Length > 10 * 1024 * 1024)
            return false;

        // Validar que el contenido sea realmente un PDF
        if (documento.Contenido.Length < 4)
            return false;

        var header = documento.Contenido.Take(4).ToArray();
        var pdfHeader = new byte[] { 0x25, 0x50, 0x44, 0x46 }; // %PDF

        return header.SequenceEqual(pdfHeader);
    }

    public async Task<byte[]> ComprimirPDFAsync(byte[] contenidoPdf)
    {
        // Implementación básica - en un sistema real se usaría una librería de compresión de PDF
        // Por ahora retornamos el contenido original
        await Task.CompletedTask;
        return contenidoPdf;
    }
}
